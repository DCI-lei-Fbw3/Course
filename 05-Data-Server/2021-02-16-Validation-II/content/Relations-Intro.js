//Weclome Fbw3!
//Topic: Data Relations in MongoDb
//Reference: https://alexanderzeitler.com/articles/mongoose-referencing-schema-in-properties-and-arrays/

const { Mongoose } = require("mongoose");

/* 
Quick notes:

- The way we have discussed the difference between SQL and NOSQl databases, has been
that SQL databases allow data relatoions, whereas NOSQL databases don't. However, 
this is only partially true. 
- So what exactly is a relation?
   Data Relation takes its meaning from the english word "relation", meaning connections
   between objects/things in a given system.

- In our case, we have BSON objects in MongoDB, that might have relations between themselves. 

*/

// Mongoose Relations

/* 
- To model relation between connected data, you can reference a document or
embed it as a sub-document in another document. 
- Referencing a document does not create a "real" relationship between two documents as
does a relational database.
- Referencing documents is also known as "normalization". It is good for data consistency, 
but creates more queries in your system.
- Embedding documents in other documents is also known as denormalization. 
The benefit of this approach, is getting all the data you need about a document
and it's sub-documents with a single query. Therefore, this approach is very fast.
There is a drawback to denormalization, which is that data may not stay as 
consistent in the database.
- ObjectIDs are generated by MongoDb Drive (Mongoclient is the Nodejs driver), to
uniquely dentify each document. Object IDs consist of 12 Bytes:
    - 4 bytes: timestamp
    - 3 bytes: machine identifier
    - 2 bytes: process identifier
    - 3 bytes: counter

- The three main types of relations:
1) One-One
2) One-Many
3) Many-Many


*/

/* 
An example of this using Mongoose
 */
//1. Referencing documents/objects (Normalization)
 //You can reference a document using ref
 //here is a sampe schema

 const gameSchema = new Mongoose.Schema({
     publisher:{
         type: Mongoose.Schema.Types.ObjectID,
         ref: 'Publisher'
     }
     companyName:{
        type: Mongoose.Schema.Types.ObjectID,
        ref: 'Publisher'
     }
     companyCountry:{
        type: Mongoose.Schema.Types.ObjectID,
        ref: 'Country'
     }
     dom:{
        type: Mongoose.Schema.Types.ObjectID,
        ref: 'Country'
     }
     quantity:{
        type: Mongoose.Schema.Types.ObjectID,
        ref: 'Country'
     }

 })

 //2. Creating sub-documents (Denormalization)
 //Another common approach to create relations is by creating sub-documents

 const gameSchema = new Mongoose.Schema({
     publisher:{
         type: Mongoose.schema({
             companyName: String,
         })
     }
 })


 /* 
 End note:

 - Whenever you have a use case involving a relational database, do consider relations
 in Mongoose because you wont have to learn SQL.
 - There are two main types of relations in Mongoose -->
  1. Normlization
  2. Denormalization
  - MongoDB native drivers (Nodejs --> Mongoclient) has a different way of creating relations
than Mongoose. However, this is (unfortunately) not part of curriculum, but good to
know regardless.
Docs for MongoDb native driver references: https://docs.mongodb.com/manual/reference/database-references/
API docs: http://mongodb.github.io/node-mongodb-native/3.6/api/DBRef.html
 */