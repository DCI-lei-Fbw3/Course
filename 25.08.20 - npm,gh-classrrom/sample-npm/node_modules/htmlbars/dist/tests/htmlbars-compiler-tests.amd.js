define("dom-helper", ["exports", "./htmlbars-runtime/morph", "./morph-attr", "./dom-helper/build-html-dom", "./dom-helper/classes", "./dom-helper/prop"], function (exports, _htmlbarsRuntimeMorph, _morphAttr, _domHelperBuildHtmlDom, _domHelperClasses, _domHelperProp) {

  var doc = typeof document === 'undefined' ? false : document;

  var deletesBlankTextNodes = doc && (function (document) {
    var element = document.createElement('div');
    element.appendChild(document.createTextNode(''));
    var clonedElement = element.cloneNode(true);
    return clonedElement.childNodes.length === 0;
  })(doc);

  var ignoresCheckedAttribute = doc && (function (document) {
    var element = document.createElement('input');
    element.setAttribute('checked', 'checked');
    var clonedElement = element.cloneNode(false);
    return !clonedElement.checked;
  })(doc);

  var canRemoveSvgViewBoxAttribute = doc && (doc.createElementNS ? (function (document) {
    var element = document.createElementNS(_domHelperBuildHtmlDom.svgNamespace, 'svg');
    element.setAttribute('viewBox', '0 0 100 100');
    element.removeAttribute('viewBox');
    return !element.getAttribute('viewBox');
  })(doc) : true);

  var canClone = doc && (function (document) {
    var element = document.createElement('div');
    element.appendChild(document.createTextNode(' '));
    element.appendChild(document.createTextNode(' '));
    var clonedElement = element.cloneNode(true);
    return clonedElement.childNodes[0].nodeValue === ' ';
  })(doc);

  // This is not the namespace of the element, but of
  // the elements inside that elements.
  function interiorNamespace(element) {
    if (element && element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace && !_domHelperBuildHtmlDom.svgHTMLIntegrationPoints[element.tagName]) {
      return _domHelperBuildHtmlDom.svgNamespace;
    } else {
      return null;
    }
  }

  // The HTML spec allows for "omitted start tags". These tags are optional
  // when their intended child is the first thing in the parent tag. For
  // example, this is a tbody start tag:
  //
  // <table>
  //   <tbody>
  //     <tr>
  //
  // The tbody may be omitted, and the browser will accept and render:
  //
  // <table>
  //   <tr>
  //
  // However, the omitted start tag will still be added to the DOM. Here
  // we test the string and context to see if the browser is about to
  // perform this cleanup.
  //
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags
  // describes which tags are omittable. The spec for tbody and colgroup
  // explains this behavior:
  //
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-tbody-element
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#the-colgroup-element
  //

  var omittedStartTagChildTest = /<([\w:]+)/;
  function detectOmittedStartTag(string, contextualElement) {
    // Omitted start tags are only inside table tags.
    if (contextualElement.tagName === 'TABLE') {
      var omittedStartTagChildMatch = omittedStartTagChildTest.exec(string);
      if (omittedStartTagChildMatch) {
        var omittedStartTagChild = omittedStartTagChildMatch[1];
        // It is already asserted that the contextual element is a table
        // and not the proper start tag. Just see if a tag was omitted.
        return omittedStartTagChild === 'tr' || omittedStartTagChild === 'col';
      }
    }
  }

  function buildSVGDOM(html, dom) {
    var div = dom.document.createElement('div');
    div.innerHTML = '<svg>' + html + '</svg>';
    return div.firstChild.childNodes;
  }

  var guid = 1;

  function ElementMorph(element, dom, namespace) {
    this.element = element;
    this.dom = dom;
    this.namespace = namespace;
    this.guid = "element" + guid++;

    this._state = undefined;
    this.isDirty = true;
  }

  ElementMorph.prototype.getState = function () {
    if (!this._state) {
      this._state = {};
    }

    return this._state;
  };

  ElementMorph.prototype.setState = function (newState) {
    /*jshint -W093 */

    return this._state = newState;
  };

  // renderAndCleanup calls `clear` on all items in the morph map
  // just before calling `destroy` on the morph.
  //
  // As a future refactor this could be changed to set the property
  // back to its original/default value.
  ElementMorph.prototype.clear = function () {};

  ElementMorph.prototype.destroy = function () {
    this.element = null;
    this.dom = null;
  };

  /*
   * A class wrapping DOM functions to address environment compatibility,
   * namespaces, contextual elements for morph un-escaped content
   * insertion.
   *
   * When entering a template, a DOMHelper should be passed:
   *
   *   template(context, { hooks: hooks, dom: new DOMHelper() });
   *
   * TODO: support foreignObject as a passed contextual element. It has
   * a namespace (svg) that does not match its internal namespace
   * (xhtml).
   *
   * @class DOMHelper
   * @constructor
   * @param {HTMLDocument} _document The document DOM methods are proxied to
   */
  function DOMHelper(_document) {
    this.document = _document || document;
    if (!this.document) {
      throw new Error("A document object must be passed to the DOMHelper, or available on the global scope");
    }
    this.canClone = canClone;
    this.namespace = null;

    installEnvironmentSpecificMethods(this);
  }

  var prototype = DOMHelper.prototype;
  prototype.constructor = DOMHelper;

  prototype.getElementById = function (id, rootNode) {
    rootNode = rootNode || this.document;
    return rootNode.getElementById(id);
  };

  prototype.insertBefore = function (element, childElement, referenceChild) {
    return element.insertBefore(childElement, referenceChild);
  };

  prototype.appendChild = function (element, childElement) {
    return element.appendChild(childElement);
  };

  var itemAt;

  // It appears that sometimes, in yet to be itentified scenarios PhantomJS 2.0
  // crashes on childNodes.item(index), but works as expected with childNodes[index];
  //
  // Although it would be nice to move to childNodes[index] in all scenarios,
  // this would require SimpleDOM to maintain the childNodes array. This would be
  // quite costly, in both dev time and runtime.
  //
  // So instead, we choose the best possible method and call it a day.
  //
  /*global navigator */
  if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('PhantomJS')) {
    itemAt = function (nodes, index) {
      return nodes[index];
    };
  } else {
    itemAt = function (nodes, index) {
      return nodes.item(index);
    };
  }

  prototype.childAt = function (element, indices) {
    var child = element;

    for (var i = 0; i < indices.length; i++) {
      child = itemAt(child.childNodes, indices[i]);
    }

    return child;
  };

  // Note to a Fellow Implementor:
  // Ahh, accessing a child node at an index. Seems like it should be so simple,
  // doesn't it? Unfortunately, this particular method has caused us a surprising
  // amount of pain. As you'll note below, this method has been modified to walk
  // the linked list of child nodes rather than access the child by index
  // directly, even though there are two (2) APIs in the DOM that do this for us.
  // If you're thinking to yourself, "What an oversight! What an opportunity to
  // optimize this code!" then to you I say: stop! For I have a tale to tell.
  //
  // First, this code must be compatible with simple-dom for rendering on the
  // server where there is no real DOM. Previously, we accessed a child node
  // directly via `element.childNodes[index]`. While we *could* in theory do a
  // full-fidelity simulation of a live `childNodes` array, this is slow,
  // complicated and error-prone.
  //
  // "No problem," we thought, "we'll just use the similar
  // `childNodes.item(index)` API." Then, we could just implement our own `item`
  // method in simple-dom and walk the child node linked list there, allowing
  // us to retain the performance advantages of the (surely optimized) `item()`
  // API in the browser.
  //
  // Unfortunately, an enterprising soul named Samy Alzahrani discovered that in
  // IE8, accessing an item out-of-bounds via `item()` causes an exception where
  // other browsers return null. This necessitated a... check of
  // `childNodes.length`, bringing us back around to having to support a
  // full-fidelity `childNodes` array!
  //
  // Worst of all, Kris Selden investigated how browsers are actualy implemented
  // and discovered that they're all linked lists under the hood anyway. Accessing
  // `childNodes` requires them to allocate a new live collection backed by that
  // linked list, which is itself a rather expensive operation. Our assumed
  // optimization had backfired! That is the danger of magical thinking about
  // the performance of native implementations.
  //
  // And this, my friends, is why the following implementation just walks the
  // linked list, as surprised as that may make you. Please ensure you understand
  // the above before changing this and submitting a PR.
  //
  // Tom Dale, January 18th, 2015, Portland OR
  prototype.childAtIndex = function (element, index) {
    var node = element.firstChild;

    for (var idx = 0; node && idx < index; idx++) {
      node = node.nextSibling;
    }

    return node;
  };

  prototype.appendText = function (element, text) {
    return element.appendChild(this.document.createTextNode(text));
  };

  prototype.setAttribute = function (element, name, value) {
    element.setAttribute(name, String(value));
  };

  prototype.getAttribute = function (element, name) {
    return element.getAttribute(name);
  };

  prototype.setAttributeNS = function (element, namespace, name, value) {
    element.setAttributeNS(namespace, name, String(value));
  };

  prototype.getAttributeNS = function (element, namespace, name) {
    return element.getAttributeNS(namespace, name);
  };

  if (canRemoveSvgViewBoxAttribute) {
    prototype.removeAttribute = function (element, name) {
      element.removeAttribute(name);
    };
  } else {
    prototype.removeAttribute = function (element, name) {
      if (element.tagName === 'svg' && name === 'viewBox') {
        element.setAttribute(name, null);
      } else {
        element.removeAttribute(name);
      }
    };
  }

  prototype.setPropertyStrict = function (element, name, value) {
    if (value === undefined) {
      value = null;
    }

    if (value === null && (name === 'value' || name === 'type' || name === 'src')) {
      value = '';
    }

    element[name] = value;
  };

  prototype.getPropertyStrict = function (element, name) {
    return element[name];
  };

  prototype.setProperty = function (element, name, value, namespace) {
    if (element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace) {
      if (_domHelperProp.isAttrRemovalValue(value)) {
        element.removeAttribute(name);
      } else {
        if (namespace) {
          element.setAttributeNS(namespace, name, value);
        } else {
          element.setAttribute(name, value);
        }
      }
    } else {
      var _normalizeProperty = _domHelperProp.normalizeProperty(element, name);

      var normalized = _normalizeProperty.normalized;
      var type = _normalizeProperty.type;

      if (type === 'prop') {
        element[normalized] = value;
      } else {
        if (_domHelperProp.isAttrRemovalValue(value)) {
          element.removeAttribute(name);
        } else {
          if (namespace && element.setAttributeNS) {
            element.setAttributeNS(namespace, name, value);
          } else {
            element.setAttribute(name, value);
          }
        }
      }
    }
  };

  if (doc && doc.createElementNS) {
    // Only opt into namespace detection if a contextualElement
    // is passed.
    prototype.createElement = function (tagName, contextualElement) {
      var namespace = this.namespace;
      if (contextualElement) {
        if (tagName === 'svg') {
          namespace = _domHelperBuildHtmlDom.svgNamespace;
        } else {
          namespace = interiorNamespace(contextualElement);
        }
      }
      if (namespace) {
        return this.document.createElementNS(namespace, tagName);
      } else {
        return this.document.createElement(tagName);
      }
    };
    prototype.setAttributeNS = function (element, namespace, name, value) {
      element.setAttributeNS(namespace, name, String(value));
    };
  } else {
    prototype.createElement = function (tagName) {
      return this.document.createElement(tagName);
    };
    prototype.setAttributeNS = function (element, namespace, name, value) {
      element.setAttribute(name, String(value));
    };
  }

  prototype.addClasses = _domHelperClasses.addClasses;
  prototype.removeClasses = _domHelperClasses.removeClasses;

  prototype.setNamespace = function (ns) {
    this.namespace = ns;
  };

  prototype.detectNamespace = function (element) {
    this.namespace = interiorNamespace(element);
  };

  prototype.createDocumentFragment = function () {
    return this.document.createDocumentFragment();
  };

  prototype.createTextNode = function (text) {
    return this.document.createTextNode(text);
  };

  prototype.createComment = function (text) {
    return this.document.createComment(text);
  };

  prototype.repairClonedNode = function (element, blankChildTextNodes, isChecked) {
    if (deletesBlankTextNodes && blankChildTextNodes.length > 0) {
      for (var i = 0, len = blankChildTextNodes.length; i < len; i++) {
        var textNode = this.document.createTextNode(''),
            offset = blankChildTextNodes[i],
            before = this.childAtIndex(element, offset);
        if (before) {
          element.insertBefore(textNode, before);
        } else {
          element.appendChild(textNode);
        }
      }
    }
    if (ignoresCheckedAttribute && isChecked) {
      element.setAttribute('checked', 'checked');
    }
  };

  prototype.cloneNode = function (element, deep) {
    var clone = element.cloneNode(!!deep);
    return clone;
  };

  prototype.AttrMorphClass = _morphAttr.default;

  prototype.createAttrMorph = function (element, attrName, namespace) {
    return this.AttrMorphClass.create(element, attrName, this, namespace);
  };

  prototype.ElementMorphClass = ElementMorph;

  prototype.createElementMorph = function (element, namespace) {
    return new this.ElementMorphClass(element, this, namespace);
  };

  prototype.createUnsafeAttrMorph = function (element, attrName, namespace) {
    var morph = this.createAttrMorph(element, attrName, namespace);
    morph.escaped = false;
    return morph;
  };

  prototype.MorphClass = _htmlbarsRuntimeMorph.default;

  prototype.createMorph = function (parent, start, end, contextualElement) {
    if (contextualElement && contextualElement.nodeType === 11) {
      throw new Error("Cannot pass a fragment as the contextual element to createMorph");
    }

    if (!contextualElement && parent && parent.nodeType === 1) {
      contextualElement = parent;
    }
    var morph = new this.MorphClass(this, contextualElement);
    morph.firstNode = start;
    morph.lastNode = end;
    return morph;
  };

  prototype.createFragmentMorph = function (contextualElement) {
    if (contextualElement && contextualElement.nodeType === 11) {
      throw new Error("Cannot pass a fragment as the contextual element to createMorph");
    }

    var fragment = this.createDocumentFragment();
    return _htmlbarsRuntimeMorph.default.create(this, contextualElement, fragment);
  };

  prototype.replaceContentWithMorph = function (element) {
    var firstChild = element.firstChild;

    if (!firstChild) {
      var comment = this.createComment('');
      this.appendChild(element, comment);
      return _htmlbarsRuntimeMorph.default.create(this, element, comment);
    } else {
      var morph = _htmlbarsRuntimeMorph.default.attach(this, element, firstChild, element.lastChild);
      morph.clear();
      return morph;
    }
  };

  prototype.createUnsafeMorph = function (parent, start, end, contextualElement) {
    var morph = this.createMorph(parent, start, end, contextualElement);
    morph.parseTextAsHTML = true;
    return morph;
  };

  // This helper is just to keep the templates good looking,
  // passing integers instead of element references.
  prototype.createMorphAt = function (parent, startIndex, endIndex, contextualElement) {
    var single = startIndex === endIndex;
    var start = this.childAtIndex(parent, startIndex);
    var end = single ? start : this.childAtIndex(parent, endIndex);
    return this.createMorph(parent, start, end, contextualElement);
  };

  prototype.createUnsafeMorphAt = function (parent, startIndex, endIndex, contextualElement) {
    var morph = this.createMorphAt(parent, startIndex, endIndex, contextualElement);
    morph.parseTextAsHTML = true;
    return morph;
  };

  prototype.insertMorphBefore = function (element, referenceChild, contextualElement) {
    var insertion = this.document.createComment('');
    element.insertBefore(insertion, referenceChild);
    return this.createMorph(element, insertion, insertion, contextualElement);
  };

  prototype.appendMorph = function (element, contextualElement) {
    var insertion = this.document.createComment('');
    element.appendChild(insertion);
    return this.createMorph(element, insertion, insertion, contextualElement);
  };

  prototype.insertBoundary = function (fragment, index) {
    // this will always be null or firstChild
    var child = index === null ? null : this.childAtIndex(fragment, index);
    this.insertBefore(fragment, this.createTextNode(''), child);
  };

  prototype.setMorphHTML = function (morph, html) {
    morph.setHTML(html);
  };

  prototype.parseHTML = function (html, contextualElement) {
    var childNodes;

    if (interiorNamespace(contextualElement) === _domHelperBuildHtmlDom.svgNamespace) {
      childNodes = buildSVGDOM(html, this);
    } else {
      var nodes = _domHelperBuildHtmlDom.buildHTMLDOM(html, contextualElement, this);
      if (detectOmittedStartTag(html, contextualElement)) {
        var node = nodes[0];
        while (node && node.nodeType !== 1) {
          node = node.nextSibling;
        }
        childNodes = node.childNodes;
      } else {
        childNodes = nodes;
      }
    }

    // Copy node list to a fragment.
    var fragment = this.document.createDocumentFragment();

    if (childNodes && childNodes.length > 0) {
      var currentNode = childNodes[0];

      // We prepend an <option> to <select> boxes to absorb any browser bugs
      // related to auto-select behavior. Skip past it.
      if (contextualElement.tagName === 'SELECT') {
        currentNode = currentNode.nextSibling;
      }

      while (currentNode) {
        var tempNode = currentNode;
        currentNode = currentNode.nextSibling;

        fragment.appendChild(tempNode);
      }
    }

    return fragment;
  };

  var nodeURL;
  var parsingNode;

  function installEnvironmentSpecificMethods(domHelper) {
    var protocol = browserProtocolForURL.call(domHelper, 'foobar:baz');

    // Test to see if our DOM implementation parses
    // and normalizes URLs.
    if (protocol === 'foobar:') {
      // Swap in the method that doesn't do this test now that
      // we know it works.
      domHelper.protocolForURL = browserProtocolForURL;
    } else if (typeof URL === 'object') {
      // URL globally provided, likely from FastBoot's sandbox
      nodeURL = URL;
      domHelper.protocolForURL = nodeProtocolForURL;
    } else if (typeof module === 'object' && typeof module.require === 'function') {
      // Otherwise, we need to fall back to our own URL parsing.
      // Global `require` is shadowed by Ember's loader so we have to use the fully
      // qualified `module.require`.
      nodeURL = module.require('url');
      domHelper.protocolForURL = nodeProtocolForURL;
    } else {
      throw new Error("DOM Helper could not find valid URL parsing mechanism");
    }

    // A SimpleDOM-specific extension that allows us to place HTML directly
    // into the DOM tree, for when the output target is always serialized HTML.
    if (domHelper.document.createRawHTMLSection) {
      domHelper.setMorphHTML = nodeSetMorphHTML;
    }
  }

  function nodeSetMorphHTML(morph, html) {
    var section = this.document.createRawHTMLSection(html);
    morph.setNode(section);
  }

  function browserProtocolForURL(url) {
    if (!parsingNode) {
      parsingNode = this.document.createElement('a');
    }

    parsingNode.href = url;
    return parsingNode.protocol;
  }

  function nodeProtocolForURL(url) {
    var protocol = null;
    if (typeof url === 'string') {
      protocol = nodeURL.parse(url).protocol;
    }
    return protocol === null ? ':' : protocol;
  }

  exports.default = DOMHelper;
});
/*globals module, URL*/
//# sourceMappingURL=data:application/json;base64,
define('dom-helper.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('dom-helper.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXIuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNCLE9BQUssQ0FBQyxJQUFJLENBQUMsa0NBQWtDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDOUQsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztHQUN0RCxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIC4nKTtcblFVbml0LnRlc3QoJ2RvbS1oZWxwZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2RvbS1oZWxwZXIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('dom-helper/build-html-dom', ['exports'], function (exports) {
  /* global XMLSerializer:false */
  var svgHTMLIntegrationPoints = { foreignObject: 1, desc: 1, title: 1 };
  exports.svgHTMLIntegrationPoints = svgHTMLIntegrationPoints;
  var svgNamespace = 'http://www.w3.org/2000/svg';

  exports.svgNamespace = svgNamespace;
  var doc = typeof document === 'undefined' ? false : document;

  // Safari does not like using innerHTML on SVG HTML integration
  // points (desc/title/foreignObject).
  var needsIntegrationPointFix = doc && (function (document) {
    if (document.createElementNS === undefined) {
      return;
    }
    // In FF title will not accept innerHTML.
    var testEl = document.createElementNS(svgNamespace, 'title');
    testEl.innerHTML = "<div></div>";
    return testEl.childNodes.length === 0 || testEl.childNodes[0].nodeType !== 1;
  })(doc);

  // Internet Explorer prior to 9 does not allow setting innerHTML if the first element
  // is a "zero-scope" element. This problem can be worked around by making
  // the first node an invisible text node. We, like Modernizr, use &shy;
  var needsShy = doc && (function (document) {
    var testEl = document.createElement('div');
    testEl.innerHTML = "<div></div>";
    testEl.firstChild.innerHTML = "<script><\/script>";
    return testEl.firstChild.innerHTML === '';
  })(doc);

  // IE 8 (and likely earlier) likes to move whitespace preceeding
  // a script tag to appear after it. This means that we can
  // accidentally remove whitespace when updating a morph.
  var movesWhitespace = doc && (function (document) {
    var testEl = document.createElement('div');
    testEl.innerHTML = "Test: <script type='text/x-placeholder'><\/script>Value";
    return testEl.childNodes[0].nodeValue === 'Test:' && testEl.childNodes[2].nodeValue === ' Value';
  })(doc);

  var tagNamesRequiringInnerHTMLFix = doc && (function (document) {
    var tagNamesRequiringInnerHTMLFix;
    // IE 9 and earlier don't allow us to set innerHTML on col, colgroup, frameset,
    // html, style, table, tbody, tfoot, thead, title, tr. Detect this and add
    // them to an initial list of corrected tags.
    //
    // Here we are only dealing with the ones which can have child nodes.
    //
    var tableNeedsInnerHTMLFix;
    var tableInnerHTMLTestElement = document.createElement('table');
    try {
      tableInnerHTMLTestElement.innerHTML = '<tbody></tbody>';
    } catch (e) {} finally {
      tableNeedsInnerHTMLFix = tableInnerHTMLTestElement.childNodes.length === 0;
    }
    if (tableNeedsInnerHTMLFix) {
      tagNamesRequiringInnerHTMLFix = {
        colgroup: ['table'],
        table: [],
        tbody: ['table'],
        tfoot: ['table'],
        thead: ['table'],
        tr: ['table', 'tbody']
      };
    }

    // IE 8 doesn't allow setting innerHTML on a select tag. Detect this and
    // add it to the list of corrected tags.
    //
    var selectInnerHTMLTestElement = document.createElement('select');
    selectInnerHTMLTestElement.innerHTML = '<option></option>';
    if (!selectInnerHTMLTestElement.childNodes[0]) {
      tagNamesRequiringInnerHTMLFix = tagNamesRequiringInnerHTMLFix || {};
      tagNamesRequiringInnerHTMLFix.select = [];
    }
    return tagNamesRequiringInnerHTMLFix;
  })(doc);

  function scriptSafeInnerHTML(element, html) {
    // without a leading text node, IE will drop a leading script tag.
    html = '&shy;' + html;

    element.innerHTML = html;

    var nodes = element.childNodes;

    // Look for &shy; to remove it.
    var shyElement = nodes[0];
    while (shyElement.nodeType === 1 && !shyElement.nodeName) {
      shyElement = shyElement.firstChild;
    }
    // At this point it's the actual unicode character.
    if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === "\u00AD") {
      var newValue = shyElement.nodeValue.slice(1);
      if (newValue.length) {
        shyElement.nodeValue = shyElement.nodeValue.slice(1);
      } else {
        shyElement.parentNode.removeChild(shyElement);
      }
    }

    return nodes;
  }

  function buildDOMWithFix(html, contextualElement) {
    var tagName = contextualElement.tagName;

    // Firefox versions < 11 do not have support for element.outerHTML.
    var outerHTML = contextualElement.outerHTML || new XMLSerializer().serializeToString(contextualElement);
    if (!outerHTML) {
      throw "Can't set innerHTML on " + tagName + " in this browser";
    }

    html = fixSelect(html, contextualElement);

    var wrappingTags = tagNamesRequiringInnerHTMLFix[tagName.toLowerCase()];

    var startTag = outerHTML.match(new RegExp("<" + tagName + "([^>]*)>", 'i'))[0];
    var endTag = '</' + tagName + '>';

    var wrappedHTML = [startTag, html, endTag];

    var i = wrappingTags.length;
    var wrappedDepth = 1 + i;
    while (i--) {
      wrappedHTML.unshift('<' + wrappingTags[i] + '>');
      wrappedHTML.push('</' + wrappingTags[i] + '>');
    }

    var wrapper = document.createElement('div');
    scriptSafeInnerHTML(wrapper, wrappedHTML.join(''));
    var element = wrapper;
    while (wrappedDepth--) {
      element = element.firstChild;
      while (element && element.nodeType !== 1) {
        element = element.nextSibling;
      }
    }
    while (element && element.tagName !== tagName) {
      element = element.nextSibling;
    }
    return element ? element.childNodes : [];
  }

  var buildDOM;
  if (needsShy) {
    buildDOM = function buildDOM(html, contextualElement, dom) {
      html = fixSelect(html, contextualElement);

      contextualElement = dom.cloneNode(contextualElement, false);
      scriptSafeInnerHTML(contextualElement, html);
      return contextualElement.childNodes;
    };
  } else {
    buildDOM = function buildDOM(html, contextualElement, dom) {
      html = fixSelect(html, contextualElement);

      contextualElement = dom.cloneNode(contextualElement, false);
      contextualElement.innerHTML = html;
      return contextualElement.childNodes;
    };
  }

  function fixSelect(html, contextualElement) {
    if (contextualElement.tagName === 'SELECT') {
      html = "<option></option>" + html;
    }

    return html;
  }

  var buildIESafeDOM;
  if (tagNamesRequiringInnerHTMLFix || movesWhitespace) {
    buildIESafeDOM = function buildIESafeDOM(html, contextualElement, dom) {
      // Make a list of the leading text on script nodes. Include
      // script tags without any whitespace for easier processing later.
      var spacesBefore = [];
      var spacesAfter = [];
      if (typeof html === 'string') {
        html = html.replace(/(\s*)(<script)/g, function (match, spaces, tag) {
          spacesBefore.push(spaces);
          return tag;
        });

        html = html.replace(/(<\/script>)(\s*)/g, function (match, tag, spaces) {
          spacesAfter.push(spaces);
          return tag;
        });
      }

      // Fetch nodes
      var nodes;
      if (tagNamesRequiringInnerHTMLFix[contextualElement.tagName.toLowerCase()]) {
        // buildDOMWithFix uses string wrappers for problematic innerHTML.
        nodes = buildDOMWithFix(html, contextualElement);
      } else {
        nodes = buildDOM(html, contextualElement, dom);
      }

      // Build a list of script tags, the nodes themselves will be
      // mutated as we add test nodes.
      var i, j, node, nodeScriptNodes;
      var scriptNodes = [];
      for (i = 0; i < nodes.length; i++) {
        node = nodes[i];
        if (node.nodeType !== 1) {
          continue;
        }
        if (node.tagName === 'SCRIPT') {
          scriptNodes.push(node);
        } else {
          nodeScriptNodes = node.getElementsByTagName('script');
          for (j = 0; j < nodeScriptNodes.length; j++) {
            scriptNodes.push(nodeScriptNodes[j]);
          }
        }
      }

      // Walk the script tags and put back their leading text nodes.
      var scriptNode, textNode, spaceBefore, spaceAfter;
      for (i = 0; i < scriptNodes.length; i++) {
        scriptNode = scriptNodes[i];
        spaceBefore = spacesBefore[i];
        if (spaceBefore && spaceBefore.length > 0) {
          textNode = dom.document.createTextNode(spaceBefore);
          scriptNode.parentNode.insertBefore(textNode, scriptNode);
        }

        spaceAfter = spacesAfter[i];
        if (spaceAfter && spaceAfter.length > 0) {
          textNode = dom.document.createTextNode(spaceAfter);
          scriptNode.parentNode.insertBefore(textNode, scriptNode.nextSibling);
        }
      }

      return nodes;
    };
  } else {
    buildIESafeDOM = buildDOM;
  }

  var buildHTMLDOM;
  if (needsIntegrationPointFix) {
    exports.buildHTMLDOM = buildHTMLDOM = function buildHTMLDOM(html, contextualElement, dom) {
      if (svgHTMLIntegrationPoints[contextualElement.tagName]) {
        return buildIESafeDOM(html, document.createElement('div'), dom);
      } else {
        return buildIESafeDOM(html, contextualElement, dom);
      }
    };
  } else {
    exports.buildHTMLDOM = buildHTMLDOM = buildIESafeDOM;
  }

  exports.buildHTMLDOM = buildHTMLDOM;
});
//# sourceMappingURL=data:application/json;base64,
define('dom-helper/build-html-dom.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper');
  QUnit.test('dom-helper/build-html-dom.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper/build-html-dom.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXIvYnVpbGQtaHRtbC1kb20uanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDcEMsT0FBSyxDQUFDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUM3RSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxrREFBa0QsQ0FBQyxDQUFDO0dBQ3JFLENBQUMsQ0FBQyIsImZpbGUiOiJkb20taGVscGVyL2J1aWxkLWh0bWwtZG9tLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gZG9tLWhlbHBlcicpO1xuUVVuaXQudGVzdCgnZG9tLWhlbHBlci9idWlsZC1odG1sLWRvbS5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci9idWlsZC1odG1sLWRvbS5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('dom-helper/classes', ['exports'], function (exports) {
  var doc = typeof document === 'undefined' ? false : document;

  // PhantomJS has a broken classList. See https://github.com/ariya/phantomjs/issues/12782
  var canClassList = doc && (function () {
    var d = document.createElement('div');
    if (!d.classList) {
      return false;
    }
    d.classList.add('boo');
    d.classList.add('boo', 'baz');
    return d.className === 'boo baz';
  })();

  function buildClassList(element) {
    var classString = element.getAttribute('class') || '';
    return classString !== '' && classString !== ' ' ? classString.split(' ') : [];
  }

  function intersect(containingArray, valuesArray) {
    var containingIndex = 0;
    var containingLength = containingArray.length;
    var valuesIndex = 0;
    var valuesLength = valuesArray.length;

    var intersection = new Array(valuesLength);

    // TODO: rewrite this loop in an optimal manner
    for (; containingIndex < containingLength; containingIndex++) {
      valuesIndex = 0;
      for (; valuesIndex < valuesLength; valuesIndex++) {
        if (valuesArray[valuesIndex] === containingArray[containingIndex]) {
          intersection[valuesIndex] = containingIndex;
          break;
        }
      }
    }

    return intersection;
  }

  function addClassesViaAttribute(element, classNames) {
    var existingClasses = buildClassList(element);

    var indexes = intersect(existingClasses, classNames);
    var didChange = false;

    for (var i = 0, l = classNames.length; i < l; i++) {
      if (indexes[i] === undefined) {
        didChange = true;
        existingClasses.push(classNames[i]);
      }
    }

    if (didChange) {
      element.setAttribute('class', existingClasses.length > 0 ? existingClasses.join(' ') : '');
    }
  }

  function removeClassesViaAttribute(element, classNames) {
    var existingClasses = buildClassList(element);

    var indexes = intersect(classNames, existingClasses);
    var didChange = false;
    var newClasses = [];

    for (var i = 0, l = existingClasses.length; i < l; i++) {
      if (indexes[i] === undefined) {
        newClasses.push(existingClasses[i]);
      } else {
        didChange = true;
      }
    }

    if (didChange) {
      element.setAttribute('class', newClasses.length > 0 ? newClasses.join(' ') : '');
    }
  }

  var addClasses, removeClasses;
  if (canClassList) {
    exports.addClasses = addClasses = function addClasses(element, classNames) {
      if (element.classList) {
        if (classNames.length === 1) {
          element.classList.add(classNames[0]);
        } else if (classNames.length === 2) {
          element.classList.add(classNames[0], classNames[1]);
        } else {
          element.classList.add.apply(element.classList, classNames);
        }
      } else {
        addClassesViaAttribute(element, classNames);
      }
    };
    exports.removeClasses = removeClasses = function removeClasses(element, classNames) {
      if (element.classList) {
        if (classNames.length === 1) {
          element.classList.remove(classNames[0]);
        } else if (classNames.length === 2) {
          element.classList.remove(classNames[0], classNames[1]);
        } else {
          element.classList.remove.apply(element.classList, classNames);
        }
      } else {
        removeClassesViaAttribute(element, classNames);
      }
    };
  } else {
    exports.addClasses = addClasses = addClassesViaAttribute;
    exports.removeClasses = removeClasses = removeClassesViaAttribute;
  }

  exports.addClasses = addClasses;
  exports.removeClasses = removeClasses;
});
//# sourceMappingURL=data:application/json;base64,
define('dom-helper/classes.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper');
  QUnit.test('dom-helper/classes.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper/classes.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXIvY2xhc3Nlcy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNwQyxPQUFLLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3RFLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDJDQUEyQyxDQUFDLENBQUM7R0FDOUQsQ0FBQyxDQUFDIiwiZmlsZSI6ImRvbS1oZWxwZXIvY2xhc3Nlcy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGRvbS1oZWxwZXInKTtcblFVbml0LnRlc3QoJ2RvbS1oZWxwZXIvY2xhc3Nlcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci9jbGFzc2VzLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('dom-helper/prop', ['exports'], function (exports) {
  exports.isAttrRemovalValue = isAttrRemovalValue;
  exports.normalizeProperty = normalizeProperty;

  function isAttrRemovalValue(value) {
    return value === null || value === undefined;
  }

  /*
   *
   * @method normalizeProperty
   * @param element {HTMLElement}
   * @param slotName {String}
   * @returns {Object} { name, type }
   */

  function normalizeProperty(element, slotName) {
    var type, normalized;

    if (slotName in element) {
      normalized = slotName;
      type = 'prop';
    } else {
      var lower = slotName.toLowerCase();
      if (lower in element) {
        type = 'prop';
        normalized = lower;
      } else {
        type = 'attr';
        normalized = slotName;
      }
    }

    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
      type = 'attr';
    }

    return { normalized: normalized, type: type };
  }

  // properties that MUST be set as attributes, due to:
  // * browser bug
  // * strange spec outlier
  var ATTR_OVERRIDES = {

    // phantomjs < 2.0 lets you set it as a prop but won't reflect it
    // back to the attribute. button.getAttribute('type') === null
    BUTTON: { type: true, form: true },

    INPUT: {
      // TODO: remove when IE8 is droped
      // Some versions of IE (IE8) throw an exception when setting
      // `input.list = 'somestring'`:
      // https://github.com/emberjs/ember.js/issues/10908
      // https://github.com/emberjs/ember.js/issues/11364
      list: true,
      // Some version of IE (like IE9) actually throw an exception
      // if you set input.type = 'something-unknown'
      type: true,
      form: true,
      // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
      // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
      // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
      autocorrect: true
    },

    // element.form is actually a legitimate readOnly property, that is to be
    // mutated, but must be mutated by setAttribute...
    SELECT: { form: true },
    OPTION: { form: true },
    TEXTAREA: { form: true },
    LABEL: { form: true },
    FIELDSET: { form: true },
    LEGEND: { form: true },
    OBJECT: { form: true }
  };

  function preferAttr(tagName, propName) {
    var tag = ATTR_OVERRIDES[tagName.toUpperCase()];
    return tag && tag[propName.toLowerCase()] || false;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXIvcHJvcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQU8sV0FBUyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7QUFDeEMsV0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUM7R0FDOUM7Ozs7Ozs7Ozs7QUFRTSxXQUFTLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDbkQsUUFBSSxJQUFJLEVBQUUsVUFBVSxDQUFDOztBQUVyQixRQUFJLFFBQVEsSUFBSSxPQUFPLEVBQUU7QUFDdkIsZ0JBQVUsR0FBRyxRQUFRLENBQUM7QUFDdEIsVUFBSSxHQUFHLE1BQU0sQ0FBQztLQUNmLE1BQU07QUFDTCxVQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbkMsVUFBSSxLQUFLLElBQUksT0FBTyxFQUFFO0FBQ3BCLFlBQUksR0FBRyxNQUFNLENBQUM7QUFDZCxrQkFBVSxHQUFHLEtBQUssQ0FBQztPQUNwQixNQUFNO0FBQ0wsWUFBSSxHQUFHLE1BQU0sQ0FBQztBQUNkLGtCQUFVLEdBQUcsUUFBUSxDQUFDO09BQ3ZCO0tBQ0Y7O0FBRUQsUUFBSSxJQUFJLEtBQUssTUFBTSxLQUNkLFVBQVUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLElBQ3BDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBLEFBQUMsRUFBRTtBQUM3QyxVQUFJLEdBQUcsTUFBTSxDQUFDO0tBQ2Y7O0FBRUQsV0FBTyxFQUFFLFVBQVUsRUFBVixVQUFVLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxDQUFDO0dBQzdCOzs7OztBQUtELE1BQUksY0FBYyxHQUFHOzs7O0FBSW5CLFVBQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTs7QUFFbEMsU0FBSyxFQUFFOzs7Ozs7QUFNTCxVQUFJLEVBQUUsSUFBSTs7O0FBR1YsVUFBSSxFQUFFLElBQUk7QUFDVixVQUFJLEVBQUUsSUFBSTs7OztBQUlWLGlCQUFXLEVBQUUsSUFBSTtLQUNsQjs7OztBQUlELFVBQU0sRUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDeEIsVUFBTSxFQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUN4QixZQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3hCLFNBQUssRUFBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDeEIsWUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUN4QixVQUFNLEVBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3hCLFVBQU0sRUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7R0FDekIsQ0FBQzs7QUFFRixXQUFTLFVBQVUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQ3JDLFFBQUksR0FBRyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNoRCxXQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDO0dBQ3BEIiwiZmlsZSI6ImRvbS1oZWxwZXIvcHJvcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0F0dHJSZW1vdmFsVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG4vKlxuICpcbiAqIEBtZXRob2Qgbm9ybWFsaXplUHJvcGVydHlcbiAqIEBwYXJhbSBlbGVtZW50IHtIVE1MRWxlbWVudH1cbiAqIEBwYXJhbSBzbG90TmFtZSB7U3RyaW5nfVxuICogQHJldHVybnMge09iamVjdH0geyBuYW1lLCB0eXBlIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnR5KGVsZW1lbnQsIHNsb3ROYW1lKSB7XG4gIHZhciB0eXBlLCBub3JtYWxpemVkO1xuXG4gIGlmIChzbG90TmFtZSBpbiBlbGVtZW50KSB7XG4gICAgbm9ybWFsaXplZCA9IHNsb3ROYW1lO1xuICAgIHR5cGUgPSAncHJvcCc7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd2VyID0gc2xvdE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXIgaW4gZWxlbWVudCkge1xuICAgICAgdHlwZSA9ICdwcm9wJztcbiAgICAgIG5vcm1hbGl6ZWQgPSBsb3dlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9ICdhdHRyJztcbiAgICAgIG5vcm1hbGl6ZWQgPSBzbG90TmFtZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ3Byb3AnICYmXG4gICAgICAobm9ybWFsaXplZC50b0xvd2VyQ2FzZSgpID09PSAnc3R5bGUnIHx8XG4gICAgICAgcHJlZmVyQXR0cihlbGVtZW50LnRhZ05hbWUsIG5vcm1hbGl6ZWQpKSkge1xuICAgIHR5cGUgPSAnYXR0cic7XG4gIH1cblxuICByZXR1cm4geyBub3JtYWxpemVkLCB0eXBlIH07XG59XG5cbi8vIHByb3BlcnRpZXMgdGhhdCBNVVNUIGJlIHNldCBhcyBhdHRyaWJ1dGVzLCBkdWUgdG86XG4vLyAqIGJyb3dzZXIgYnVnXG4vLyAqIHN0cmFuZ2Ugc3BlYyBvdXRsaWVyXG52YXIgQVRUUl9PVkVSUklERVMgPSB7XG5cbiAgLy8gcGhhbnRvbWpzIDwgMi4wIGxldHMgeW91IHNldCBpdCBhcyBhIHByb3AgYnV0IHdvbid0IHJlZmxlY3QgaXRcbiAgLy8gYmFjayB0byB0aGUgYXR0cmlidXRlLiBidXR0b24uZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09IG51bGxcbiAgQlVUVE9OOiB7IHR5cGU6IHRydWUsIGZvcm06IHRydWUgfSxcblxuICBJTlBVVDoge1xuICAgIC8vIFRPRE86IHJlbW92ZSB3aGVuIElFOCBpcyBkcm9wZWRcbiAgICAvLyBTb21lIHZlcnNpb25zIG9mIElFIChJRTgpIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIHNldHRpbmdcbiAgICAvLyBgaW5wdXQubGlzdCA9ICdzb21lc3RyaW5nJ2A6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VtYmVyanMvZW1iZXIuanMvaXNzdWVzLzEwOTA4XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VtYmVyanMvZW1iZXIuanMvaXNzdWVzLzExMzY0XG4gICAgbGlzdDogdHJ1ZSxcbiAgICAvLyBTb21lIHZlcnNpb24gb2YgSUUgKGxpa2UgSUU5KSBhY3R1YWxseSB0aHJvdyBhbiBleGNlcHRpb25cbiAgICAvLyBpZiB5b3Ugc2V0IGlucHV0LnR5cGUgPSAnc29tZXRoaW5nLXVua25vd24nXG4gICAgdHlwZTogdHJ1ZSxcbiAgICBmb3JtOiB0cnVlLFxuICAgIC8vIENocm9tZSA0Ni4wLjI0NjQuMDogJ2F1dG9jb3JyZWN0JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpID09PSBmYWxzZVxuICAgIC8vIFNhZmFyaSA4LjAuNzogJ2F1dG9jb3JyZWN0JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpID09PSBmYWxzZVxuICAgIC8vIE1vYmlsZSBTYWZhcmkgKGlPUyA4LjQgc2ltdWxhdG9yKTogJ2F1dG9jb3JyZWN0JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpID09PSB0cnVlXG4gICAgYXV0b2NvcnJlY3Q6IHRydWVcbiAgfSxcblxuICAvLyBlbGVtZW50LmZvcm0gaXMgYWN0dWFsbHkgYSBsZWdpdGltYXRlIHJlYWRPbmx5IHByb3BlcnR5LCB0aGF0IGlzIHRvIGJlXG4gIC8vIG11dGF0ZWQsIGJ1dCBtdXN0IGJlIG11dGF0ZWQgYnkgc2V0QXR0cmlidXRlLi4uXG4gIFNFTEVDVDogICB7IGZvcm06IHRydWUgfSxcbiAgT1BUSU9OOiAgIHsgZm9ybTogdHJ1ZSB9LFxuICBURVhUQVJFQTogeyBmb3JtOiB0cnVlIH0sXG4gIExBQkVMOiAgICB7IGZvcm06IHRydWUgfSxcbiAgRklFTERTRVQ6IHsgZm9ybTogdHJ1ZSB9LFxuICBMRUdFTkQ6ICAgeyBmb3JtOiB0cnVlIH0sXG4gIE9CSkVDVDogICB7IGZvcm06IHRydWUgfVxufTtcblxuZnVuY3Rpb24gcHJlZmVyQXR0cih0YWdOYW1lLCBwcm9wTmFtZSkge1xuICB2YXIgdGFnID0gQVRUUl9PVkVSUklERVNbdGFnTmFtZS50b1VwcGVyQ2FzZSgpXTtcbiAgcmV0dXJuIHRhZyAmJiB0YWdbcHJvcE5hbWUudG9Mb3dlckNhc2UoKV0gfHwgZmFsc2U7XG59XG4iXX0=
define('dom-helper/prop.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper');
  QUnit.test('dom-helper/prop.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper/prop.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXIvcHJvcC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNwQyxPQUFLLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ25FLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLHdDQUF3QyxDQUFDLENBQUM7R0FDM0QsQ0FBQyxDQUFDIiwiZmlsZSI6ImRvbS1oZWxwZXIvcHJvcC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGRvbS1oZWxwZXInKTtcblFVbml0LnRlc3QoJ2RvbS1oZWxwZXIvcHJvcC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci9wcm9wLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-compiler-tests/compile-tests', ['exports', '../htmlbars-compiler/compiler'], function (exports, _htmlbarsCompilerCompiler) {

  QUnit.module('compile: buildMeta');

  test('is merged into meta in template', function () {
    var template = _htmlbarsCompilerCompiler.compile('Hi, {{name}}!', {
      buildMeta: function () {
        return { blah: 'zorz' };
      }
    });

    equal(template.meta.blah, 'zorz', 'return value from buildMeta was pass through');
  });

  test('the program is passed to the callback function', function () {
    var template = _htmlbarsCompilerCompiler.compile('Hi, {{name}}!', {
      buildMeta: function (program) {
        return { loc: program.loc };
      }
    });

    equal(template.meta.loc.start.line, 1, 'the loc was passed through from program');
  });

  test('value keys are properly stringified', function () {
    var template = _htmlbarsCompilerCompiler.compile('Hi, {{name}}!', {
      buildMeta: function () {
        return { 'loc-derp.lol': 'zorz' };
      }
    });

    equal(template.meta['loc-derp.lol'], 'zorz', 'return value from buildMeta was pass through');
  });

  test('returning undefined does not throw errors', function () {
    var template = _htmlbarsCompilerCompiler.compile('Hi, {{name}}!', {
      buildMeta: function () {
        return;
      }
    });

    ok(template.meta, 'meta is present in template, even if empty');
  });

  test('options are not required for `compile`', function () {
    var template = _htmlbarsCompilerCompiler.compile('Hi, {{name}}!');

    ok(template.meta, 'meta is present in template, even if empty');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2NvbXBpbGUtdGVzdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxPQUFLLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7O0FBRW5DLE1BQUksQ0FBQyxpQ0FBaUMsRUFBRSxZQUFXO0FBQ2pELFFBQUksUUFBUSxHQUFHLDBCQUxSLE9BQU8sQ0FLUyxlQUFlLEVBQUU7QUFDdEMsZUFBUyxFQUFFLFlBQVc7QUFDcEIsZUFBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztPQUN6QjtLQUNGLENBQUMsQ0FBQzs7QUFFSCxTQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLDhDQUE4QyxDQUFDLENBQUM7R0FDbkYsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxnREFBZ0QsRUFBRSxZQUFXO0FBQ2hFLFFBQUksUUFBUSxHQUFHLDBCQWZSLE9BQU8sQ0FlUyxlQUFlLEVBQUU7QUFDdEMsZUFBUyxFQUFFLFVBQVMsT0FBTyxFQUFFO0FBQzNCLGVBQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO09BQzdCO0tBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDO0dBQ25GLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBVztBQUNyRCxRQUFJLFFBQVEsR0FBRywwQkF6QlIsT0FBTyxDQXlCUyxlQUFlLEVBQUU7QUFDdEMsZUFBUyxFQUFFLFlBQVc7QUFDcEIsZUFBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsQ0FBQztPQUNuQztLQUNGLENBQUMsQ0FBQzs7QUFFSCxTQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsOENBQThDLENBQUMsQ0FBQztHQUM5RixDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLDJDQUEyQyxFQUFFLFlBQVk7QUFDNUQsUUFBSSxRQUFRLEdBQUcsMEJBbkNSLE9BQU8sQ0FtQ1MsZUFBZSxFQUFFO0FBQ3RDLGVBQVMsRUFBRSxZQUFXO0FBQ3BCLGVBQU87T0FDUjtLQUNGLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSw0Q0FBNEMsQ0FBQyxDQUFDO0dBQ2pFLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsd0NBQXdDLEVBQUUsWUFBWTtBQUN6RCxRQUFJLFFBQVEsR0FBRywwQkE3Q1IsT0FBTyxDQTZDUyxlQUFlLENBQUMsQ0FBQzs7QUFFeEMsTUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsNENBQTRDLENBQUMsQ0FBQztHQUNqRSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvY29tcGlsZS10ZXN0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBpbGUgfSBmcm9tIFwiLi4vaHRtbGJhcnMtY29tcGlsZXIvY29tcGlsZXJcIjtcblxuUVVuaXQubW9kdWxlKCdjb21waWxlOiBidWlsZE1ldGEnKTtcblxudGVzdCgnaXMgbWVyZ2VkIGludG8gbWV0YSBpbiB0ZW1wbGF0ZScsIGZ1bmN0aW9uKCkge1xuICB2YXIgdGVtcGxhdGUgPSBjb21waWxlKCdIaSwge3tuYW1lfX0hJywge1xuICAgIGJ1aWxkTWV0YTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geyBibGFoOiAnem9yeicgfTtcbiAgICB9XG4gIH0pO1xuXG4gIGVxdWFsKHRlbXBsYXRlLm1ldGEuYmxhaCwgJ3pvcnonLCAncmV0dXJuIHZhbHVlIGZyb20gYnVpbGRNZXRhIHdhcyBwYXNzIHRocm91Z2gnKTtcbn0pO1xuXG50ZXN0KCd0aGUgcHJvZ3JhbSBpcyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uJywgZnVuY3Rpb24oKSB7XG4gIHZhciB0ZW1wbGF0ZSA9IGNvbXBpbGUoJ0hpLCB7e25hbWV9fSEnLCB7XG4gICAgYnVpbGRNZXRhOiBmdW5jdGlvbihwcm9ncmFtKSB7XG4gICAgICByZXR1cm4geyBsb2M6IHByb2dyYW0ubG9jIH07XG4gICAgfVxuICB9KTtcblxuICBlcXVhbCh0ZW1wbGF0ZS5tZXRhLmxvYy5zdGFydC5saW5lLCAxLCAndGhlIGxvYyB3YXMgcGFzc2VkIHRocm91Z2ggZnJvbSBwcm9ncmFtJyk7XG59KTtcblxudGVzdCgndmFsdWUga2V5cyBhcmUgcHJvcGVybHkgc3RyaW5naWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHRlbXBsYXRlID0gY29tcGlsZSgnSGksIHt7bmFtZX19IScsIHtcbiAgICBidWlsZE1ldGE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHsgJ2xvYy1kZXJwLmxvbCc6ICd6b3J6JyB9O1xuICAgIH1cbiAgfSk7XG5cbiAgZXF1YWwodGVtcGxhdGUubWV0YVsnbG9jLWRlcnAubG9sJ10sICd6b3J6JywgJ3JldHVybiB2YWx1ZSBmcm9tIGJ1aWxkTWV0YSB3YXMgcGFzcyB0aHJvdWdoJyk7XG59KTtcblxudGVzdCgncmV0dXJuaW5nIHVuZGVmaW5lZCBkb2VzIG5vdCB0aHJvdyBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZW1wbGF0ZSA9IGNvbXBpbGUoJ0hpLCB7e25hbWV9fSEnLCB7XG4gICAgYnVpbGRNZXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0pO1xuXG4gIG9rKHRlbXBsYXRlLm1ldGEsICdtZXRhIGlzIHByZXNlbnQgaW4gdGVtcGxhdGUsIGV2ZW4gaWYgZW1wdHknKTtcbn0pO1xuXG50ZXN0KCdvcHRpb25zIGFyZSBub3QgcmVxdWlyZWQgZm9yIGBjb21waWxlYCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlbXBsYXRlID0gY29tcGlsZSgnSGksIHt7bmFtZX19IScpO1xuXG4gIG9rKHRlbXBsYXRlLm1ldGEsICdtZXRhIGlzIHByZXNlbnQgaW4gdGVtcGxhdGUsIGV2ZW4gaWYgZW1wdHknKTtcbn0pO1xuIl19
define('htmlbars-compiler-tests/compile-tests.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/compile-tests.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/compile-tests.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2NvbXBpbGUtdGVzdHMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDakQsT0FBSyxDQUFDLElBQUksQ0FBQyw2REFBNkQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4REFBOEQsQ0FBQyxDQUFDO0dBQ2pGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9jb21waWxlLXRlc3RzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2NvbXBpbGUtdGVzdHMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2NvbXBpbGUtdGVzdHMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-compiler-tests/diffing-test", ["exports", "../htmlbars-compiler/compiler", "../htmlbars-runtime/hooks", "../htmlbars-util/object-utils", "../dom-helper", "../htmlbars-test-helpers"], function (exports, _htmlbarsCompilerCompiler, _htmlbarsRuntimeHooks, _htmlbarsUtilObjectUtils, _domHelper, _htmlbarsTestHelpers) {

  var hooks, helpers, partials, env;

  function registerHelper(name, callback) {
    helpers[name] = callback;
  }

  function commonSetup() {
    hooks = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default);
    hooks.keywords = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default.keywords);
    helpers = {};
    partials = {};

    env = {
      dom: new _domHelper.default(),
      hooks: hooks,
      helpers: helpers,
      partials: partials,
      useFragmentCache: true
    };

    registerHelper('each', function (params) {
      var list = params[0];

      for (var i = 0, l = list.length; i < l; i++) {
        var item = list[i];
        if (this.arity > 0) {
          this.yieldItem(item.key, [item]);
        }
      }
    });
  }

  QUnit.module("Diffing", {
    beforeEach: commonSetup
  });

  test("Morph order is preserved when rerendering with duplicate keys", function () {
    var template = _htmlbarsCompilerCompiler.compile("<ul>{{#each items as |item|}}<li>{{item.name}}</li>{{/each}}</ul>");

    var a1 = { key: "a", name: "A1" };
    var a2 = { key: "a", name: "A2" };
    var b1 = { key: "b", name: "B1" };
    var b2 = { key: "b", name: "B2" };

    var result = template.render({ items: [a1, a2, b1, b2] }, env);
    _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li>A1</li><li>A2</li><li>B1</li><li>B2</li></ul>");

    var morph = result.nodes[0].morphList.firstChildMorph;
    morph.getState().initialName = 'A1';
    morph.nextMorph.getState().initialName = 'A2';
    morph.nextMorph.nextMorph.getState().initialName = 'B1';
    morph.nextMorph.nextMorph.nextMorph.getState().initialName = 'B2';

    function getNames() {
      var names = [];
      var morph = result.nodes[0].morphList.firstChildMorph;

      while (morph) {
        names.push(morph.getState().initialName);
        morph = morph.nextMorph;
      }

      return names;
    }

    result.rerender(env, { items: [a1, b2, b1, a2] });

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li>A1</li><li>B2</li><li>B1</li><li>A2</li></ul>");
    deepEqual(getNames(), ['A1', 'B1', 'B2', 'A2']);

    result.rerender(env, { items: [b1, a2] });

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li>B1</li><li>A2</li></ul>");
    deepEqual(getNames(), ['B1', 'A1']);
  });

  test("duplicate keys are allowed when duplicate is last morph", function () {
    var template = _htmlbarsCompilerCompiler.compile("<ul>{{#each items as |item|}}<li>{{item.name}}</li>{{/each}}</ul>");

    var a1 = { key: "a", name: "A1" };
    var a2 = { key: "a", name: "A2" };

    var result = template.render({ items: [] }, env);

    result.rerender(env, { items: [a1] });
    _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li>A1</li></ul>");

    result.rerender(env, { items: [a1, a2] });
    _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li>A1</li><li>A2</li></ul>");
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-compiler-tests/diffing-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/diffing-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/diffing-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2RpZmZpbmctdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUNqRCxPQUFLLENBQUMsSUFBSSxDQUFDLDREQUE0RCxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3hGLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDZEQUE2RCxDQUFDLENBQUM7R0FDaEYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2RpZmZpbmctdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1jb21waWxlci10ZXN0cy9kaWZmaW5nLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2RpZmZpbmctdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-compiler-tests/dirtying-test", ["exports", "../htmlbars-compiler/compiler", "../htmlbars-runtime/render", "../htmlbars-runtime/hooks", "../htmlbars-util/template-utils", "../htmlbars-util/object-utils", "../dom-helper", "../htmlbars-test-helpers"], function (exports, _htmlbarsCompilerCompiler, _htmlbarsRuntimeRender, _htmlbarsRuntimeHooks, _htmlbarsUtilTemplateUtils, _htmlbarsUtilObjectUtils, _domHelper, _htmlbarsTestHelpers) {

  var hooks, helpers, partials, env;

  function registerHelper(name, callback) {
    helpers[name] = callback;
  }

  function commonSetup() {
    hooks = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default);
    hooks.keywords = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default.keywords);
    helpers = {};
    partials = {};

    env = {
      dom: new _domHelper.default(),
      hooks: hooks,
      helpers: helpers,
      partials: partials,
      useFragmentCache: true
    };

    registerHelper('if', function (params, hash, options) {
      if (!!params[0]) {
        return options.template.yield();
      } else if (options.inverse.yield) {
        return options.inverse.yield();
      }
    });

    registerHelper('each', function (params) {
      var list = params[0];

      for (var i = 0, l = list.length; i < l; i++) {
        var item = list[i];
        if (this.arity > 0) {
          this.yieldItem(item.key, [item]);
        } else {
          this.yieldItem(item.key, undefined, item);
        }
      }
    });
  }

  QUnit.module("HTML-based compiler (dirtying)", {
    beforeEach: commonSetup
  });

  test("a simple implementation of a dirtying rerender", function () {
    var object = { condition: true, value: 'hello world' };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#if condition}}<p>{{value}}</p>{{else}}<p>Nothing</p>{{/if}}</div>');
    var result = template.render(object, env);
    var valueNode = result.fragment.firstChild.firstChild.firstChild;

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>hello world</p></div>', "Initial render");

    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>hello world</p></div>', "After dirtying but not updating");
    strictEqual(result.fragment.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");

    // Even though the #if was stable, a dirty child node is updated
    object.value = 'goodbye world';
    result.rerender();
    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>goodbye world</p></div>', "After updating and dirtying");
    strictEqual(result.fragment.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");

    // Should not update since render node is not marked as dirty
    object.condition = false;
    result.revalidate();
    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>goodbye world</p></div>', "After flipping the condition but not dirtying");
    strictEqual(result.fragment.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");

    result.rerender();
    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>Nothing</p></div>', "And then dirtying");
    QUnit.notStrictEqual(result.fragment.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
  });

  test("a simple implementation of a dirtying rerender without inverse", function () {
    var object = { condition: true, value: 'hello world' };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#if condition}}<p>{{value}}</p>{{/if}}</div>');
    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>hello world</p></div>', "Initial render");

    // Should not update since render node is not marked as dirty
    object.condition = false;

    result.rerender();
    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><!----></div>', "If the condition is false, the morph becomes empty");

    object.condition = true;

    result.rerender();
    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p>hello world</p></div>', "If the condition is false, the morph becomes empty");
  });

  test("block helpers whose template has a morph at the edge", function () {
    registerHelper('id', function (params, hash, options) {
      return options.template.yield();
    });

    var template = _htmlbarsCompilerCompiler.compile("{{#id}}{{value}}{{/id}}");
    var object = { value: "hello world" };
    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, 'hello world');
    var firstNode = result.root.firstNode;
    equal(firstNode.nodeType, 3, "first node of the parent template");
    equal(firstNode.nodeValue, "", "its content should be empty");

    var secondNode = firstNode.nextSibling;
    equal(secondNode.nodeType, 3, "first node of the helper template should be a text node");
    equal(secondNode.nodeValue, "", "its content should be empty");

    var textContent = secondNode.nextSibling;
    equal(textContent.nodeType, 3, "second node of the helper should be a text node");
    equal(textContent.nodeValue, "hello world", "its content should be hello world");

    var fourthNode = textContent.nextSibling;
    equal(fourthNode.nodeType, 3, "last node of the helper should be a text node");
    equal(fourthNode.nodeValue, "", "its content should be empty");

    var lastNode = fourthNode.nextSibling;
    equal(lastNode.nodeType, 3, "last node of the parent template should be a text node");
    equal(lastNode.nodeValue, "", "its content should be empty");

    strictEqual(lastNode.nextSibling, null, "there should only be five nodes");
  });

  test("clean content doesn't get blown away", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div>{{value}}</div>");
    var object = { value: "hello" };
    var result = template.render(object, env);

    var textNode = result.fragment.firstChild.firstChild;
    equal(textNode.nodeValue, "hello");

    object.value = "goodbye";
    result.revalidate(); // without setting the node to dirty

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div>hello</div>');

    var textRenderNode = result.root.childNodes[0];

    textRenderNode.setContent = function () {
      ok(false, "Should not get called");
    };

    object.value = "hello";
    result.rerender();
  });

  test("helper calls follow the normal dirtying rules", function () {
    registerHelper('capitalize', function (params) {
      return params[0].toUpperCase();
    });

    var template = _htmlbarsCompilerCompiler.compile("<div>{{capitalize value}}</div>");
    var object = { value: "hello" };
    var result = template.render(object, env);

    var textNode = result.fragment.firstChild.firstChild;
    equal(textNode.nodeValue, "HELLO");

    object.value = "goodbye";
    result.revalidate(); // without setting the node to dirty

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div>HELLO</div>');

    var textRenderNode = result.root.childNodes[0];

    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div>GOODBYE</div>');

    textRenderNode.setContent = function () {
      ok(false, "Should not get called");
    };

    // Checks normalized value, not raw value
    object.value = "GoOdByE";
    result.rerender();
  });

  test("attribute nodes follow the normal dirtying rules", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div class={{value}}>hello</div>");
    var object = { value: "world" };

    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='world'>hello</div>", "Initial render");

    object.value = "universe";
    result.revalidate(); // without setting the node to dirty

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='world'>hello</div>", "Revalidating without dirtying");

    var attrRenderNode = result.root.childNodes[0];

    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='universe'>hello</div>", "Revalidating after dirtying");

    attrRenderNode.setContent = function () {
      ok(false, "Should not get called");
    };

    object.value = "universe";
    result.rerender();
  });

  test("attribute nodes w/ concat follow the normal dirtying rules", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div class='hello {{value}}'>hello</div>");
    var object = { value: "world" };
    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='hello world'>hello</div>");

    object.value = "universe";
    result.revalidate(); // without setting the node to dirty

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='hello world'>hello</div>");

    var attrRenderNode = result.root.childNodes[0];

    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='hello universe'>hello</div>");

    attrRenderNode.setContent = function () {
      ok(false, "Should not get called");
    };

    object.value = "universe";
    result.rerender();
  });

  testEachHelper("An implementation of #each using block params", "<ul>{{#each list as |item|}}<li class={{item.class}}>{{item.name}}</li>{{/each}}</ul>");

  testEachHelper("An implementation of #each using a self binding", "<ul>{{#each list}}<li class={{class}}>{{name}}</li>{{/each}}</ul>");

  function testEachHelper(testName, templateSource) {
    test(testName, function () {
      var template = _htmlbarsCompilerCompiler.compile(templateSource);
      var object = { list: [{ key: "1", name: "Tom Dale", "class": "tomdale" }, { key: "2", name: "Yehuda Katz", "class": "wycats" }] };
      var result = template.render(object, env);

      var itemNode = getItemNode('tomdale');
      var nameNode = getNameNode('tomdale');

      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='tomdale'>Tom Dale</li><li class='wycats'>Yehuda Katz</li></ul>", "Initial render");

      rerender();
      assertStableNodes('tomdale', "after no-op rerender");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='tomdale'>Tom Dale</li><li class='wycats'>Yehuda Katz</li></ul>", "After no-op re-render");

      result.revalidate();
      assertStableNodes('tomdale', "after non-dirty rerender");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='tomdale'>Tom Dale</li><li class='wycats'>Yehuda Katz</li></ul>", "After no-op re-render");

      object = { list: [object.list[1], object.list[0]] };
      rerender(object);
      assertStableNodes('tomdale', "after changing the list order");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='wycats'>Yehuda Katz</li><li class='tomdale'>Tom Dale</li></ul>", "After changing the list order");

      object = { list: [{ key: "1", name: "Martin Muñoz", "class": "mmun" }, { key: "2", name: "Kris Selden", "class": "krisselden" }] };
      rerender(object);
      assertStableNodes('mmun', "after changing the list entries, but with stable keys");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='mmun'>Martin Muñoz</li><li class='krisselden'>Kris Selden</li></ul>", "After changing the list entries, but with stable keys");

      object = { list: [{ key: "1", name: "Martin Muñoz", "class": "mmun" }, { key: "2", name: "Kristoph Selden", "class": "krisselden" }, { key: "3", name: "Matthew Beale", "class": "mixonic" }] };

      rerender(object);
      assertStableNodes('mmun', "after adding an additional entry");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='mmun'>Martin Muñoz</li><li class='krisselden'>Kristoph Selden</li><li class='mixonic'>Matthew Beale</li></ul>", "After adding an additional entry");

      object = { list: [{ key: "1", name: "Martin Muñoz", "class": "mmun" }, { key: "3", name: "Matthew Beale", "class": "mixonic" }] };

      rerender(object);
      assertStableNodes('mmun', "after removing the middle entry");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='mmun'>Martin Muñoz</li><li class='mixonic'>Matthew Beale</li></ul>", "after removing the middle entry");

      object = { list: [{ key: "1", name: "Martin Muñoz", "class": "mmun" }, { key: "4", name: "Stefan Penner", "class": "stefanpenner" }, { key: "5", name: "Robert Jackson", "class": "rwjblue" }] };

      rerender(object);
      assertStableNodes('mmun', "after adding two more entries");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='mmun'>Martin Muñoz</li><li class='stefanpenner'>Stefan Penner</li><li class='rwjblue'>Robert Jackson</li></ul>", "After adding two more entries");

      // New node for stability check
      itemNode = getItemNode('rwjblue');
      nameNode = getNameNode('rwjblue');

      object = { list: [{ key: "5", name: "Robert Jackson", "class": "rwjblue" }] };

      rerender(object);
      assertStableNodes('rwjblue', "after removing two entries");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='rwjblue'>Robert Jackson</li></ul>", "After removing two entries");

      object = { list: [{ key: "1", name: "Martin Muñoz", "class": "mmun" }, { key: "4", name: "Stefan Penner", "class": "stefanpenner" }, { key: "5", name: "Robert Jackson", "class": "rwjblue" }] };

      rerender(object);
      assertStableNodes('rwjblue', "after adding back entries");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='mmun'>Martin Muñoz</li><li class='stefanpenner'>Stefan Penner</li><li class='rwjblue'>Robert Jackson</li></ul>", "After adding back entries");

      // New node for stability check
      itemNode = getItemNode('mmun');
      nameNode = getNameNode('mmun');

      object = { list: [{ key: "1", name: "Martin Muñoz", "class": "mmun" }] };

      rerender(object);
      assertStableNodes('mmun', "after removing from the back");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><li class='mmun'>Martin Muñoz</li></ul>", "After removing from the back");

      object = { list: [] };

      rerender(object);
      strictEqual(result.fragment.firstChild.firstChild.nodeType, 8, "there are no li's after removing the remaining entry");
      _htmlbarsTestHelpers.equalTokens(result.fragment, "<ul><!----></ul>", "After removing the remaining entries");

      function rerender(context) {
        result.rerender(env, context);
      }

      function assertStableNodes(className, message) {
        strictEqual(getItemNode(className), itemNode, "The item node has not changed " + message);
        strictEqual(getNameNode(className), nameNode, "The name node has not changed " + message);
      }

      function getItemNode(className) {
        // <li>
        var itemNode = result.fragment.firstChild.firstChild;

        while (itemNode) {
          if (itemNode.getAttribute('class') === className) {
            break;
          }
          itemNode = itemNode.nextSibling;
        }

        ok(itemNode, "Expected node with class='" + className + "'");
        return itemNode;
      }

      function getNameNode(className) {
        // {{item.name}}
        var itemNode = getItemNode(className);
        ok(itemNode, "Expected child node of node with class='" + className + "', but no parent node found");

        var childNode = itemNode && itemNode.firstChild;
        ok(childNode, "Expected child node of node with class='" + className + "', but not child node found");

        return childNode;
      }
    });
  }

  test("Returning true from `linkRenderNodes` makes the value itself stable across renders", function () {
    var streams = { hello: { value: "hello" }, world: { value: "world" } };

    hooks.linkRenderNode = function () {
      return true;
    };

    hooks.getValue = function (stream) {
      return stream();
    };

    var concatCalled = 0;
    hooks.concat = function (env, params) {
      ok(++concatCalled === 1, "The concat hook is only invoked one time (invoked " + concatCalled + " times)");
      return function () {
        return params[0].value + params[1] + params[2].value;
      };
    };

    var template = _htmlbarsCompilerCompiler.compile("<div class='{{hello}} {{world}}'></div>");
    var result = template.render(streams, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='hello world'></div>");

    streams.hello.value = "goodbye";

    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div class='goodbye world'></div>");
  });

  var destroyedRenderNodeCount;
  var destroyedRenderNode;

  QUnit.module("HTML-based compiler (dirtying) - pruning", {
    beforeEach: function () {
      commonSetup();
      destroyedRenderNodeCount = 0;
      destroyedRenderNode = null;

      hooks.destroyRenderNode = function (renderNode) {
        destroyedRenderNode = renderNode;
        destroyedRenderNodeCount++;
      };
    }
  });

  test("Pruned render nodes invoke a cleanup hook when replaced", function () {
    var object = { condition: true, value: 'hello world', falsy: "Nothing" };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#if condition}}<p>{{value}}</p>{{else}}<p>{{falsy}}</p>{{/if}}</div>');

    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div><p>hello world</p></div>");

    object.condition = false;
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 1, "cleanup hook was invoked once");
    strictEqual(destroyedRenderNode.lastValue, 'hello world', "The correct render node is passed in");

    object.condition = true;
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 2, "cleanup hook was invoked again");
    strictEqual(destroyedRenderNode.lastValue, 'Nothing', "The correct render node is passed in");
  });

  test("MorphLists in childNodes are properly cleared", function () {
    var object = {
      condition: true,
      falsy: "Nothing",
      list: [{ key: "1", word: 'Hello' }, { key: "2", word: 'World' }]
    };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#if condition}}{{#each list as |item|}}<p>{{item.word}}</p>{{/each}}{{else}}<p>{{falsy}}</p>{{/if}}</div>');

    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div><p>Hello</p><p>World</p></div>");

    object.condition = false;
    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div><p>Nothing</p></div>");

    strictEqual(destroyedRenderNodeCount, 5, "cleanup hook was invoked for each morph");

    object.condition = true;
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 6, "cleanup hook was invoked again");
  });

  test("Pruned render nodes invoke a cleanup hook when cleared", function () {
    var object = { condition: true, value: 'hello world' };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#if condition}}<p>{{value}}</p>{{/if}}</div>');

    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div><p>hello world</p></div>");

    object.condition = false;
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 1, "cleanup hook was invoked once");
    strictEqual(destroyedRenderNode.lastValue, 'hello world', "The correct render node is passed in");

    object.condition = true;
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 1, "cleanup hook was not invoked again");
  });

  test("Pruned lists invoke a cleanup hook when removing elements", function () {
    var object = { list: [{ key: "1", word: "hello" }, { key: "2", word: "world" }] };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#each list as |item|}}<p>{{item.word}}</p>{{/each}}</div>');

    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div><p>hello</p><p>world</p></div>");

    object.list.pop();
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 2, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "world", "The correct render node is passed in");

    object.list.pop();
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 4, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "hello", "The correct render node is passed in");
  });

  test("Pruned lists invoke a cleanup hook on their subtrees when removing elements", function () {
    var object = { list: [{ key: "1", word: "hello" }, { key: "2", word: "world" }] };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{#each list as |item|}}<p>{{#if item.word}}{{item.word}}{{/if}}</p>{{/each}}</div>');

    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<div><p>hello</p><p>world</p></div>");

    object.list.pop();
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 3, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "world", "The correct render node is passed in");

    object.list.pop();
    result.rerender();

    strictEqual(destroyedRenderNodeCount, 6, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "hello", "The correct render node is passed in");
  });

  QUnit.module("Manual elements", {
    beforeEach: commonSetup
  });

  QUnit.skip("Setting up a manual element renders and revalidates", function () {
    hooks.keywords['manual-element'] = {
      render: function (morph, env, scope, params, hash, template, inverse, visitor) {
        var attributes = {
          title: "Tom Dale",
          href: ['concat', ['http://tomdale.', ['get', 'tld']]],
          'data-bar': ['get', 'bar']
        };

        var layout = _htmlbarsRuntimeRender.manualElement('span', attributes);

        _htmlbarsRuntimeHooks.hostBlock(morph, env, scope, template, inverse, null, visitor, function (options) {
          options.templates.template.yieldIn({ raw: layout }, hash);
        });

        _htmlbarsRuntimeRender.manualElement(env, scope, 'span', attributes, morph);
      },

      isStable: function () {
        return true;
      }
    };

    var template = _htmlbarsCompilerCompiler.compile("{{#manual-element bar='baz' tld='net'}}Hello {{world}}!{{/manual-element}}");
    var result = template.render({ world: "world" }, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<span title='Tom Dale' href='http://tomdale.net' data-bar='baz'>Hello world!</span>");
  });

  test("It is possible to nest multiple templates into a manual element", function () {
    var layout = _htmlbarsCompilerCompiler.compile("<em>{{attrs.foo}}. {{yield}}</em>");
    var template = _htmlbarsCompilerCompiler.compile("{{#manual-element foo='foo' bar='baz' tld='net'}}Hello {{world}}!{{/manual-element}}");

    hooks.keywords['manual-element'] = {
      render: function (morph, env, scope, params, hash, template, inverse, visitor) {
        var attributes = {
          title: "Tom Dale",
          href: _htmlbarsUtilTemplateUtils.buildStatement('concat', ['http://tomdale.', _htmlbarsUtilTemplateUtils.buildStatement('get', 'tld')]),
          'data-bar': _htmlbarsUtilTemplateUtils.buildStatement('get', 'bar')
        };

        var elementTemplate = _htmlbarsRuntimeRender.manualElement('span', attributes);

        var contentBlock = _htmlbarsUtilTemplateUtils.blockFor(_htmlbarsRuntimeRender.default, template, { scope: scope });

        var layoutBlock = _htmlbarsUtilTemplateUtils.blockFor(_htmlbarsRuntimeRender.default, layout.raw, {
          yieldTo: contentBlock,
          self: { attrs: hash }
        });

        var elementBlock = _htmlbarsUtilTemplateUtils.blockFor(_htmlbarsRuntimeRender.default, elementTemplate, {
          yieldTo: layoutBlock,
          self: hash
        });

        elementBlock.invoke(env, null, undefined, morph, null, visitor);
      },

      isStable: function () {
        return true;
      }
    };

    var result = template.render({ world: "world" }, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "<span title='Tom Dale' href='http://tomdale.net' data-bar='baz'><em>foo. Hello world!</em></span>");
  });

  test("The invoke helper hook can instruct the runtime to link the result", function () {
    var invokeCount = 0;

    env.hooks.invokeHelper = function (morph, env, scope, visitor, params, hash, helper) {
      invokeCount++;
      return { value: helper(params, hash), link: true };
    };

    helpers.double = function (_ref) {
      var input = _ref[0];

      return input * 2;
    };

    var template = _htmlbarsCompilerCompiler.compile("{{double 12}}");
    var result = template.render({}, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, "24");
    equal(invokeCount, 1);

    result.rerender();

    _htmlbarsTestHelpers.equalTokens(result.fragment, "24");
    equal(invokeCount, 1);
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-compiler-tests/dirtying-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/dirtying-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/dirtying-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2RpcnR5aW5nLXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDakQsT0FBSyxDQUFDLElBQUksQ0FBQyw2REFBNkQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4REFBOEQsQ0FBQyxDQUFDO0dBQ2pGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9kaXJ0eWluZy10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2RpcnR5aW5nLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2RpcnR5aW5nLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-compiler-tests/fragment-test", ["exports", "../htmlbars-compiler/fragment-opcode-compiler", "../htmlbars-compiler/fragment-javascript-compiler", "../dom-helper", "../htmlbars-syntax/parser", "../htmlbars-test-helpers"], function (exports, _htmlbarsCompilerFragmentOpcodeCompiler, _htmlbarsCompilerFragmentJavascriptCompiler, _domHelper, _htmlbarsSyntaxParser, _htmlbarsTestHelpers) {

  var xhtmlNamespace = "http://www.w3.org/1999/xhtml",
      svgNamespace = "http://www.w3.org/2000/svg";

  function fragmentFor(ast) {
    /* jshint evil: true */
    var fragmentOpcodeCompiler = new _htmlbarsCompilerFragmentOpcodeCompiler.default(),
        fragmentCompiler = new _htmlbarsCompilerFragmentJavascriptCompiler.default();

    var opcodes = fragmentOpcodeCompiler.compile(ast);
    var program = fragmentCompiler.compile(opcodes);

    var fn = new Function("dom", 'return ' + program)();

    return fn(new _domHelper.default());
  }

  QUnit.module('fragment');

  test('compiles a fragment', function () {
    var ast = _htmlbarsSyntaxParser.preprocess("<div>{{foo}} bar {{baz}}</div>");
    var divNode = fragmentFor(ast).firstChild;

    _htmlbarsTestHelpers.equalHTML(divNode, "<div><!----> bar <!----></div>");
  });

  if (document && document.createElementNS) {
    test('compiles an svg fragment', function () {
      var ast = _htmlbarsSyntaxParser.preprocess("<div><svg><circle/><foreignObject><span></span></foreignObject></svg></div>");
      var divNode = fragmentFor(ast).firstChild;

      equal(divNode.childNodes[0].namespaceURI, svgNamespace, 'svg has the right namespace');
      equal(divNode.childNodes[0].childNodes[0].namespaceURI, svgNamespace, 'circle has the right namespace');
      equal(divNode.childNodes[0].childNodes[1].namespaceURI, svgNamespace, 'foreignObject has the right namespace');
      equal(divNode.childNodes[0].childNodes[1].childNodes[0].namespaceURI, xhtmlNamespace, 'span has the right namespace');
    });
  }

  test('compiles an svg element with classes', function () {
    var ast = _htmlbarsSyntaxParser.preprocess('<svg class="red right hand"></svg>');
    var svgNode = fragmentFor(ast).firstChild;

    equal(svgNode.getAttribute('class'), 'red right hand');
  });

  if (document && document.createElementNS) {
    test('compiles an svg element with proper namespace', function () {
      var ast = _htmlbarsSyntaxParser.preprocess('<svg><use xlink:title="nice-title"></use></svg>');
      var svgNode = fragmentFor(ast).firstChild;

      equal(svgNode.childNodes[0].getAttributeNS('http://www.w3.org/1999/xlink', 'title'), 'nice-title');
      equal(svgNode.childNodes[0].attributes[0].namespaceURI, 'http://www.w3.org/1999/xlink');
      equal(svgNode.childNodes[0].attributes[0].name, 'xlink:title');
      equal(svgNode.childNodes[0].attributes[0].localName, 'title');
      equal(svgNode.childNodes[0].attributes[0].value, 'nice-title');
    });
  }

  test('converts entities to their char/string equivalent', function () {
    var ast = _htmlbarsSyntaxParser.preprocess("<div title=\"&quot;Foo &amp; Bar&quot;\">lol &lt; &#60;&#x3c; &#x3C; &LT; &NotGreaterFullEqual; &Borksnorlax;</div>");
    var divNode = fragmentFor(ast).firstChild;

    equal(divNode.getAttribute('title'), '"Foo & Bar"');
    equal(_htmlbarsTestHelpers.getTextContent(divNode), "lol < << < < ≧̸ &Borksnorlax;");
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2ZyYWdtZW50LXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSxNQUFJLGNBQWMsR0FBRyw4QkFBOEI7TUFDL0MsWUFBWSxHQUFHLDRCQUE0QixDQUFDOztBQUVoRCxXQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUU7O0FBRXhCLFFBQUksc0JBQXNCLEdBQUcscURBQTRCO1FBQ3JELGdCQUFnQixHQUFHLHlEQUFnQyxDQUFDOztBQUV4RCxRQUFJLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEQsUUFBSSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVoRCxRQUFJLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUM7O0FBRXBELFdBQU8sRUFBRSxDQUFDLHdCQUFlLENBQUMsQ0FBQztHQUM1Qjs7QUFFRCxPQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUV6QixNQUFJLENBQUMscUJBQXFCLEVBQUUsWUFBWTtBQUN0QyxRQUFJLEdBQUcsR0FBRyxzQkF0QkgsVUFBVSxDQXNCSSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ3ZELFFBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUM7O0FBRTFDLHlCQXhCTyxTQUFTLENBd0JOLE9BQU8sRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO0dBQ3RELENBQUMsQ0FBQzs7QUFFSCxNQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsZUFBZSxFQUFFO0FBQ3hDLFFBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFZO0FBQzNDLFVBQUksR0FBRyxHQUFHLHNCQTlCTCxVQUFVLENBOEJNLDZFQUE2RSxDQUFDLENBQUM7QUFDcEcsVUFBSSxPQUFPLEdBQUcsV0FBVyxDQUFDLEdBQUcs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bnRlbnQiOlsiaW1wb3J0IEZyYWdtZW50T3Bjb2RlQ29tcGlsZXIgZnJvbSBcIi4uL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LW9wY29kZS1jb21waWxlclwiO1xuaW1wb3J0IEZyYWdtZW50SmF2YVNjcmlwdENvbXBpbGVyIGZyb20gXCIuLi9odG1sYmFycy1jb21waWxlci9mcmFnbWVudC1qYXZhc2NyaXB0LWNvbXBpbGVyXCI7XG5pbXBvcnQgRE9NSGVscGVyIGZyb20gXCIuLi9kb20taGVscGVyXCI7XG5pbXBvcnQgeyBwcmVwcm9jZXNzIH0gZnJvbSBcIi4uL2h0bWxiYXJzLXN5bnRheC9wYXJzZXJcIjtcbmltcG9ydCB7IGVxdWFsSFRNTCwgZ2V0VGV4dENvbnRlbnQgfSBmcm9tIFwiLi4vaHRtbGJhcnMtdGVzdC1oZWxwZXJzXCI7XG5cbnZhciB4aHRtbE5hbWVzcGFjZSA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFxuICAgIHN2Z05hbWVzcGFjZSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcblxuZnVuY3Rpb24gZnJhZ21lbnRGb3IoYXN0KSB7XG4gIC8qIGpzaGludCBldmlsOiB0cnVlICovXG4gIHZhciBmcmFnbWVudE9wY29kZUNvbXBpbGVyID0gbmV3IEZyYWdtZW50T3Bjb2RlQ29tcGlsZXIoKSxcbiAgICAgIGZyYWdtZW50Q29tcGlsZXIgPSBuZXcgRnJhZ21lbnRKYXZhU2NyaXB0Q29tcGlsZXIoKTtcblxuICB2YXIgb3Bjb2RlcyA9IGZyYWdtZW50T3Bjb2RlQ29tcGlsZXIuY29tcGlsZShhc3QpO1xuICB2YXIgcHJvZ3JhbSA9IGZyYWdtZW50Q29tcGlsZXIuY29tcGlsZShvcGNvZGVzKTtcblxuICB2YXIgZm4gPSBuZXcgRnVuY3Rpb24oXCJkb21cIiwgJ3JldHVybiAnICsgcHJvZ3JhbSkoKTtcblxuICByZXR1cm4gZm4obmV3IERPTUhlbHBlcigpKTtcbn1cblxuUVVuaXQubW9kdWxlKCdmcmFnbWVudCcpO1xuXG50ZXN0KCdjb21waWxlcyBhIGZyYWdtZW50JywgZnVuY3Rpb24gKCkge1xuICB2YXIgYXN0ID0gcHJlcHJvY2VzcyhcIjxkaXY+e3tmb299fSBiYXIge3tiYXp9fTwvZGl2PlwiKTtcbiAgdmFyIGRpdk5vZGUgPSBmcmFnbWVudEZvcihhc3QpLmZpcnN0Q2hpbGQ7XG5cbiAgZXF1YWxIVE1MKGRpdk5vZGUsIFwiPGRpdj48IS0tLS0+IGJhciA8IS0tLS0+PC9kaXY+XCIpO1xufSk7XG5cbmlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMpIHtcbiAgdGVzdCgnY29tcGlsZXMgYW4gc3ZnIGZyYWdtZW50JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBhc3QgPSBwcmVwcm9jZXNzKFwiPGRpdj48c3ZnPjxjaXJjbGUvPjxmb3JlaWduT2JqZWN0PjxzcGFuPjwvc3Bhbj48L2ZvcmVpZ25PYmplY3Q+PC9zdmc+PC9kaXY+XCIpO1xuICAgIHZhciBkaXZOb2RlID0gZnJhZ21lbnRGb3IoYXN0KS5maXJzdENoaWxkO1xuXG4gICAgZXF1YWwoIGRpdk5vZGUuY2hpbGROb2Rlc1swXS5uYW1lc3BhY2VVUkksIHN2Z05hbWVzcGFjZSxcbiAgICAgICAgICAgJ3N2ZyBoYXMgdGhlIHJpZ2h0IG5hbWVzcGFjZScgKTtcbiAgICBlcXVhbCggZGl2Tm9kZS5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMF0ubmFtZXNwYWNlVVJJLCBzdmdOYW1lc3BhY2UsXG4gICAgICAgICAgICdjaXJjbGUgaGFzIHRoZSByaWdodCBuYW1lc3BhY2UnICk7XG4gICAgZXF1YWwoIGRpdk5vZGUuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzFdLm5hbWVzcGFjZVVSSSwgc3ZnTmFtZXNwYWNlLFxuICAgICAgICAgICAnZm9yZWlnbk9iamVjdCBoYXMgdGhlIHJpZ2h0IG5hbWVzcGFjZScgKTtcbiAgICBlcXVhbCggZGl2Tm9kZS5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMV0uY2hpbGROb2Rlc1swXS5uYW1lc3BhY2VVUkksIHhodG1sTmFtZXNwYWNlLFxuICAgICAgICAgICAnc3BhbiBoYXMgdGhlIHJpZ2h0IG5hbWVzcGFjZScgKTtcbiAgfSk7XG59XG4gIFxudGVzdCgnY29tcGlsZXMgYW4gc3ZnIGVsZW1lbnQgd2l0aCBjbGFzc2VzJywgZnVuY3Rpb24gKCkge1xuICB2YXIgYXN0ID0gcHJlcHJvY2VzcygnPHN2ZyBjbGFzcz1cInJlZCByaWdodCBoYW5kXCI+PC9zdmc+Jyk7XG4gIHZhciBzdmdOb2RlID0gZnJhZ21lbnRGb3IoYXN0KS5maXJzdENoaWxkO1xuXG4gIGVxdWFsKHN2Z05vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpLCAncmVkIHJpZ2h0IGhhbmQnKTtcbn0pO1xuXG5pZiAoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKSB7XG4gIHRlc3QoJ2NvbXBpbGVzIGFuIHN2ZyBlbGVtZW50IHdpdGggcHJvcGVyIG5hbWVzcGFjZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXN0ID0gcHJlcHJvY2VzcygnPHN2Zz48dXNlIHhsaW5rOnRpdGxlPVwibmljZS10aXRsZVwiPjwvdXNlPjwvc3ZnPicpO1xuICAgIHZhciBzdmdOb2RlID0gZnJhZ21lbnRGb3IoYXN0KS5maXJzdENoaWxkO1xuXG4gICAgZXF1YWwoc3ZnTm9kZS5jaGlsZE5vZGVzWzBdLmdldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ3RpdGxlJyksICduaWNlLXRpdGxlJyk7XG4gICAgZXF1YWwoc3ZnTm9kZS5jaGlsZE5vZGVzWzBdLmF0dHJpYnV0ZXNbMF0ubmFtZXNwYWNlVVJJLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycpO1xuICAgIGVxdWFsKHN2Z05vZGUuY2hpbGROb2Rlc1swXS5hdHRyaWJ1dGVzWzBdLm5hbWUsICd4bGluazp0aXRsZScpO1xuICAgIGVxdWFsKHN2Z05vZGUuY2hpbGROb2Rlc1swXS5hdHRyaWJ1dGVzWzBdLmxvY2FsTmFtZSwgJ3RpdGxlJyk7XG4gICAgZXF1YWwoc3ZnTm9kZS5jaGlsZE5vZGVzWzBdLmF0dHJpYnV0ZXNbMF0udmFsdWUsICduaWNlLXRpdGxlJyk7XG4gIH0pO1xuXG59XG4gIFxudGVzdCgnY29udmVydHMgZW50aXRpZXMgdG8gdGhlaXIgY2hhci9zdHJpbmcgZXF1aXZhbGVudCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFzdCA9IHByZXByb2Nlc3MoXCI8ZGl2IHRpdGxlPVxcXCImcXVvdDtGb28gJmFtcDsgQmFyJnF1b3Q7XFxcIj5sb2wgJmx0OyAmIzYwOyYjeDNjOyAmI3gzQzsgJkxUOyAmTm90R3JlYXRlckZ1bGxFcXVhbDsgJkJvcmtzbm9ybGF4OzwvZGl2PlwiKTtcbiAgdmFyIGRpdk5vZGUgPSBmcmFnbWVudEZvcihhc3QpLmZpcnN0Q2hpbGQ7XG5cbiAgZXF1YWwoZGl2Tm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyksICdcIkZvbyAmIEJhclwiJyk7XG4gIGVxdWFsKGdldFRleHRDb250ZW50KGRpdk5vZGUpLCBcImxvbCA8IDw8IDwgPCDiiafMuCAmQm9ya3Nub3JsYXg7XCIpO1xufSk7XG4iXX0=
define('htmlbars-compiler-tests/fragment-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/fragment-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/fragment-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2ZyYWdtZW50LXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDakQsT0FBSyxDQUFDLElBQUksQ0FBQyw2REFBNkQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4REFBOEQsQ0FBQyxDQUFDO0dBQ2pGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9mcmFnbWVudC10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2ZyYWdtZW50LXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2ZyYWdtZW50LXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-compiler-tests/hooks-test", ["exports", "../htmlbars-compiler/compiler", "../htmlbars-runtime/hooks", "../htmlbars-util/object-utils", "../dom-helper", "../htmlbars-test-helpers"], function (exports, _htmlbarsCompilerCompiler, _htmlbarsRuntimeHooks, _htmlbarsUtilObjectUtils, _domHelper, _htmlbarsTestHelpers) {

  var hooks, helpers, partials, env;

  function registerHelper(name, callback) {
    helpers[name] = callback;
  }

  function commonSetup() {
    hooks = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default);
    hooks.keywords = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default.keywords);
    helpers = {};
    partials = {};

    env = {
      dom: new _domHelper.default(),
      hooks: hooks,
      helpers: helpers,
      partials: partials,
      useFragmentCache: true
    };
  }

  QUnit.module("HTML-based compiler (dirtying)", {
    beforeEach: commonSetup
  });

  test("the invokeHelper hook gets invoked to call helpers", function () {
    hooks.getRoot = function (scope, key) {
      return [{ value: scope.self[key] }];
    };

    var invoked = false;
    hooks.invokeHelper = function (morph, env, scope, visitor, params, hash, helper, templates, context) {
      invoked = true;
      deepEqual(params, [{ value: "hello world" }]);
      ok(scope.self, "the scope was passed");
      ok(morph.getState(), "the morph was passed");

      return { value: helper.call(context, [params[0].value], hash, templates) };
    };

    registerHelper('print', function (params) {
      return params.join('');
    });

    var object = { val: 'hello world' };
    var template = _htmlbarsCompilerCompiler.compile('<div>{{print val}}</div>');
    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div>hello world</div>');

    ok(invoked, "The invokeHelper hook was invoked");
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2hvb2tzLXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSxNQUFJLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQzs7QUFFbEMsV0FBUyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUN0QyxXQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO0dBQzFCOztBQUVELFdBQVMsV0FBVyxHQUFHO0FBQ3JCLFNBQUssR0FBRyx5QkFYRCxLQUFLLENBV0UsRUFBRSxnQ0FBZSxDQUFDO0FBQ2hDLFNBQUssQ0FBQyxRQUFRLEdBQUcseUJBWlYsS0FBSyxDQVlXLEVBQUUsRUFBRSw4QkFBYSxRQUFRLENBQUMsQ0FBQztBQUNsRCxXQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ2IsWUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFZCxPQUFHLEdBQUc7QUFDSixTQUFHLEVBQUUsd0JBQWU7QUFDcEIsV0FBSyxFQUFFLEtBQUs7QUFDWixhQUFPLEVBQUUsT0FBTztBQUNoQixjQUFRLEVBQUUsUUFBUTtBQUNsQixzQkFBZ0IsRUFBRSxJQUFJO0tBQ3ZCLENBQUM7R0FDSDs7QUFFRCxPQUFLLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxFQUFFO0FBQzdDLGNBQVUsRUFBRSxXQUFXO0dBQ3hCLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsb0RBQW9ELEVBQUUsWUFBVztBQUNwRSxTQUFLLENBQUMsT0FBTyxHQUFHLFVBQVMsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUNuQyxhQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckMsQ0FBQzs7QUFFRixRQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDcEIsU0FBSyxDQUFDLFlBQVksR0FBRyxVQUFTLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQ2xHLGFBQU8sR0FBRyxJQUFJLENBQUM7QUFDZixlQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLFFBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLHNCQUFzQixDQUFDLENBQUM7QUFDdkMsUUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDOztBQUU3QyxhQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDO0tBQzVFLENBQUM7O0FBRUYsa0JBQWMsQ0FBQyxPQUFPLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdkMsYUFBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3hCLENBQUMsQ0FBQzs7QUFFSCxRQUFJLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsQ0FBQztBQUNwQyxRQUFJLFFBQVEsR0FBRywwQkFuRFIsT0FBTyxDQW1EUywwQkFBMEIsQ0FBQyxDQUFDO0FBQ25ELFFBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUUxQyx5QkFsRE8sV0FBVyxDQWtETixNQUFNLENBQUMsUUFBUSxFQUFFLHdCQUF3QixDQUFDLENBQUM7O0FBRXZELE1BQUUsQ0FBQyxPQUFPLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztHQUNsRCxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaG9va3MtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBpbGUgfSBmcm9tIFwiLi4vaHRtbGJhcnMtY29tcGlsZXIvY29tcGlsZXJcIjtcbmltcG9ydCBkZWZhdWx0SG9va3MgZnJvbSBcIi4uL2h0bWxiYXJzLXJ1bnRpbWUvaG9va3NcIjtcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcIi4uL2h0bWxiYXJzLXV0aWwvb2JqZWN0LXV0aWxzXCI7XG5pbXBvcnQgRE9NSGVscGVyIGZyb20gXCIuLi9kb20taGVscGVyXCI7XG5pbXBvcnQgeyBlcXVhbFRva2VucyB9IGZyb20gXCIuLi9odG1sYmFycy10ZXN0LWhlbHBlcnNcIjtcblxudmFyIGhvb2tzLCBoZWxwZXJzLCBwYXJ0aWFscywgZW52O1xuXG5mdW5jdGlvbiByZWdpc3RlckhlbHBlcihuYW1lLCBjYWxsYmFjaykge1xuICBoZWxwZXJzW25hbWVdID0gY2FsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGNvbW1vblNldHVwKCkge1xuICBob29rcyA9IG1lcmdlKHt9LCBkZWZhdWx0SG9va3MpO1xuICBob29rcy5rZXl3b3JkcyA9IG1lcmdlKHt9LCBkZWZhdWx0SG9va3Mua2V5d29yZHMpO1xuICBoZWxwZXJzID0ge307XG4gIHBhcnRpYWxzID0ge307XG5cbiAgZW52ID0ge1xuICAgIGRvbTogbmV3IERPTUhlbHBlcigpLFxuICAgIGhvb2tzOiBob29rcyxcbiAgICBoZWxwZXJzOiBoZWxwZXJzLFxuICAgIHBhcnRpYWxzOiBwYXJ0aWFscyxcbiAgICB1c2VGcmFnbWVudENhY2hlOiB0cnVlXG4gIH07XG59XG5cblFVbml0Lm1vZHVsZShcIkhUTUwtYmFzZWQgY29tcGlsZXIgKGRpcnR5aW5nKVwiLCB7XG4gIGJlZm9yZUVhY2g6IGNvbW1vblNldHVwXG59KTtcblxudGVzdChcInRoZSBpbnZva2VIZWxwZXIgaG9vayBnZXRzIGludm9rZWQgdG8gY2FsbCBoZWxwZXJzXCIsIGZ1bmN0aW9uKCkge1xuICBob29rcy5nZXRSb290ID0gZnVuY3Rpb24oc2NvcGUsIGtleSkge1xuICAgIHJldHVybiBbeyB2YWx1ZTogc2NvcGUuc2VsZltrZXldIH1dO1xuICB9O1xuXG4gIHZhciBpbnZva2VkID0gZmFsc2U7XG4gIGhvb2tzLmludm9rZUhlbHBlciA9IGZ1bmN0aW9uKG1vcnBoLCBlbnYsIHNjb3BlLCB2aXNpdG9yLCBwYXJhbXMsIGhhc2gsIGhlbHBlciwgdGVtcGxhdGVzLCBjb250ZXh0KSB7XG4gICAgaW52b2tlZCA9IHRydWU7XG4gICAgZGVlcEVxdWFsKHBhcmFtcywgW3sgdmFsdWU6IFwiaGVsbG8gd29ybGRcIiB9XSk7XG4gICAgb2soc2NvcGUuc2VsZiwgXCJ0aGUgc2NvcGUgd2FzIHBhc3NlZFwiKTtcbiAgICBvayhtb3JwaC5nZXRTdGF0ZSgpLCBcInRoZSBtb3JwaCB3YXMgcGFzc2VkXCIpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWU6IGhlbHBlci5jYWxsKGNvbnRleHQsIFtwYXJhbXNbMF0udmFsdWVdLCBoYXNoLCB0ZW1wbGF0ZXMpIH07XG4gIH07XG5cbiAgcmVnaXN0ZXJIZWxwZXIoJ3ByaW50JywgZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtcy5qb2luKCcnKTtcbiAgfSk7XG5cbiAgdmFyIG9iamVjdCA9IHsgdmFsOiAnaGVsbG8gd29ybGQnIH07XG4gIHZhciB0ZW1wbGF0ZSA9IGNvbXBpbGUoJzxkaXY+e3twcmludCB2YWx9fTwvZGl2PicpO1xuICB2YXIgcmVzdWx0ID0gdGVtcGxhdGUucmVuZGVyKG9iamVjdCwgZW52KTtcblxuICBlcXVhbFRva2VucyhyZXN1bHQuZnJhZ21lbnQsICc8ZGl2PmhlbGxvIHdvcmxkPC9kaXY+Jyk7XG5cbiAgb2soaW52b2tlZCwgXCJUaGUgaW52b2tlSGVscGVyIGhvb2sgd2FzIGludm9rZWRcIik7XG59KTtcbiJdfQ==
define('htmlbars-compiler-tests/hooks-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/hooks-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/hooks-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2hvb2tzLXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDakQsT0FBSyxDQUFDLElBQUksQ0FBQywwREFBMEQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN0RixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSwyREFBMkQsQ0FBQyxDQUFDO0dBQzlFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9ob29rcy10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2hvb2tzLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2hvb2tzLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-compiler-tests/html-compiler-test", ["exports", "../htmlbars-compiler/compiler", "../htmlbars-util/array-utils", "../htmlbars-runtime/hooks", "../htmlbars-util/object-utils", "../dom-helper", "../htmlbars-test-helpers"], function (exports, _htmlbarsCompilerCompiler, _htmlbarsUtilArrayUtils, _htmlbarsRuntimeHooks, _htmlbarsUtilObjectUtils, _domHelper, _htmlbarsTestHelpers) {

  var xhtmlNamespace = "http://www.w3.org/1999/xhtml",
      svgNamespace = "http://www.w3.org/2000/svg";

  var hooks, helpers, partials, env;

  function registerHelper(name, callback) {
    helpers[name] = callback;
  }

  function registerPartial(name, html) {
    partials[name] = _htmlbarsCompilerCompiler.compile(html);
  }

  function compilesTo(html, expected, context) {
    var template = _htmlbarsCompilerCompiler.compile(html);
    var fragment = template.render(context, env, { contextualElement: document.body }).fragment;
    _htmlbarsTestHelpers.equalTokens(fragment, expected === undefined ? html : expected);
    return fragment;
  }

  function commonSetup() {
    hooks = _htmlbarsUtilObjectUtils.merge({}, _htmlbarsRuntimeHooks.default);
    helpers = {};
    partials = {};

    env = {
      dom: new _domHelper.default(),
      hooks: hooks,
      helpers: helpers,
      partials: partials,
      useFragmentCache: true
    };
  }

  QUnit.module("HTML-based compiler (output)", {
    beforeEach: commonSetup
  });

  test("Simple content produces a document fragment", function () {
    var template = _htmlbarsCompilerCompiler.compile("content");
    var fragment = template.render({}, env).fragment;

    _htmlbarsTestHelpers.equalTokens(fragment, "content");
  });

  test("Simple elements are created", function () {
    var template = _htmlbarsCompilerCompiler.compile("<h1>hello!</h1><div>content</div>");
    var fragment = template.render({}, env).fragment;

    _htmlbarsTestHelpers.equalTokens(fragment, "<h1>hello!</h1><div>content</div>");
  });

  test("Simple elements can be re-rendered", function () {
    var template = _htmlbarsCompilerCompiler.compile("<h1>hello!</h1><div>content</div>");
    var result = template.render({}, env);
    var fragment = result.fragment;

    var oldFirstChild = fragment.firstChild;

    result.revalidate();

    strictEqual(fragment.firstChild, oldFirstChild);
    _htmlbarsTestHelpers.equalTokens(fragment, "<h1>hello!</h1><div>content</div>");
  });

  test("Simple elements can have attributes", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div class='foo' id='bar'>content</div>");
    var fragment = template.render({}, env).fragment;

    _htmlbarsTestHelpers.equalTokens(fragment, '<div class="foo" id="bar">content</div>');
  });

  test("Simple elements can have an empty attribute", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div class=''>content</div>");
    var fragment = template.render({}, env).fragment;

    _htmlbarsTestHelpers.equalTokens(fragment, '<div class="">content</div>');
  });

  test("presence of `disabled` attribute without value marks as disabled", function () {
    var template = _htmlbarsCompilerCompiler.compile('<input disabled>');
    var inputNode = template.render({}, env).fragment.firstChild;

    ok(inputNode.disabled, 'disabled without value set as property is true');
  });

  test("Null quoted attribute value calls toString on the value", function () {
    var template = _htmlbarsCompilerCompiler.compile('<input disabled="{{isDisabled}}">');
    var inputNode = template.render({ isDisabled: null }, env).fragment.firstChild;

    ok(inputNode.disabled, 'string of "null" set as property is true');
  });

  test("Null unquoted attribute value removes that attribute", function () {
    var template = _htmlbarsCompilerCompiler.compile('<input disabled={{isDisabled}}>');
    var inputNode = template.render({ isDisabled: null }, env).fragment.firstChild;

    _htmlbarsTestHelpers.equalTokens(inputNode, '<input>');
  });

  test("unquoted attribute string is just that", function () {
    var template = _htmlbarsCompilerCompiler.compile('<input value=funstuff>');
    var inputNode = template.render({}, env).fragment.firstChild;

    equal(inputNode.tagName, 'INPUT', 'input tag');
    equal(inputNode.value, 'funstuff', 'value is set as property');
  });

  test("unquoted attribute expression is string", function () {
    var template = _htmlbarsCompilerCompiler.compile('<input value={{funstuff}}>');
    var inputNode = template.render({ funstuff: "oh my" }, env).fragment.firstChild;

    equal(inputNode.tagName, 'INPUT', 'input tag');
    equal(inputNode.value, 'oh my', 'string is set to property');
  });

  test("unquoted attribute expression works when followed by another attribute", function () {
    var template = _htmlbarsCompilerCompiler.compile('<div foo={{funstuff}} name="Alice"></div>');
    var divNode = template.render({ funstuff: "oh my" }, env).fragment.firstChild;

    _htmlbarsTestHelpers.equalTokens(divNode, '<div name="Alice" foo="oh my"></div>');
  });

  test("Unquoted attribute value with multiple nodes throws an exception", function () {
    expect(4);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<img class=foo{{bar}}>');
    }, expectedError(1));
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<img class={{foo}}{{bar}}>');
    }, expectedError(1));
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<img \nclass={{foo}}bar>');
    }, expectedError(2));
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<div \nclass\n=\n{{foo}}&amp;bar ></div>');
    }, expectedError(4));

    function expectedError(line) {
      return new Error("An unquoted attribute value must be a string or a mustache, " + "preceeded by whitespace or a '=' character, and " + ("followed by whitespace, a '>' character or a '/>' (on line " + line + ")"));
    }
  });

  test("Simple elements can have arbitrary attributes", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div data-some-data='foo'>content</div>");
    var divNode = template.render({}, env).fragment.firstChild;
    _htmlbarsTestHelpers.equalTokens(divNode, '<div data-some-data="foo">content</div>');
  });

  test("checked attribute and checked property are present after clone and hydrate", function () {
    var template = _htmlbarsCompilerCompiler.compile("<input checked=\"checked\">");
    var inputNode = template.render({}, env).fragment.firstChild;
    equal(inputNode.tagName, 'INPUT', 'input tag');
    equal(inputNode.checked, true, 'input tag is checked');
  });

  function shouldBeVoid(tagName) {
    var html = "<" + tagName + " data-foo='bar'><p>hello</p>";
    var template = _htmlbarsCompilerCompiler.compile(html);
    var fragment = template.render({}, env).fragment;

    var div = document.createElement("div");
    div.appendChild(fragment.cloneNode(true));

    var tag = '<' + tagName + ' data-foo="bar">';
    var closing = '</' + tagName + '>';
    var extra = "<p>hello</p>";
    html = _htmlbarsTestHelpers.normalizeInnerHTML(div.innerHTML);

    QUnit.push(html === tag + extra || html === tag + closing + extra, html, tag + closing + extra, tagName + " should be a void element");
  }

  test("Void elements are self-closing", function () {
    var voidElements = "area base br col command embed hr img input keygen link meta param source track wbr";

    _htmlbarsUtilArrayUtils.forEach(voidElements.split(" "), function (tagName) {
      shouldBeVoid(tagName);
    });
  });

  test("The compiler can handle nesting", function () {
    var html = '<div class="foo"><p><span id="bar" data-foo="bar">hi!</span></p></div>&nbsp;More content';
    var template = _htmlbarsCompilerCompiler.compile(html);
    var fragment = template.render({}, env).fragment;

    _htmlbarsTestHelpers.equalTokens(fragment, html);
  });

  test("The compiler can handle quotes", function () {
    compilesTo('<div>"This is a title," we\'re on a boat</div>');
  });

  test("The compiler can handle backslashes", function () {
    compilesTo('<div>This is a backslash: \\</div>');
  });

  test("The compiler can handle newlines", function () {
    compilesTo("<div>common\n\nbro</div>");
  });

  test("The compiler can handle comments", function () {
    compilesTo("<div>{{! Better not break! }}content</div>", '<div>content</div>', {});
  });

  test("The compiler can handle HTML comments", function () {
    compilesTo('<div><!-- Just passing through --></div>');
  });

  test("The compiler can handle HTML comments with mustaches in them", function () {
    compilesTo('<div><!-- {{foo}} --></div>', '<div><!-- {{foo}} --></div>', { foo: 'bar' });
  });

  test("The compiler can handle HTML comments with complex mustaches in them", function () {
    compilesTo('<div><!-- {{foo bar baz}} --></div>', '<div><!-- {{foo bar baz}} --></div>', { foo: 'bar' });
  });

  test("The compiler can handle HTML comments with multi-line mustaches in them", function () {
    compilesTo('<div><!-- {{#each foo as |bar|}}\n{{bar}}\n\n{{/each}} --></div>');
  });

  test('The compiler can handle comments with no parent element', function () {
    compilesTo('<!-- {{foo}} -->');
  });

  // TODO: Revisit partial syntax.
  // test("The compiler can handle partials in handlebars partial syntax", function() {
  //   registerPartial('partial_name', "<b>Partial Works!</b>");
  //   compilesTo('<div>{{>partial_name}} Plaintext content</div>', '<div><b>Partial Works!</b> Plaintext content</div>', {});
  // });

  test("The compiler can handle partials in helper partial syntax", function () {
    registerPartial('partial_name', "<b>Partial Works!</b>");
    compilesTo('<div>{{partial "partial_name"}} Plaintext content</div>', '<div><b>Partial Works!</b> Plaintext content</div>', {});
  });

  test("The compiler can handle simple handlebars", function () {
    compilesTo('<div>{{title}}</div>', '<div>hello</div>', { title: 'hello' });
  });

  test("The compiler can handle escaping HTML", function () {
    compilesTo('<div>{{title}}</div>', '<div>&lt;strong&gt;hello&lt;/strong&gt;</div>', { title: '<strong>hello</strong>' });
  });

  test("The compiler can handle unescaped HTML", function () {
    compilesTo('<div>{{{title}}}</div>', '<div><strong>hello</strong></div>', { title: '<strong>hello</strong>' });
  });

  test("The compiler can handle top-level unescaped HTML", function () {
    compilesTo('{{{html}}}', '<strong>hello</strong>', { html: '<strong>hello</strong>' });
  });

  test("The compiler can handle top-level unescaped tr", function () {
    var template = _htmlbarsCompilerCompiler.compile('{{{html}}}');
    var context = { html: '<tr><td>Yo</td></tr>' };
    var fragment = template.render(context, env, { contextualElement: document.createElement('table') }).fragment;

    equal(fragment.firstChild.nextSibling.tagName, 'TR', "root tr is present");
  });

  test("The compiler can handle top-level unescaped td inside tr contextualElement", function () {
    var template = _htmlbarsCompilerCompiler.compile('{{{html}}}');
    var context = { html: '<td>Yo</td>' };
    var fragment = template.render(context, env, { contextualElement: document.createElement('tr') }).fragment;

    equal(fragment.firstChild.nextSibling.tagName, 'TD', "root td is returned");
  });

  test("The compiler can handle unescaped tr in top of content", function () {
    registerHelper('test', function () {
      return this.yield();
    });

    var template = _htmlbarsCompilerCompiler.compile('{{#test}}{{{html}}}{{/test}}');
    var context = { html: '<tr><td>Yo</td></tr>' };
    var fragment = template.render(context, env, { contextualElement: document.createElement('table') }).fragment;

    equal(fragment.firstChild.nextSibling.nextSibling.tagName, 'TR', "root tr is present");
  });

  test("The compiler can handle unescaped tr inside fragment table", function () {
    registerHelper('test', function () {
      return this.yield();
    });

    var template = _htmlbarsCompilerCompiler.compile('<table>{{#test}}{{{html}}}{{/test}}</table>');
    var context = { html: '<tr><td>Yo</td></tr>' };
    var fragment = template.render(context, env, { contextualElement: document.createElement('div') }).fragment;
    var tableNode = fragment.firstChild;

    equal(tableNode.firstChild.nextSibling.tagName, 'TR', "root tr is present");
  });

  test("The compiler can handle simple helpers", function () {
    registerHelper('testing', function (params) {
      return params[0];
    });

    compilesTo('<div>{{testing title}}</div>', '<div>hello</div>', { title: 'hello' });
  });

  test("Helpers propagate the owner render node", function () {
    registerHelper('id', function () {
      return this.yield();
    });

    var template = _htmlbarsCompilerCompiler.compile('<div>{{#id}}<p>{{#id}}<span>{{#id}}{{name}}{{/id}}</span>{{/id}}</p>{{/id}}</div>');
    var context = { name: "Tom Dale" };
    var result = template.render(context, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<div><p><span>Tom Dale</span></p></div>');

    var root = result.root;
    strictEqual(root, root.childNodes[0].ownerNode);
    strictEqual(root, root.childNodes[0].childNodes[0].ownerNode);
    strictEqual(root, root.childNodes[0].childNodes[0].childNodes[0].ownerNode);
  });

  test("The compiler can handle sexpr helpers", function () {
    registerHelper('testing', function (params) {
      return params[0] + "!";
    });

    compilesTo('<div>{{testing (testing "hello")}}</div>', '<div>hello!!</div>', {});
  });

  test("The compiler can handle multiple invocations of sexprs", function () {
    registerHelper('testing', function (params) {
      return "" + params[0] + params[1];
    });

    compilesTo('<div>{{testing (testing "hello" foo) (testing (testing bar "lol") baz)}}</div>', '<div>helloFOOBARlolBAZ</div>', { foo: "FOO", bar: "BAR", baz: "BAZ" });
  });

  test("The compiler passes along the hash arguments", function () {
    registerHelper('testing', function (params, hash) {
      return hash.first + '-' + hash.second;
    });

    compilesTo('<div>{{testing first="one" second="two"}}</div>', '<div>one-two</div>');
  });

  test("second render respects whitespace", function () {
    var template = _htmlbarsCompilerCompiler.compile('Hello {{ foo }} ');
    template.render({}, env, { contextualElement: document.createElement('div') });
    var fragment = template.render({}, env, { contextualElement: document.createElement('div') }).fragment;
    equal(fragment.childNodes.length, 3, 'fragment contains 3 text nodes');
    equal(_htmlbarsTestHelpers.getTextContent(fragment.childNodes[0]), 'Hello ', 'first text node ends with one space character');
    equal(_htmlbarsTestHelpers.getTextContent(fragment.childNodes[2]), ' ', 'last text node contains one space character');
  });

  test("Morphs are escaped correctly", function () {
    registerHelper('testing-unescaped', function (params) {
      return params[0];
    });

    registerHelper('testing-escaped', function (params) {
      if (this.yield) {
        return this.yield();
      }

      return params[0];
    });

    compilesTo('<div>{{{testing-unescaped "<span>hi</span>"}}}</div>', '<div><span>hi</span></div>');
    compilesTo('<div>{{testing-escaped "<hi>"}}</div>', '<div>&lt;hi&gt;</div>');
    compilesTo('<div>{{#testing-escaped}}<em></em>{{/testing-escaped}}</div>', '<div><em></em></div>');
    compilesTo('<div><testing-escaped><em></em></testing-escaped></div>', '<div><em></em></div>');
  });

  test("Attributes can use computed values", function () {
    compilesTo('<a href="{{url}}">linky</a>', '<a href="linky.html">linky</a>', { url: 'linky.html' });
  });

  test("Mountain range of nesting", function () {
    var context = { foo: "FOO", bar: "BAR", baz: "BAZ", boo: "BOO", brew: "BREW", bat: "BAT", flute: "FLUTE", argh: "ARGH" };
    compilesTo('{{foo}}<span></span>', 'FOO<span></span>', context);
    compilesTo('<span></span>{{foo}}', '<span></span>FOO', context);
    compilesTo('<span>{{foo}}</span>{{foo}}', '<span>FOO</span>FOO', context);
    compilesTo('{{foo}}<span>{{foo}}</span>{{foo}}', 'FOO<span>FOO</span>FOO', context);
    compilesTo('{{foo}}<span></span>{{foo}}', 'FOO<span></span>FOO', context);
    compilesTo('{{foo}}<span></span>{{bar}}<span><span><span>{{baz}}</span></span></span>', 'FOO<span></span>BAR<span><span><span>BAZ</span></span></span>', context);
    compilesTo('{{foo}}<span></span>{{bar}}<span>{{argh}}<span><span>{{baz}}</span></span></span>', 'FOO<span></span>BAR<span>ARGH<span><span>BAZ</span></span></span>', context);
    compilesTo('{{foo}}<span>{{bar}}<a>{{baz}}<em>{{boo}}{{brew}}</em>{{bat}}</a></span><span><span>{{flute}}</span></span>{{argh}}', 'FOO<span>BAR<a>BAZ<em>BOOBREW</em>BAT</a></span><span><span>FLUTE</span></span>ARGH', context);
  });

  // test("Attributes can use computed paths", function() {
  //   compilesTo('<a href="{{post.url}}">linky</a>', '<a href="linky.html">linky</a>', { post: { url: 'linky.html' }});
  // });

  /*
  
  test("It is possible to use RESOLVE_IN_ATTR for data binding", function() {
    var callback;
  
    registerHelper('RESOLVE_IN_ATTR', function(parts, options) {
      return boundValue(function(c) {
        callback = c;
        return this[parts[0]];
      }, this);
    });
  
    var object = { url: 'linky.html' };
    var fragment = compilesTo('<a href="{{url}}">linky</a>', '<a href="linky.html">linky</a>', object);
  
    object.url = 'clippy.html';
    callback();
  
    equalTokens(fragment, '<a href="clippy.html">linky</a>');
  
    object.url = 'zippy.html';
    callback();
  
    equalTokens(fragment, '<a href="zippy.html">linky</a>');
  });
  */

  test("Attributes can be populated with helpers that generate a string", function () {
    registerHelper('testing', function (params) {
      return params[0];
    });

    compilesTo('<a href="{{testing url}}">linky</a>', '<a href="linky.html">linky</a>', { url: 'linky.html' });
  });
  /*
  test("A helper can return a stream for the attribute", function() {
    registerHelper('testing', function(path, options) {
      return streamValue(this[path]);
    });
  
    compilesTo('<a href="{{testing url}}">linky</a>', '<a href="linky.html">linky</a>', { url: 'linky.html'});
  });
  */
  test("Attribute helpers take a hash", function () {
    registerHelper('testing', function (params, hash) {
      return hash.path;
    });

    compilesTo('<a href="{{testing path=url}}">linky</a>', '<a href="linky.html">linky</a>', { url: 'linky.html' });
  });
  /*
  test("Attribute helpers can use the hash for data binding", function() {
    var callback;
  
    registerHelper('testing', function(path, hash, options) {
      return boundValue(function(c) {
        callback = c;
        return this[path] ? hash.truthy : hash.falsy;
      }, this);
    });
  
    var object = { on: true };
    var fragment = compilesTo('<div class="{{testing on truthy="yeah" falsy="nope"}}">hi</div>', '<div class="yeah">hi</div>', object);
  
    object.on = false;
    callback();
    equalTokens(fragment, '<div class="nope">hi</div>');
  });
  */
  test("Attributes containing multiple helpers are treated like a block", function () {
    registerHelper('testing', function (params) {
      return params[0];
    });

    compilesTo('<a href="http://{{foo}}/{{testing bar}}/{{testing "baz"}}">linky</a>', '<a href="http://foo.com/bar/baz">linky</a>', { foo: 'foo.com', bar: 'bar' });
  });

  test("Attributes containing a helper are treated like a block", function () {
    expect(2);

    registerHelper('testing', function (params) {
      deepEqual(params, [123]);
      return "example.com";
    });

    compilesTo('<a href="http://{{testing 123}}/index.html">linky</a>', '<a href="http://example.com/index.html">linky</a>', { person: { url: 'example.com' } });
  });
  /*
  test("It is possible to trigger a re-render of an attribute from a child resolution", function() {
    var callback;
  
    registerHelper('RESOLVE_IN_ATTR', function(path, options) {
      return boundValue(function(c) {
        callback = c;
        return this[path];
      }, this);
    });
  
    var context = { url: "example.com" };
    var fragment = compilesTo('<a href="http://{{url}}/index.html">linky</a>', '<a href="http://example.com/index.html">linky</a>', context);
  
    context.url = "www.example.com";
    callback();
  
    equalTokens(fragment, '<a href="http://www.example.com/index.html">linky</a>');
  });
  
  test("A child resolution can pass contextual information to the parent", function() {
    var callback;
  
    registerHelper('RESOLVE_IN_ATTR', function(path, options) {
      return boundValue(function(c) {
        callback = c;
        return this[path];
      }, this);
    });
  
    var context = { url: "example.com" };
    var fragment = compilesTo('<a href="http://{{url}}/index.html">linky</a>', '<a href="http://example.com/index.html">linky</a>', context);
  
    context.url = "www.example.com";
    callback();
  
    equalTokens(fragment, '<a href="http://www.example.com/index.html">linky</a>');
  });
  
  test("Attribute runs can contain helpers", function() {
    var callbacks = [];
  
    registerHelper('RESOLVE_IN_ATTR', function(path, options) {
      return boundValue(function(c) {
        callbacks.push(c);
        return this[path];
      }, this);
    });
  
    registerHelper('testing', function(path, options) {
      return boundValue(function(c) {
        callbacks.push(c);
  
        if (options.paramTypes[0] === 'id') {
          return this[path] + '.html';
        } else {
          return path;
        }
      }, this);
    });
  
    var context = { url: "example.com", path: 'index' };
    var fragment = compilesTo('<a href="http://{{url}}/{{testing path}}/{{testing "linky"}}">linky</a>', '<a href="http://example.com/index.html/linky">linky</a>', context);
  
    context.url = "www.example.com";
    context.path = "yep";
    forEach(callbacks, function(callback) { callback(); });
  
    equalTokens(fragment, '<a href="http://www.example.com/yep.html/linky">linky</a>');
  
    context.url = "nope.example.com";
    context.path = "nope";
    forEach(callbacks, function(callback) { callback(); });
  
    equalTokens(fragment, '<a href="http://nope.example.com/nope.html/linky">linky</a>');
  });
  */
  test("A simple block helper can return the default document fragment", function () {
    registerHelper('testing', function () {
      return this.yield();
    });

    compilesTo('{{#testing}}<div id="test">123</div>{{/testing}}', '<div id="test">123</div>');
  });

  // TODO: NEXT
  test("A simple block helper can return text", function () {
    registerHelper('testing', function () {
      return this.yield();
    });

    compilesTo('{{#testing}}test{{else}}not shown{{/testing}}', 'test');
  });

  test("A block helper can have an else block", function () {
    registerHelper('testing', function (params, hash, options) {
      return options.inverse.yield();
    });

    compilesTo('{{#testing}}Nope{{else}}<div id="test">123</div>{{/testing}}', '<div id="test">123</div>');
  });

  test("A block helper can pass a context to be used in the child", function () {
    registerHelper('testing', function (params, hash, options) {
      var context = { title: 'Rails is omakase' };
      return options.template.render(context);
    });

    compilesTo('{{#testing}}<div id="test">{{title}}</div>{{/testing}}', '<div id="test">Rails is omakase</div>');
  });

  test("Block helpers receive hash arguments", function () {
    registerHelper('testing', function (params, hash) {
      if (hash.truth) {
        return this.yield();
      }
    });

    compilesTo('{{#testing truth=true}}<p>Yep!</p>{{/testing}}{{#testing truth=false}}<p>Nope!</p>{{/testing}}', '<p>Yep!</p><!---->');
  });

  test("Node helpers can modify the node", function () {
    registerHelper('testing', function (params, hash, options) {
      options.element.setAttribute('zomg', 'zomg');
    });

    compilesTo('<div {{testing}}>Node helpers</div>', '<div zomg="zomg">Node helpers</div>');
  });

  test("Node helpers can modify the node after one node appended by top-level helper", function () {
    registerHelper('top-helper', function () {
      return document.createElement('span');
    });
    registerHelper('attr-helper', function (params, hash, options) {
      options.element.setAttribute('zomg', 'zomg');
    });

    compilesTo('<div {{attr-helper}}>Node helpers</div>{{top-helper}}', '<div zomg="zomg">Node helpers</div><span></span>');
  });

  test("Node helpers can modify the node after one node prepended by top-level helper", function () {
    registerHelper('top-helper', function () {
      return document.createElement('span');
    });
    registerHelper('attr-helper', function (params, hash, options) {
      options.element.setAttribute('zomg', 'zomg');
    });

    compilesTo('{{top-helper}}<div {{attr-helper}}>Node helpers</div>', '<span></span><div zomg="zomg">Node helpers</div>');
  });

  test("Node helpers can modify the node after many nodes returned from top-level helper", function () {
    registerHelper('top-helper', function () {
      var frag = document.createDocumentFragment();
      frag.appendChild(document.createElement('span'));
      frag.appendChild(document.createElement('span'));
      return frag;
    });
    registerHelper('attr-helper', function (params, hash, options) {
      options.element.setAttribute('zomg', 'zomg');
    });

    compilesTo('{{top-helper}}<div {{attr-helper}}>Node helpers</div>', '<span></span><span></span><div zomg="zomg">Node helpers</div>');
  });

  test("Node helpers can be used for attribute bindings", function () {
    registerHelper('testing', function (params, hash, options) {
      var value = hash.href,
          element = options.element;

      element.setAttribute('href', value);
    });

    var object = { url: 'linky.html' };
    var template = _htmlbarsCompilerCompiler.compile('<a {{testing href=url}}>linky</a>');
    var result = template.render(object, env);

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<a href="linky.html">linky</a>');
    object.url = 'zippy.html';

    result.dirty();
    result.revalidate();

    _htmlbarsTestHelpers.equalTokens(result.fragment, '<a href="zippy.html">linky</a>');
  });

  test('Components - Called as helpers', function () {
    registerHelper('x-append', function (params, hash) {
      QUnit.deepEqual(hash, { text: "de" });
      this.yield();
    });
    var object = { bar: 'e', baz: 'c' };
    compilesTo('a<x-append text="d{{bar}}">b{{baz}}</x-append>f', 'abcf', object);
  });

  test('Components - Unknown helpers fall back to elements', function () {
    var object = { size: 'med', foo: 'b' };
    compilesTo('<x-bar class="btn-{{size}}">a{{foo}}c</x-bar>', '<x-bar class="btn-med">abc</x-bar>', object);
  });

  test('Components - Text-only attributes work', function () {
    var object = { foo: 'qux' };
    compilesTo('<x-bar id="test">{{foo}}</x-bar>', '<x-bar id="test">qux</x-bar>', object);
  });

  test('Components - Empty components work', function () {
    compilesTo('<x-bar></x-bar>', '<x-bar></x-bar>', {});
  });

  test('Components - Text-only dashed attributes work', function () {
    var object = { foo: 'qux' };
    compilesTo('<x-bar aria-label="foo" id="test">{{foo}}</x-bar>', '<x-bar aria-label="foo" id="test">qux</x-bar>', object);
  });

  test('Repaired text nodes are ensured in the right place', function () {
    var object = { a: "A", b: "B", c: "C", d: "D" };
    compilesTo('{{a}} {{b}}', 'A B', object);
    compilesTo('<div>{{a}}{{b}}{{c}}wat{{d}}</div>', '<div>ABCwatD</div>', object);
    compilesTo('{{a}}{{b}}<img><img><img><img>', 'AB<img><img><img><img>', object);
  });

  test("Simple elements can have dashed attributes", function () {
    var template = _htmlbarsCompilerCompiler.compile("<div aria-label='foo'>content</div>");
    var fragment = template.render({}, env).fragment;

    _htmlbarsTestHelpers.equalTokens(fragment, '<div aria-label="foo">content</div>');
  });

  QUnit.skip("Block params", function () {
    registerHelper('a', function () {
      this.yieldIn(_htmlbarsCompilerCompiler.compile("A({{yield 'W' 'X1'}})"));
    });
    registerHelper('b', function () {
      this.yieldIn(_htmlbarsCompilerCompiler.compile("B({{yield 'X2' 'Y'}})"));
    });
    registerHelper('c', function () {
      this.yieldIn(_htmlbarsCompilerCompiler.compile("C({{yield 'Z'}})"));
    });
    var t = '{{#a as |w x|}}{{w}},{{x}} {{#b as |x y|}}{{x}},{{y}}{{/b}} {{w}},{{x}} {{#c as |z|}}{{x}},{{z}}{{/c}}{{/a}}';
    compilesTo(t, 'A(W,X1 B(X2,Y) W,X1 C(X1,Z))', {});
  });

  test("Block params - Helper should know how many block params it was called with", function () {
    expect(4);

    registerHelper('count-block-params', function (params, hash, options) {
      equal(options.template.arity, hash.count, 'Helpers should receive the correct number of block params in options.template.blockParams.');
    });

    _htmlbarsCompilerCompiler.compile('{{#count-block-params count=0}}{{/count-block-params}}').render({}, env, { contextualElement: document.body });
    _htmlbarsCompilerCompiler.compile('{{#count-block-params count=1 as |x|}}{{/count-block-params}}').render({}, env, { contextualElement: document.body });
    _htmlbarsCompilerCompiler.compile('{{#count-block-params count=2 as |x y|}}{{/count-block-params}}').render({}, env, { contextualElement: document.body });
    _htmlbarsCompilerCompiler.compile('{{#count-block-params count=3 as |x y z|}}{{/count-block-params}}').render({}, env, { contextualElement: document.body });
  });

  QUnit.skip('Block params in HTML syntax', function () {
    var layout = _htmlbarsCompilerCompiler.compile("BAR({{yield 'Xerxes' 'York' 'Zed'}})");

    registerHelper('x-bar', function () {
      this.yieldIn(layout);
    });
    compilesTo('<x-bar as |x y zee|>{{zee}},{{y}},{{x}}</x-bar>', 'BAR(Zed,York,Xerxes)', {});
  });

  test('Block params in HTML syntax - Throws exception if given zero parameters', function () {
    expect(2);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as ||>foo</x-bar>');
    }, /Cannot use zero block parameters: 'as \|\|'/);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as | |>foo</x-bar>');
    }, /Cannot use zero block parameters: 'as \| \|'/);
  });

  test('Block params in HTML syntax - Works with a single parameter', function () {
    registerHelper('x-bar', function () {
      return this.yield(['Xerxes']);
    });
    compilesTo('<x-bar as |x|>{{x}}</x-bar>', 'Xerxes', {});
  });

  test('Block params in HTML syntax - Works with other attributes', function () {
    registerHelper('x-bar', function (params, hash) {
      deepEqual(hash, { firstName: 'Alice', lastName: 'Smith' });
    });
    _htmlbarsCompilerCompiler.compile('<x-bar firstName="Alice" lastName="Smith" as |x y|></x-bar>').render({}, env, { contextualElement: document.body });
  });

  test('Block params in HTML syntax - Ignores whitespace', function () {
    expect(3);

    registerHelper('x-bar', function () {
      return this.yield(['Xerxes', 'York']);
    });
    compilesTo('<x-bar as |x y|>{{x}},{{y}}</x-bar>', 'Xerxes,York', {});
    compilesTo('<x-bar as | x y|>{{x}},{{y}}</x-bar>', 'Xerxes,York', {});
    compilesTo('<x-bar as | x y |>{{x}},{{y}}</x-bar>', 'Xerxes,York', {});
  });

  test('Block params in HTML syntax - Helper should know how many block params it was called with', function () {
    expect(4);

    registerHelper('count-block-params', function (params, hash, options) {
      equal(options.template.arity, parseInt(hash.count, 10), 'Helpers should receive the correct number of block params in options.template.blockParams.');
    });

    _htmlbarsCompilerCompiler.compile('<count-block-params count="0"></count-block-params>').render({ count: 0 }, env, { contextualElement: document.body });
    _htmlbarsCompilerCompiler.compile('<count-block-params count="1" as |x|></count-block-params>').render({ count: 1 }, env, { contextualElement: document.body });
    _htmlbarsCompilerCompiler.compile('<count-block-params count="2" as |x y|></count-block-params>').render({ count: 2 }, env, { contextualElement: document.body });
    _htmlbarsCompilerCompiler.compile('<count-block-params count="3" as |x y z|></count-block-params>').render({ count: 3 }, env, { contextualElement: document.body });
  });

  test("Block params in HTML syntax - Throws an error on invalid block params syntax", function () {
    expect(3);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as |x y>{{x}},{{y}}</x-bar>');
    }, /Invalid block parameters syntax: 'as |x y'/);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as |x| y>{{x}},{{y}}</x-bar>');
    }, /Invalid block parameters syntax: 'as \|x\| y'/);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as |x| y|>{{x}},{{y}}</x-bar>');
    }, /Invalid block parameters syntax: 'as \|x\| y\|'/);
  });

  test("Block params in HTML syntax - Throws an error on invalid identifiers for params", function () {
    expect(3);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as |x foo.bar|></x-bar>');
    }, /Invalid identifier for block parameters: 'foo\.bar' in 'as \|x foo\.bar|'/);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as |x "foo"|></x-bar>');
    }, /Invalid identifier for block parameters: '"foo"' in 'as \|x "foo"|'/);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<x-bar as |foo[bar]|></x-bar>');
    }, /Invalid identifier for block parameters: 'foo\[bar\]' in 'as \|foo\[bar\]\|'/);
  });

  QUnit.module("HTML-based compiler (invalid HTML errors)", {
    beforeEach: commonSetup
  });

  test("A helpful error message is provided for unclosed elements", function () {
    expect(2);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('\n<div class="my-div" \n foo={{bar}}>\n<span>\n</span>\n');
    }, /Unclosed element `div` \(on line 2\)\./);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('\n<div class="my-div">\n<span>\n');
    }, /Unclosed element `span` \(on line 3\)\./);
  });

  test("A helpful error message is provided for unmatched end tags", function () {
    expect(2);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("</p>");
    }, /Closing tag `p` \(on line 1\) without an open tag\./);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<em>{{ foo }}</em> \n {{ bar }}\n</div>");
    }, /Closing tag `div` \(on line 3\) without an open tag\./);
  });

  test("A helpful error message is provided for end tags for void elements", function () {
    expect(3);

    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<input></input>");
    }, /Invalid end tag `input` \(on line 1\) \(void elements cannot have end tags\)./);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n  <input></input>\n</div>");
    }, /Invalid end tag `input` \(on line 2\) \(void elements cannot have end tags\)./);
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("\n\n</br>");
    }, /Invalid end tag `br` \(on line 3\) \(void elements cannot have end tags\)./);
  });

  test("A helpful error message is provided for end tags with attributes", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile('<div>\nSomething\n\n</div foo="bar">');
    }, /Invalid end tag: closing tag must not have attributes, in `div` \(on line 4\)\./);
  });

  test("A helpful error message is provided for mismatched start/end tags", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n<p>\nSomething\n\n</div>");
    }, /Closing tag `div` \(on line 5\) did not match last open tag `p` \(on line 2\)\./);
  });

  test("error line numbers include comment lines", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n<p>\n{{! some comment}}\n\n</div>");
    }, /Closing tag `div` \(on line 5\) did not match last open tag `p` \(on line 2\)\./);
  });

  test("error line numbers include mustache only lines", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n<p>\n{{someProp}}\n\n</div>");
    }, /Closing tag `div` \(on line 5\) did not match last open tag `p` \(on line 2\)\./);
  });

  test("error line numbers include block lines", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n<p>\n{{#some-comment}}\n{{/some-comment}}\n</div>");
    }, /Closing tag `div` \(on line 5\) did not match last open tag `p` \(on line 2\)\./);
  });

  test("error line numbers include whitespace control mustaches", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n<p>\n{{someProp~}}\n\n</div>{{some-comment}}");
    }, /Closing tag `div` \(on line 5\) did not match last open tag `p` \(on line 2\)\./);
  });

  test("error line numbers include multiple mustache lines", function () {
    QUnit.throws(function () {
      _htmlbarsCompilerCompiler.compile("<div>\n<p>\n{{some-comment}}</div>{{some-comment}}");
    }, /Closing tag `div` \(on line 3\) did not match last open tag `p` \(on line 2\)\./);
  });

  if (document.createElement('div').namespaceURI) {

    QUnit.module("HTML-based compiler (output, svg)", {
      beforeEach: commonSetup
    });

    test("Simple elements can have namespaced attributes", function () {
      var template = _htmlbarsCompilerCompiler.compile("<svg xlink:title='svg-title'>content</svg>");
      var svgNode = template.render({}, env).fragment.firstChild;

      _htmlbarsTestHelpers.equalTokens(svgNode, '<svg xlink:title="svg-title">content</svg>');
      equal(svgNode.attributes[0].namespaceURI, 'http://www.w3.org/1999/xlink');
    });

    test("Simple elements can have bound namespaced attributes", function () {
      var template = _htmlbarsCompilerCompiler.compile("<svg xlink:title={{title}}>content</svg>");
      var svgNode = template.render({ title: 'svg-title' }, env).fragment.firstChild;

      _htmlbarsTestHelpers.equalTokens(svgNode, '<svg xlink:title="svg-title">content</svg>');
      equal(svgNode.attributes[0].namespaceURI, 'http://www.w3.org/1999/xlink');
    });

    test("SVG element can have capitalized attributes", function () {
      var template = _htmlbarsCompilerCompiler.compile("<svg viewBox=\"0 0 0 0\"></svg>");
      var svgNode = template.render({}, env).fragment.firstChild;
      _htmlbarsTestHelpers.equalTokens(svgNode, '<svg viewBox=\"0 0 0 0\"></svg>');
    });

    test("The compiler can handle namespaced elements", function () {
      var html = '<svg><path stroke="black" d="M 0 0 L 100 100"></path></svg>';
      var template = _htmlbarsCompilerCompiler.compile(html);
      var svgNode = template.render({}, env).fragment.firstChild;

      equal(svgNode.namespaceURI, svgNamespace, "creates the svg element with a namespace");
      _htmlbarsTestHelpers.equalTokens(svgNode, html);
    });

    test("The compiler sets namespaces on nested namespaced elements", function () {
      var html = '<svg><path stroke="black" d="M 0 0 L 100 100"></path></svg>';
      var template = _htmlbarsCompilerCompiler.compile(html);
      var svgNode = template.render({}, env).fragment.firstChild;

      equal(svgNode.childNodes[0].namespaceURI, svgNamespace, "creates the path element with a namespace");
      _htmlbarsTestHelpers.equalTokens(svgNode, html);
    });

    test("The compiler sets a namespace on an HTML integration point", function () {
      var html = '<svg><foreignObject>Hi</foreignObject></svg>';
      var template = _htmlbarsCompilerCompiler.compile(html);
      var svgNode = template.render({}, env).fragment.firstChild;

      equal(svgNode.namespaceURI, svgNamespace, "creates the svg element with a namespace");
      equal(svgNode.childNodes[0].namespaceURI, svgNamespace, "creates the foreignObject element with a namespace");
      _htmlbarsTestHelpers.equalTokens(svgNode, html);
    });

    test("The compiler does not set a namespace on an element inside an HTML integration point", function () {
      var html = '<svg><foreignObject><div></div></foreignObject></svg>';
      var template = _htmlbarsCompilerCompiler.compile(html);
      var svgNode = template.render({}, env).fragment.firstChild;

      equal(svgNode.childNodes[0].childNodes[0].namespaceURI, xhtmlNamespace, "creates the div inside the foreignObject without a namespace");
      _htmlbarsTestHelpers.equalTokens(svgNode, html);
    });

    test("The compiler pops back to the correct namespace", function () {
      var html = '<svg></svg><svg></svg><div></div>';
      var template = _htmlbarsCompilerCompiler.compile(html);
      var fragment = template.render({}, env).fragment;

      equal(fragment.childNodes[0].namespaceURI, svgNamespace, "creates the first svg element with a namespace");
      equal(fragment.childNodes[1].namespaceURI, svgNamespace, "creates the second svg element with a namespace");
      equal(fragment.childNodes[2].namespaceURI, xhtmlNamespace, "creates the div element without a namespace");
      _htmlbarsTestHelpers.equalTokens(fragment, html);
    });

    test("The compiler pops back to the correct namespace even if exiting last child", function () {
      var html = '<div><svg></svg></div><div></div>';
      var fragment = _htmlbarsCompilerCompiler.compile(html).render({}, env).fragment;

      equal(fragment.firstChild.namespaceURI, xhtmlNamespace, "first div's namespace is xhtmlNamespace");
      equal(fragment.firstChild.firstChild.namespaceURI, svgNamespace, "svg's namespace is svgNamespace");
      equal(fragment.lastChild.namespaceURI, xhtmlNamespace, "last div's namespace is xhtmlNamespace");
    });

    test("The compiler preserves capitalization of tags", function () {
      var html = '<svg><linearGradient id="gradient"></linearGradient></svg>';
      var template = _htmlbarsCompilerCompiler.compile(html);
      var fragment = template.render({}, env).fragment;

      _htmlbarsTestHelpers.equalTokens(fragment, html);
    });

    test("svg can live with hydration", function () {
      var template = _htmlbarsCompilerCompiler.compile('<svg></svg>{{name}}');

      var fragment = template.render({ name: 'Milly' }, env, { contextualElement: document.body }).fragment;

      equal(fragment.childNodes[0].namespaceURI, svgNamespace, "svg namespace inside a block is present");
    });

    test("top-level unsafe morph uses the correct namespace", function () {
      var template = _htmlbarsCompilerCompiler.compile('<svg></svg>{{{foo}}}');
      var fragment = template.render({ foo: '<span>FOO</span>' }, env, { contextualElement: document.body }).fragment;

      equal(_htmlbarsTestHelpers.getTextContent(fragment), 'FOO', 'element from unsafe morph is displayed');
      equal(fragment.childNodes[1].namespaceURI, xhtmlNamespace, 'element from unsafe morph has correct namespace');
    });

    test("nested unsafe morph uses the correct namespace", function () {
      var template = _htmlbarsCompilerCompiler.compile('<svg>{{{foo}}}</svg><div></div>');
      var fragment = template.render({ foo: '<path></path>' }, env, { contextualElement: document.body }).fragment;

      equal(fragment.childNodes[0].childNodes[0].namespaceURI, svgNamespace, 'element from unsafe morph has correct namespace');
    });

    test("svg can take some hydration", function () {
      var template = _htmlbarsCompilerCompiler.compile('<div><svg>{{name}}</svg></div>');

      var fragment = template.render({ name: 'Milly' }, env).fragment;
      equal(fragment.firstChild.childNodes[0].namespaceURI, svgNamespace, "svg namespace inside a block is present");
      _htmlbarsTestHelpers.equalTokens(fragment.firstChild, '<div><svg>Milly</svg></div>', "html is valid");
    });

    test("root svg can take some hydration", function () {
      var template = _htmlbarsCompilerCompiler.compile('<svg>{{name}}</svg>');
      var fragment = template.render({ name: 'Milly' }, env).fragment;
      var svgNode = fragment.firstChild;

      equal(svgNode.namespaceURI, svgNamespace, "svg namespace inside a block is present");
      _htmlbarsTestHelpers.equalTokens(svgNode, '<svg>Milly</svg>', "html is valid");
    });

    test("Block helper allows interior namespace", function () {
      var isTrue = true;

      registerHelper('testing', function (params, hash, options) {
        if (isTrue) {
          return this.yield();
        } else {
          return options.inverse.yield();
        }
      });

      var template = _htmlbarsCompilerCompiler.compile('{{#testing}}<svg></svg>{{else}}<div><svg></svg></div>{{/testing}}');

      var fragment = template.render({ isTrue: true }, env, { contextualElement: document.body }).fragment;
      equal(fragment.firstChild.nextSibling.namespaceURI, svgNamespace, "svg namespace inside a block is present");

      isTrue = false;
      fragment = template.render({ isTrue: false }, env, { contextualElement: document.body }).fragment;
      equal(fragment.firstChild.nextSibling.namespaceURI, xhtmlNamespace, "inverse block path has a normal namespace");
      equal(fragment.firstChild.nextSibling.firstChild.namespaceURI, svgNamespace, "svg namespace inside an element inside a block is present");
    });

    test("Block helper allows namespace to bleed through", function () {
      registerHelper('testing', function () {
        return this.yield();
      });

      var template = _htmlbarsCompilerCompiler.compile('<div><svg>{{#testing}}<circle />{{/testing}}</svg></div>');

      var fragment = template.render({ isTrue: true }, env).fragment;
      var svgNode = fragment.firstChild.firstChild;
      equal(svgNode.namespaceURI, svgNamespace, "svg tag has an svg namespace");
      equal(svgNode.childNodes[0].namespaceURI, svgNamespace, "circle tag inside block inside svg has an svg namespace");
    });

    test("Block helper with root svg allows namespace to bleed through", function () {
      registerHelper('testing', function () {
        return this.yield();
      });

      var template = _htmlbarsCompilerCompiler.compile('<svg>{{#testing}}<circle />{{/testing}}</svg>');

      var fragment = template.render({ isTrue: true }, env).fragment;
      var svgNode = fragment.firstChild;
      equal(svgNode.namespaceURI, svgNamespace, "svg tag has an svg namespace");
      equal(svgNode.childNodes[0].namespaceURI, svgNamespace, "circle tag inside block inside svg has an svg namespace");
    });

    test("Block helper with root foreignObject allows namespace to bleed through", function () {
      registerHelper('testing', function () {
        return this.yield();
      });

      var template = _htmlbarsCompilerCompiler.compile('<foreignObject>{{#testing}}<div></div>{{/testing}}</foreignObject>');

      var fragment = template.render({ isTrue: true }, env, { contextualElement: document.createElementNS(svgNamespace, 'svg') }).fragment;
      var svgNode = fragment.firstChild;
      equal(svgNode.namespaceURI, svgNamespace, "foreignObject tag has an svg namespace");
      equal(svgNode.childNodes[0].namespaceURI, xhtmlNamespace, "div inside morph and foreignObject has xhtml namespace");
    });
  }
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-compiler-tests/html-compiler-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/html-compiler-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/html-compiler-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWwtY29tcGlsZXItdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUNqRCxPQUFLLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzlGLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLG1FQUFtRSxDQUFDLENBQUM7R0FDdEYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWwtY29tcGlsZXItdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sLWNvbXBpbGVyLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWwtY29tcGlsZXItdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-compiler-tests/htmlbars-compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBQ2pELE9BQUssQ0FBQyxJQUFJLENBQUMsaUVBQWlFLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDN0YsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsa0VBQWtFLENBQUMsQ0FBQztHQUNyRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1jb21waWxlci10ZXN0cycpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-compiler-tests/htmlbars-compiler/compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2NvbXBpbGVyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0FBQ25FLE9BQUssQ0FBQyxJQUFJLENBQUMsMEVBQTBFLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdEcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsMkVBQTJFLENBQUMsQ0FBQztHQUM5RixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvY29tcGlsZXIuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlcicpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2NvbXBpbGVyLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-compiler-tests/htmlbars-compiler/fragment-javascript-compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/fragment-javascript-compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/fragment-javascript-compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LWphdmFzY3JpcHQtY29tcGlsZXIuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLG9EQUFvRCxDQUFDLENBQUM7QUFDbkUsT0FBSyxDQUFDLElBQUksQ0FBQyw4RkFBOEYsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMxSCxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSwrRkFBK0YsQ0FBQyxDQUFDO0dBQ2xILENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlci9mcmFnbWVudC1qYXZhc2NyaXB0LWNvbXBpbGVyLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXInKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LWphdmFzY3JpcHQtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LWphdmFzY3JpcHQtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-compiler-tests/htmlbars-compiler/fragment-opcode-compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/fragment-opcode-compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/fragment-opcode-compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LW9wY29kZS1jb21waWxlci5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsb0RBQW9ELENBQUMsQ0FBQztBQUNuRSxPQUFLLENBQUMsSUFBSSxDQUFDLDBGQUEwRixFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3RILFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDJGQUEyRixDQUFDLENBQUM7R0FDOUcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LW9wY29kZS1jb21waWxlci5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlci9mcmFnbWVudC1vcGNvZGUtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2ZyYWdtZW50LW9wY29kZS1jb21waWxlci5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-compiler-tests/htmlbars-compiler/hydration-javascript-compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/hydration-javascript-compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/hydration-javascript-compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1qYXZhc2NyaXB0LWNvbXBpbGVyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0FBQ25FLE9BQUssQ0FBQyxJQUFJLENBQUMsK0ZBQStGLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDM0gsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsZ0dBQWdHLENBQUMsQ0FBQztHQUNuSCxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvaHlkcmF0aW9uLWphdmFzY3JpcHQtY29tcGlsZXIuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlcicpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvaHlkcmF0aW9uLWphdmFzY3JpcHQtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1qYXZhc2NyaXB0LWNvbXBpbGVyLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-compiler-tests/htmlbars-compiler/hydration-opcode-compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/hydration-opcode-compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/hydration-opcode-compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXIuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLG9EQUFvRCxDQUFDLENBQUM7QUFDbkUsT0FBSyxDQUFDLElBQUksQ0FBQywyRkFBMkYsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN2SCxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw0RkFBNEYsQ0FBQyxDQUFDO0dBQy9HLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlci9oeWRyYXRpb24tb3Bjb2RlLWNvbXBpbGVyLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXInKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-compiler-tests/htmlbars-compiler/template-compiler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/template-compiler.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/template-compiler.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3RlbXBsYXRlLWNvbXBpbGVyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0FBQ25FLE9BQUssQ0FBQyxJQUFJLENBQUMsbUZBQW1GLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDL0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsb0ZBQW9GLENBQUMsQ0FBQztHQUN2RyxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvdGVtcGxhdGUtY29tcGlsZXIuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlcicpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvdGVtcGxhdGUtY29tcGlsZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3RlbXBsYXRlLWNvbXBpbGVyLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-compiler-tests/htmlbars-compiler/template-visitor.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/template-visitor.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/template-visitor.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3RlbXBsYXRlLXZpc2l0b3IuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLG9EQUFvRCxDQUFDLENBQUM7QUFDbkUsT0FBSyxDQUFDLElBQUksQ0FBQyxrRkFBa0YsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUM5RyxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxtRkFBbUYsQ0FBQyxDQUFDO0dBQ3RHLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlci90ZW1wbGF0ZS12aXNpdG9yLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXInKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3RlbXBsYXRlLXZpc2l0b3IuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3RlbXBsYXRlLXZpc2l0b3IuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-compiler-tests/htmlbars-compiler/utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests/htmlbars-compiler');
  QUnit.test('htmlbars-compiler-tests/htmlbars-compiler/utils.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/htmlbars-compiler/utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3V0aWxzLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0FBQ25FLE9BQUssQ0FBQyxJQUFJLENBQUMsdUVBQXVFLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDbkcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsd0VBQXdFLENBQUMsQ0FBQztHQUMzRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvdXRpbHMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1jb21waWxlci10ZXN0cy9odG1sYmFycy1jb21waWxlcicpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvaHRtbGJhcnMtY29tcGlsZXIvdXRpbHMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h0bWxiYXJzLWNvbXBpbGVyL3V0aWxzLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define("htmlbars-compiler-tests/hydration-opcode-compiler-test", ["exports", "../htmlbars-compiler/hydration-opcode-compiler", "../htmlbars-syntax/parser", "../htmlbars-compiler/compiler", "../htmlbars-util/template-utils"], function (exports, _htmlbarsCompilerHydrationOpcodeCompiler, _htmlbarsSyntaxParser, _htmlbarsCompilerCompiler, _htmlbarsUtilTemplateUtils) {

  function opcodesFor(html, options) {
    var ast = _htmlbarsSyntaxParser.preprocess(html, options),
        compiler1 = new _htmlbarsCompilerHydrationOpcodeCompiler.default(options);
    compiler1.compile(ast);
    return compiler1.opcodes;
  }

  QUnit.module("HydrationOpcodeCompiler opcode generation");

  function loc(startCol, endCol) {
    var startLine = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
    var endLine = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];
    var source = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

    return ['loc', [source, [startLine, startCol], [endLine, endCol]]];
  }

  function sloc(startCol, endCol) {
    var startLine = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
    var endLine = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];
    var source = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

    return ['loc', [source, [startLine, startCol], [endLine, endCol]]];
  }

  function equalOpcodes(actual, expected) {
    var equiv = QUnit.equiv(actual, expected);

    var exString = "";
    var acString = "";
    var i = 0;

    for (; i < actual.length; i++) {
      var a = actual[i];
      var e = expected && expected[i];

      a = a ? JSON.stringify(a).replace(/"/g, "'") : "";
      e = e ? JSON.stringify(e).replace(/"/g, "'") : "";

      exString += e + "\n";
      acString += a + "\n";
    }

    if (expected) {
      for (; i < expected.length; i++) {
        var e = expected[i];

        e = e ? JSON.stringify(e).replace(/"/g, "'") : "";

        acString += "\n";
        exString += e + "\n";
      }
    }

    QUnit.push(equiv, acString, exString);
  }

  function equalStatements(actual, expected) {
    equalOpcodes(actual, expected);
  }

  function testCompile(string, templateSource, opcodes) {
    for (var _len = arguments.length, statementList = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      statementList[_key - 3] = arguments[_key];
    }

    var template, childTemplates;
    QUnit.module("Compiling " + string + ": " + templateSource, {
      setup: function () {
        template = _htmlbarsCompilerCompiler.compile(templateSource).raw;
        childTemplates = template.templates;
      }
    });

    test("opcodes", function () {
      equalOpcodes(opcodesFor(templateSource), opcodes);
    });

    var statements = statementList.shift();

    test("statements for the root template", function () {
      equalStatements(template.statements, statements);
    });

    test("correct list of child templates", function () {
      equal(template.templates.length, statementList.length, "list of child templates should match the expected list of statements");
    });

    for (var i = 0, l = statementList.length; i < l; i++) {
      statementTest(statementList, i);
    }

    function statementTest(list, i) {
      test("statements for template " + i, function () {
        equalStatements(childTemplates[i].statements, list[i]);
      });
    }
  }

  var s = {
    content: function (path, loc) {
      return _htmlbarsUtilTemplateUtils.buildStatement('content', path, sloc.apply(undefined, loc));
    },

    block: function (name, loc) {
      var template = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
      var params = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];
      var hash = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
      var inverse = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];

      return _htmlbarsUtilTemplateUtils.buildStatement('block', name, params, hash, template, inverse, sloc.apply(undefined, loc));
    },

    inline: function (name) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
      var hash = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
      var loc = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

      return _htmlbarsUtilTemplateUtils.buildStatement('inline', name, params, hash, sloc.apply(undefined, loc));
    },

    element: function (name) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
      var hash = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
      var loc = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

      return _htmlbarsUtilTemplateUtils.buildStatement('element', name, params, hash, sloc.apply(undefined, loc));
    },

    attribute: function (name, expression) {
      return _htmlbarsUtilTemplateUtils.buildStatement('attribute', name, expression);
    },

    component: function (path) {
      var attrs = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
      var template = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      return _htmlbarsUtilTemplateUtils.buildStatement('component', path, attrs, template);
    },

    get: function (path, loc) {
      return _htmlbarsUtilTemplateUtils.buildStatement('get', path, sloc.apply(undefined, loc));
    },

    concat: function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _htmlbarsUtilTemplateUtils.buildStatement('concat', args);
    },

    subexpr: function (name) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
      var hash = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
      var loc = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

      return _htmlbarsUtilTemplateUtils.buildStatement('subexpr', name, params, hash, sloc.apply(undefined, loc));
    }
  };

  QUnit.module("Compiling <my-component> with isStatic plugin: <my-component />");

  test("isStatic skips boundary nodes", function () {
    var ast = _htmlbarsSyntaxParser.preprocess('<my-component />');
    ast.body[0].isStatic = true;
    var compiler1 = new _htmlbarsCompilerHydrationOpcodeCompiler.default();
    compiler1.compile(ast);
    equalOpcodes(compiler1.opcodes, [['createMorph', [0, [], 0, 0, true]], ['prepareObject', [0]], ['pushLiteral', ['my-component']], ['printComponentHook', [0, 0, ['loc', [null, [1, 0], [1, 16]]]]]]);
  });

  testCompile("simple example", "<div>{{foo}} bar {{baz}}</div>", [["consumeParent", [0]], ["shareElement", [0]], ["createMorph", [0, [0], 0, 0, true]], ["createMorph", [1, [0], 2, 2, true]], ["pushLiteral", ["foo"]], ["printContentHook", [loc(5, 12)]], ["pushLiteral", ["baz"]], ["printContentHook", [loc(17, 24)]], ["popParent", []]], [s.content('foo', [5, 12]), s.content('baz', [17, 24])]);

  testCompile("simple block", "<div>{{#foo}}{{/foo}}</div>", [["consumeParent", [0]], ["createMorph", [0, [0], 0, 0, true]], ["prepareObject", [0]], ["prepareArray", [0]], ["pushLiteral", ["foo"]], ["printBlockHook", [0, null, loc(5, 21)]], ["popParent", []]], [s.block('foo', [5, 21], 0)], []);

  testCompile("simple block with block params", "<div>{{#foo as |bar baz|}}{{/foo}}</div>", [["consumeParent", [0]], ["createMorph", [0, [0], 0, 0, true]], ["prepareObject", [0]], ["prepareArray", [0]], ["pushLiteral", ["foo"]], ["printBlockHook", [0, null, loc(5, 34)]], ["popParent", []]], [s.block('foo', [5, 34], 0)], []);

  testCompile("element with a sole mustache child", "<div>{{foo}}</div>", [["consumeParent", [0]], ["createMorph", [0, [0], 0, 0, true]], ["pushLiteral", ["foo"]], ["printContentHook", [loc(5, 12)]], ["popParent", []]], [s.content('foo', [5, 12])]);

  testCompile("element with a mustache between two text nodes", "<div> {{foo}} </div>", [["consumeParent", [0]], ["createMorph", [0, [0], 1, 1, true]], ["pushLiteral", ["foo"]], ["printContentHook", [loc(6, 13)]], ["popParent", []]], [s.content('foo', [6, 13])]);

  testCompile("mustache two elements deep", "<div><div>{{foo}}</div></div>", [["consumeParent", [0]], ["consumeParent", [0]], ["createMorph", [0, [0, 0], 0, 0, true]], ["pushLiteral", ["foo"]], ["printContentHook", [loc(10, 17)]], ["popParent", []], ["popParent", []]], [s.content('foo', [10, 17])]);

  testCompile("two sibling elements with mustaches", "<div>{{foo}}</div><div>{{bar}}</div>", [["consumeParent", [0]], ["createMorph", [0, [0], 0, 0, true]], ["pushLiteral", ["foo"]], ["printContentHook", [loc(5, 12)]], ["popParent", []], ["consumeParent", [1]], ["createMorph", [1, [1], 0, 0, true]], ["pushLiteral", ["bar"]], ["printContentHook", [loc(23, 30)]], ["popParent", []]], [s.content('foo', [5, 12]), s.content('bar', [23, 30])]);

  testCompile("mustaches at the root", "{{foo}} {{bar}}", [["createMorph", [0, [], 0, 0, true]], ["createMorph", [1, [], 2, 2, true]], ["openBoundary", []], ["pushLiteral", ["foo"]], ["printContentHook", [loc(0, 7)]], ["closeBoundary", []], ["pushLiteral", ["bar"]], ["printContentHook", [loc(8, 15)]]], [s.content('foo', [0, 7]), s.content('bar', [8, 15])]);

  testCompile("back to back mustaches should have a text node inserted between them", "<div>{{foo}}{{bar}}{{baz}}wat{{qux}}</div>", [["consumeParent", [0]], ["shareElement", [0]], ["createMorph", [0, [0], 0, 0, true]], ["createMorph", [1, [0], 1, 1, true]], ["createMorph", [2, [0], 2, 2, true]], ["createMorph", [3, [0], 4, 4, true]], ["pushLiteral", ["foo"]], ["printContentHook", [loc(5, 12)]], ["pushLiteral", ["bar"]], ["printContentHook", [loc(12, 19)]], ["pushLiteral", ["baz"]], ["printContentHook", [loc(19, 26)]], ["pushLiteral", ["qux"]], ["printContentHook", [loc(29, 36)]], ["popParent", []]], [s.content('foo', [5, 12]), s.content('bar', [12, 19]), s.content('baz', [19, 26]), s.content('qux', [29, 36])]);

  testCompile("helper usage", "<div>{{foo 'bar' baz.bat true 3.14}}</div>", [["consumeParent", [0]], ["createMorph", [0, [0], 0, 0, true]], ["prepareObject", [0]], ["pushLiteral", [3.14]], ["pushLiteral", [true]], ["pushGetHook", ["baz.bat", loc(17, 24)]], ["pushLiteral", ["bar"]], ["prepareArray", [4]], ["pushLiteral", ["foo"]], ["printInlineHook", [loc(5, 36)]], ["popParent", []]], [s.inline('foo', ['bar', s.get('baz.bat', [17, 24]), true, 3.14], [], [5, 36])]);

  testCompile("node mustache", "<div {{foo}}></div>", [["consumeParent", [0]], ["prepareObject", [0]], ["prepareArray", [0]], ["pushLiteral", ["foo"]], ["shareElement", [0]], ["createElementMorph", [0, 0]], ["printElementHook", [loc(5, 12)]], ["popParent", []]], [s.element('foo', [], [], [5, 12])]);

  testCompile("node helper", "<div {{foo 'bar'}}></div>", [["consumeParent", [0]], ["prepareObject", [0]], ["pushLiteral", ["bar"]], ["prepareArray", [1]], ["pushLiteral", ["foo"]], ["shareElement", [0]], ["createElementMorph", [0, 0]], ["printElementHook", [loc(5, 18)]], ["popParent", []]], [s.element('foo', ['bar'], [], [5, 18])]);

  testCompile("attribute mustache", "<div class='before {{foo}} after'></div>", [["consumeParent", [0]], ["pushLiteral", [" after"]], ["pushGetHook", ["foo", loc(21, 24)]], ["pushLiteral", ["before "]], ["prepareArray", [3]], ["pushConcatHook", [0]], ["pushLiteral", ["class"]], ["shareElement", [0]], ["createAttrMorph", [0, 0, "class", true, null]], ["printAttributeHook", []], ["popParent", []]], [s.attribute('class', s.concat('before ', s.get('foo', [21, 24]), ' after'))]);

  testCompile("quoted attribute mustache", "<div class='{{foo}}'></div>", [["consumeParent", [0]], ["pushGetHook", ["foo", loc(14, 17)]], ["prepareArray", [1]], ["pushConcatHook", [0]], ["pushLiteral", ["class"]], ["shareElement", [0]], ["createAttrMorph", [0, 0, "class", true, null]], ["printAttributeHook", []], ["popParent", []]], [s.attribute('class', s.concat(s.get('foo', [14, 17])))]);

  testCompile("safe bare attribute mustache", "<div class={{foo}}></div>", [["consumeParent", [0]], ["pushGetHook", ["foo", loc(13, 16)]], ["pushLiteral", ["class"]], ["shareElement", [0]], ["createAttrMorph", [0, 0, "class", true, null]], ["printAttributeHook", []], ["popParent", []]], [s.attribute('class', s.get('foo', [13, 16]))]);

  testCompile("unsafe bare attribute mustache", "<div class={{{foo}}}></div>", [["consumeParent", [0]], ["pushGetHook", ["foo", loc(14, 17)]], ["pushLiteral", ["class"]], ["shareElement", [0]], ["createAttrMorph", [0, 0, "class", false, null]], ["printAttributeHook", []], ["popParent", []]], [s.attribute('class', s.get('foo', [14, 17]))]);

  testCompile("attribute helper", "<div class='before {{foo 'bar'}} after'></div>", [["consumeParent", [0]], ["pushLiteral", [" after"]], ["prepareObject", [0]], ["pushLiteral", ["bar"]], ["prepareArray", [1]], ["pushLiteral", ["foo"]], ["pushSexprHook", [loc(19, 32)]], ["pushLiteral", ["before "]], ["prepareArray", [3]], ["pushConcatHook", [0]], ["pushLiteral", ["class"]], ["shareElement", [0]], ["createAttrMorph", [0, 0, "class", true, null]], ["printAttributeHook", []], ["popParent", []]], [s.attribute('class', s.concat('before ', s.subexpr('foo', ['bar'], [], [19, 32]), ' after'))]);

  testCompile("attribute helpers", "<div class='before {{foo 'bar'}} after' id={{bare}}></div>{{morphThing}}<span class='{{ohMy}}'></span>", [["consumeParent", [0]], ["shareElement", [0]], ["pushLiteral", [" after"]], ["prepareObject", [0]], ["pushLiteral", ["bar"]], ["prepareArray", [1]], ["pushLiteral", ["foo"]], ["pushSexprHook", [loc(19, 32)]], ["pushLiteral", ["before "]], ["prepareArray", [3]], ["pushConcatHook", [0]], ["pushLiteral", ["class"]], ["createAttrMorph", [0, 0, "class", true, null]], ["printAttributeHook", []], ["pushGetHook", ['bare', loc(45, 49)]], ["pushLiteral", ['id']], ["createAttrMorph", [1, 0, 'id', true, null]], ["printAttributeHook", []], ["popParent", []], ["createMorph", [2, [], 1, 1, true]], ["pushLiteral", ['morphThing']], ["printContentHook", [loc(58, 72)]], ["consumeParent", [2]], ["pushGetHook", ['ohMy', loc(87, 91)]], ["prepareArray", [1]], ["pushConcatHook", [3]], ["pushLiteral", ['class']], ["shareElement", [1]], ["createAttrMorph", [3, 1, 'class', true, null]], ["printAttributeHook", []], ["popParent", []]], [s.attribute('class', s.concat('before ', s.subexpr('foo', ['bar'], [], [19, 32]), ' after')), s.attribute('id', s.get('bare', [45, 49])), s.content('morphThing', [58, 72]), s.attribute('class', s.concat(s.get('ohMy', [87, 91])))]);

  testCompile('component helpers', "<my-component>hello</my-component>", [["createMorph", [0, [], 0, 0, true]], ["openBoundary", []], ["closeBoundary", []], ["prepareObject", [0]], ["pushLiteral", ["my-component"]], ["printComponentHook", [0, 0, loc(0, 34)]]], [s.component('my-component', [], 0)], []);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXItdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLFdBQVMsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDakMsUUFBSSxHQUFHLEdBQUcsc0JBTEgsVUFBVSxDQUtJLElBQUksRUFBRSxPQUFPLENBQUM7UUFDL0IsU0FBUyxHQUFHLHFEQUE0QixPQUFPLENBQUMsQ0FBQztBQUNyRCxhQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLFdBQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQztHQUMxQjs7QUFFRCxPQUFLLENBQUMsTUFBTSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7O0FBRTFELFdBQVMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQXVDO1FBQXJDLFNBQVMseURBQUMsQ0FBQztRQUFFLE9BQU8seURBQUMsQ0FBQztRQUFFLE1BQU0seURBQUMsSUFBSTs7QUFDaEUsV0FBTyxDQUNMLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUMxRCxDQUFDO0dBQ0g7O0FBRUQsV0FBUyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBdUM7UUFBckMsU0FBUyx5REFBQyxDQUFDO1FBQUUsT0FBTyx5REFBQyxDQUFDO1FBQUUsTUFBTSx5REFBQyxJQUFJOztBQUNqRSxXQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNwRTs7QUFFRCxXQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO0FBQ3RDLFFBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFB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QUFvQyxFQUFFLENBQ3JFLENBQUUsYUFBYSxFQUFFLENBQUUsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBRSxDQUFFLEVBQ3pDLENBQUUsY0FBYyxFQUFFLEVBQUcsQ0FBRSxFQUN2QixDQUFFLGVBQWUsRUFBRSxFQUFHLENBQUUsRUFDeEIsQ0FBRSxlQUFlLEVBQUUsQ0FBRSxDQUFDLENBQUUsQ0FBRSxFQUMxQixDQUFFLGFBQWEsRUFBRSxDQUFFLGNBQWMsQ0FBRSxDQUFFLEVBQ3JDLENBQUUsb0JBQW9CLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUUsQ0FBRSxDQUMvQyxFQUFFLENBQ0QsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUNuQyxFQUFFLEVBQUUsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXItdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIeWRyYXRpb25PcGNvZGVDb21waWxlciBmcm9tIFwiLi4vaHRtbGJhcnMtY29tcGlsZXIvaHlkcmF0aW9uLW9wY29kZS1jb21waWxlclwiO1xuaW1wb3J0IHsgcHJlcHJvY2VzcyB9IGZyb20gXCIuLi9odG1sYmFycy1zeW50YXgvcGFyc2VyXCI7XG5pbXBvcnQgeyBjb21waWxlIH0gZnJvbSBcIi4uL2h0bWxiYXJzLWNvbXBpbGVyL2NvbXBpbGVyXCI7XG5pbXBvcnQgeyBidWlsZFN0YXRlbWVudCB9IGZyb20gXCIuLi9odG1sYmFycy11dGlsL3RlbXBsYXRlLXV0aWxzXCI7XG5cbmZ1bmN0aW9uIG9wY29kZXNGb3IoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgYXN0ID0gcHJlcHJvY2VzcyhodG1sLCBvcHRpb25zKSxcbiAgICAgIGNvbXBpbGVyMSA9IG5ldyBIeWRyYXRpb25PcGNvZGVDb21waWxlcihvcHRpb25zKTtcbiAgY29tcGlsZXIxLmNvbXBpbGUoYXN0KTtcbiAgcmV0dXJuIGNvbXBpbGVyMS5vcGNvZGVzO1xufVxuXG5RVW5pdC5tb2R1bGUoXCJIeWRyYXRpb25PcGNvZGVDb21waWxlciBvcGNvZGUgZ2VuZXJhdGlvblwiKTtcblxuZnVuY3Rpb24gbG9jKHN0YXJ0Q29sLCBlbmRDb2wsIHN0YXJ0TGluZT0xLCBlbmRMaW5lPTEsIHNvdXJjZT1udWxsKSB7XG4gIHJldHVybiBbXG4gICAgJ2xvYycsIFtzb3VyY2UsIFtzdGFydExpbmUsIHN0YXJ0Q29sXSwgW2VuZExpbmUsIGVuZENvbF1dXG4gIF07XG59XG5cbmZ1bmN0aW9uIHNsb2Moc3RhcnRDb2wsIGVuZENvbCwgc3RhcnRMaW5lPTEsIGVuZExpbmU9MSwgc291cmNlPW51bGwpIHtcbiAgcmV0dXJuIFsnbG9jJywgW3NvdXJjZSwgW3N0YXJ0TGluZSwgc3RhcnRDb2xdLCBbZW5kTGluZSwgZW5kQ29sXV1dO1xufVxuXG5mdW5jdGlvbiBlcXVhbE9wY29kZXMoYWN0dWFsLCBleHBlY3RlZCkge1xuICBsZXQgZXF1aXYgPSBRVW5pdC5lcXVpdihhY3R1YWwsIGV4cGVjdGVkKTtcblxuICBsZXQgZXhTdHJpbmcgPSBcIlwiO1xuICBsZXQgYWNTdHJpbmcgPSBcIlwiO1xuICBsZXQgaSA9IDA7XG5cbiAgZm9yICg7IGk8YWN0dWFsLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGEgPSBhY3R1YWxbaV07XG4gICAgbGV0IGUgPSBleHBlY3RlZCAmJiBleHBlY3RlZFtpXTtcblxuICAgIGEgPSBhID8gSlNPTi5zdHJpbmdpZnkoYSkucmVwbGFjZSgvXCIvZywgXCInXCIpIDogXCJcIjtcbiAgICBlID0gZSA/IEpTT04uc3RyaW5naWZ5KGUpLnJlcGxhY2UoL1wiL2csIFwiJ1wiKSA6IFwiXCI7XG5cbiAgICBleFN0cmluZyArPSBlICsgXCJcXG5cIjtcbiAgICBhY1N0cmluZyArPSBhICsgXCJcXG5cIjtcbiAgfVxuXG4gIGlmIChleHBlY3RlZCkge1xuICAgIGZvciAoOyBpPGV4cGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZSA9IGV4cGVjdGVkW2ldO1xuXG4gICAgICBlID0gZSA/IEpTT04uc3RyaW5naWZ5KGUpLnJlcGxhY2UoL1wiL2csIFwiJ1wiKSA6IFwiXCI7XG5cbiAgICAgIGFjU3RyaW5nICs9IFwiXFxuXCI7XG4gICAgICBleFN0cmluZyArPSBlICsgXCJcXG5cIjtcbiAgICB9XG4gIH1cblxuICBRVW5pdC5wdXNoKGVxdWl2LCBhY1N0cmluZywgZXhTdHJpbmcpO1xufVxuXG5mdW5jdGlvbiBlcXVhbFN0YXRlbWVudHMoYWN0dWFsLCBleHBlY3RlZCkge1xuICBlcXVhbE9wY29kZXMoYWN0dWFsLCBleHBlY3RlZCk7XG59XG5cbmZ1bmN0aW9uIHRlc3RDb21waWxlKHN0cmluZywgdGVtcGxhdGVTb3VyY2UsIG9wY29kZXMsIC4uLnN0YXRlbWVudExpc3QpIHtcbiAgdmFyIHRlbXBsYXRlLCBjaGlsZFRlbXBsYXRlcztcbiAgUVVuaXQubW9kdWxlKGBDb21waWxpbmcgJHtzdHJpbmd9OiAke3RlbXBsYXRlU291cmNlfWAsIHtcbiAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGNvbXBpbGUodGVtcGxhdGVTb3VyY2UpLnJhdztcbiAgICAgIGNoaWxkVGVtcGxhdGVzID0gdGVtcGxhdGUudGVtcGxhdGVzO1xuICAgIH1cbiAgfSk7XG5cbiAgdGVzdChcIm9wY29kZXNcIiwgZnVuY3Rpb24oKSB7XG4gICAgZXF1YWxPcGNvZGVzKG9wY29kZXNGb3IodGVtcGxhdGVTb3VyY2UpLCBvcGNvZGVzKTtcbiAgfSk7XG5cbiAgbGV0IHN0YXRlbWVudHMgPSBzdGF0ZW1lbnRMaXN0LnNoaWZ0KCk7XG5cbiAgdGVzdChcInN0YXRlbWVudHMgZm9yIHRoZSByb290IHRlbXBsYXRlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGVxdWFsU3RhdGVtZW50cyh0ZW1wbGF0ZS5zdGF0ZW1lbnRzLCBzdGF0ZW1lbnRzKTtcbiAgfSk7XG5cbiAgdGVzdChcImNvcnJlY3QgbGlzdCBvZiBjaGlsZCB0ZW1wbGF0ZXNcIiwgZnVuY3Rpb24oKSB7XG4gICAgZXF1YWwodGVtcGxhdGUudGVtcGxhdGVzLmxlbmd0aCwgc3RhdGVtZW50TGlzdC5sZW5ndGgsIFwibGlzdCBvZiBjaGlsZCB0ZW1wbGF0ZXMgc2hvdWxkIG1hdGNoIHRoZSBleHBlY3RlZCBsaXN0IG9mIHN0YXRlbWVudHNcIik7XG4gIH0pO1xuXG4gIGZvciAobGV0IGk9MCwgbD1zdGF0ZW1lbnRMaXN0Lmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICBzdGF0ZW1lbnRUZXN0KHN0YXRlbWVudExpc3QsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhdGVtZW50VGVzdChsaXN0LCBpKSB7XG4gICAgdGVzdChgc3RhdGVtZW50cyBmb3IgdGVtcGxhdGUgJHtpfWAsIGZ1bmN0aW9uKCkge1xuICAgICAgZXF1YWxTdGF0ZW1lbnRzKGNoaWxkVGVtcGxhdGVzW2ldLnN0YXRlbWVudHMsIGxpc3RbaV0pO1xuICAgIH0pO1xuICB9XG59XG5cbmxldCBzID0ge1xuICBjb250ZW50KHBhdGgsIGxvYykge1xuICAgIHJldHVybiBidWlsZFN0YXRlbWVudCgnY29udGVudCcsIHBhdGgsIHNsb2MoLi4ubG9jKSk7XG4gIH0sXG5cbiAgYmxvY2sobmFtZSwgbG9jLCB0ZW1wbGF0ZT1udWxsLCBwYXJhbXM9W10sIGhhc2g9W10sIGludmVyc2U9bnVsbCkge1xuICAgIHJldHVybiBidWlsZFN0YXRlbWVudCgnYmxvY2snLCBuYW1lLCBwYXJhbXMsIGhhc2gsIHRlbXBsYXRlLCBpbnZlcnNlLCBzbG9jKC4uLmxvYykpO1xuICB9LFxuXG4gIGlubGluZShuYW1lLCBwYXJhbXM9W10sIGhhc2g9W10sIGxvYz1udWxsKSB7XG4gICAgcmV0dXJuIGJ1aWxkU3RhdGVtZW50KCdpbmxpbmUnLCBuYW1lLCBwYXJhbXMsIGhhc2gsIHNsb2MoLi4ubG9jKSk7XG4gIH0sXG5cbiAgZWxlbWVudChuYW1lLCBwYXJhbXM9W10sIGhhc2g9W10sIGxvYz1udWxsKSB7XG4gICAgcmV0dXJuIGJ1aWxkU3RhdGVtZW50KCdlbGVtZW50JywgbmFtZSwgcGFyYW1zLCBoYXNoLCBzbG9jKC4uLmxvYykpO1xuICB9LFxuXG4gIGF0dHJpYnV0ZShuYW1lLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGJ1aWxkU3RhdGVtZW50KCdhdHRyaWJ1dGUnLCBuYW1lLCBleHByZXNzaW9uKTtcbiAgfSxcblxuICBjb21wb25lbnQocGF0aCwgYXR0cnM9W10sIHRlbXBsYXRlPW51bGwpIHtcbiAgICByZXR1cm4gYnVpbGRTdGF0ZW1lbnQoJ2NvbXBvbmVudCcsIHBhdGgsIGF0dHJzLCB0ZW1wbGF0ZSk7XG4gIH0sXG5cbiAgZ2V0KHBhdGgsIGxvYykge1xuICAgIHJldHVybiBidWlsZFN0YXRlbWVudCgnZ2V0JywgcGF0aCwgc2xvYyguLi5sb2MpKTtcbiAgfSxcblxuICBjb25jYXQoLi4uYXJncykge1xuICAgIHJldHVybiBidWlsZFN0YXRlbWVudCgnY29uY2F0JywgYXJncyk7XG4gIH0sXG5cbiAgc3ViZXhwcihuYW1lLCBwYXJhbXM9W10sIGhhc2g9W10sIGxvYz1udWxsKSB7XG4gICAgcmV0dXJuIGJ1aWxkU3RhdGVtZW50KCdzdWJleHByJywgbmFtZSwgcGFyYW1zLCBoYXNoLCBzbG9jKC4uLmxvYykpO1xuICB9XG59O1xuXG5cblFVbml0Lm1vZHVsZShgQ29tcGlsaW5nIDxteS1jb21wb25lbnQ+IHdpdGggaXNTdGF0aWMgcGx1Z2luOiA8bXktY29tcG9uZW50IC8+YCk7XG5cbnRlc3QoXCJpc1N0YXRpYyBza2lwcyBib3VuZGFyeSBub2Rlc1wiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHByZXByb2Nlc3MoJzxteS1jb21wb25lbnQgLz4nKTtcbiAgYXN0LmJvZHlbMF0uaXNTdGF0aWMgPSB0cnVlO1xuICB2YXIgY29tcGlsZXIxID0gbmV3IEh5ZHJhdGlvbk9wY29kZUNvbXBpbGVyKCk7XG4gIGNvbXBpbGVyMS5jb21waWxlKGFzdCk7XG4gIGVxdWFsT3Bjb2Rlcyhjb21waWxlcjEub3Bjb2RlcywgW1xuICAgIFsnY3JlYXRlTW9ycGgnLFswLFtdLDAsMCx0cnVlXV0sXG4gICAgWydwcmVwYXJlT2JqZWN0JyxbMF1dLFxuICAgIFsncHVzaExpdGVyYWwnLFsnbXktY29tcG9uZW50J11dLFxuICAgIFsncHJpbnRDb21wb25lbnRIb29rJyxbMCwwLFsnbG9jJyxbbnVsbCxbMSwwXSxbMSwxNl1dXV1dXG4gIF0pO1xufSk7XG5cbnRlc3RDb21waWxlKFwic2ltcGxlIGV4YW1wbGVcIiwgXCI8ZGl2Pnt7Zm9vfX0gYmFyIHt7YmF6fX08L2Rpdj5cIiwgW1xuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDAgXSBdLFxuICBbIFwic2hhcmVFbGVtZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJjcmVhdGVNb3JwaFwiLCBbIDAsIFsgMCBdLCAwLCAwLCB0cnVlIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMSwgWyAwIF0sIDIsIDIsIHRydWUgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIiwgWyBsb2MoNSwgMTIpIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJiYXpcIiBdIF0sXG4gIFsgXCJwcmludENvbnRlbnRIb29rXCIsIFsgbG9jKDE3LCAyNCkgXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5jb250ZW50KCdmb28nLCBbIDUsIDEyIF0pLFxuICBzLmNvbnRlbnQoJ2JheicsIFsgMTcsIDI0IF0pXG5dKTtcblxudGVzdENvbXBpbGUoXCJzaW1wbGUgYmxvY2tcIiwgXCI8ZGl2Pnt7I2Zvb319e3svZm9vfX08L2Rpdj5cIiwgW1xuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAwLCBbIDAgXSwgMCwgMCwgdHJ1ZSBdIF0sXG4gIFsgXCJwcmVwYXJlT2JqZWN0XCIsIFsgMCBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJmb29cIiBdIF0sXG4gIFsgXCJwcmludEJsb2NrSG9va1wiLCBbIDAsIG51bGwsIGxvYyg1LCAyMSkgXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5ibG9jaygnZm9vJywgWyA1LCAyMSBdLCAwKVxuXSwgW10pO1xuXG50ZXN0Q29tcGlsZShcInNpbXBsZSBibG9jayB3aXRoIGJsb2NrIHBhcmFtc1wiLCBcIjxkaXY+e3sjZm9vIGFzIHxiYXIgYmF6fH19e3svZm9vfX08L2Rpdj5cIiwgW1xuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAwLCBbIDAgXSwgMCwgMCwgdHJ1ZSBdIF0sXG4gIFsgXCJwcmVwYXJlT2JqZWN0XCIsIFsgMCBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJmb29cIiBdIF0sXG4gIFsgXCJwcmludEJsb2NrSG9va1wiLCBbIDAsIG51bGwsIGxvYyg1LCAzNCkgXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5ibG9jaygnZm9vJywgWzUsIDM0XSwgMClcbl0sIFtdKTtcblxudGVzdENvbXBpbGUoXCJlbGVtZW50IHdpdGggYSBzb2xlIG11c3RhY2hlIGNoaWxkXCIsIFwiPGRpdj57e2Zvb319PC9kaXY+XCIsIFtcbiAgWyBcImNvbnN1bWVQYXJlbnRcIiwgWyAwIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMCwgWyAwIF0sIDAsIDAsIHRydWUgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIixbIGxvYyg1LCAxMikgXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5jb250ZW50KCdmb28nLCBbNSwgMTJdKVxuXSk7XG5cbnRlc3RDb21waWxlKFwiZWxlbWVudCB3aXRoIGEgbXVzdGFjaGUgYmV0d2VlbiB0d28gdGV4dCBub2Rlc1wiLCBcIjxkaXY+IHt7Zm9vfX0gPC9kaXY+XCIsIFtcbiAgWyBcImNvbnN1bWVQYXJlbnRcIiwgWyAwIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMCwgWyAwIF0sIDEsIDEsIHRydWUgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIiwgWyBsb2MoNiwgMTMpIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuY29udGVudCgnZm9vJywgWzYsIDEzXSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcIm11c3RhY2hlIHR3byBlbGVtZW50cyBkZWVwXCIsIFwiPGRpdj48ZGl2Pnt7Zm9vfX08L2Rpdj48L2Rpdj5cIiwgW1xuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDAgXSBdLFxuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAwLCBbIDAsIDAgXSwgMCwgMCwgdHJ1ZSBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwiZm9vXCIgXSBdLFxuICBbIFwicHJpbnRDb250ZW50SG9va1wiLCBbIGxvYygxMCwgMTcpIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5jb250ZW50KCdmb28nLCBbMTAsIDE3XSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcInR3byBzaWJsaW5nIGVsZW1lbnRzIHdpdGggbXVzdGFjaGVzXCIsIFwiPGRpdj57e2Zvb319PC9kaXY+PGRpdj57e2Jhcn19PC9kaXY+XCIsIFtcbiAgWyBcImNvbnN1bWVQYXJlbnRcIiwgWyAwIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMCwgWyAwIF0sIDAsIDAsIHRydWUgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIiwgWyBsb2MoNSwgMTIpIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdLFxuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDEgXSBdLFxuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAxLCBbIDEgXSwgMCwgMCwgdHJ1ZSBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwiYmFyXCIgXSBdLFxuICBbIFwicHJpbnRDb250ZW50SG9va1wiLCBbIGxvYygyMywgMzApIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuY29udGVudCgnZm9vJywgWzUsIDEyXSksXG4gIHMuY29udGVudCgnYmFyJywgWzIzLCAzMF0pXG5dKTtcblxudGVzdENvbXBpbGUoXCJtdXN0YWNoZXMgYXQgdGhlIHJvb3RcIiwgXCJ7e2Zvb319IHt7YmFyfX1cIiwgW1xuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAwLCBbIF0sIDAsIDAsIHRydWUgXSBdLFxuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAxLCBbIF0sIDIsIDIsIHRydWUgXSBdLFxuICBbIFwib3BlbkJvdW5kYXJ5XCIsIFsgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIiwgWyBsb2MoMCwgNykgXSBdLFxuICBbIFwiY2xvc2VCb3VuZGFyeVwiLCBbIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJiYXJcIiBdIF0sXG4gIFsgXCJwcmludENvbnRlbnRIb29rXCIsIFsgbG9jKDgsIDE1KSBdIF1cbl0sIFtcbiAgcy5jb250ZW50KCdmb28nLCBbMCwgN10pLFxuICBzLmNvbnRlbnQoJ2JhcicsIFs4LCAxNV0pXG5dKTtcblxudGVzdENvbXBpbGUoXCJiYWNrIHRvIGJhY2sgbXVzdGFjaGVzIHNob3VsZCBoYXZlIGEgdGV4dCBub2RlIGluc2VydGVkIGJldHdlZW4gdGhlbVwiLCBcIjxkaXY+e3tmb299fXt7YmFyfX17e2Jhen19d2F0e3txdXh9fTwvZGl2PlwiLCBbXG4gIFsgXCJjb25zdW1lUGFyZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJzaGFyZUVsZW1lbnRcIiwgWyAwIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMCwgWzBdLCAwLCAwLCB0cnVlIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMSwgWzBdLCAxLCAxLCB0cnVlIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMiwgWzBdLCAyLCAyLCB0cnVlIF0gXSxcbiAgWyBcImNyZWF0ZU1vcnBoXCIsIFsgMywgWzBdLCA0LCA0LCB0cnVlXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIiwgWyBsb2MoNSwgMTIpIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJiYXJcIiBdIF0sXG4gIFsgXCJwcmludENvbnRlbnRIb29rXCIsIFsgbG9jKDEyLCAxOSkgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImJhelwiIF0gXSxcbiAgWyBcInByaW50Q29udGVudEhvb2tcIiwgWyBsb2MoMTksIDI2KSBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwicXV4XCIgXSBdLFxuICBbIFwicHJpbnRDb250ZW50SG9va1wiLCBbIGxvYygyOSwgMzYpIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuY29udGVudCgnZm9vJywgWzUsIDEyXSksXG4gIHMuY29udGVudCgnYmFyJywgWzEyLCAxOV0pLFxuICBzLmNvbnRlbnQoJ2JheicsIFsxOSwgMjZdKSxcbiAgcy5jb250ZW50KCdxdXgnLCBbMjksIDM2XSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcImhlbHBlciB1c2FnZVwiLCBcIjxkaXY+e3tmb28gJ2JhcicgYmF6LmJhdCB0cnVlIDMuMTR9fTwvZGl2PlwiLCBbXG4gIFsgXCJjb25zdW1lUGFyZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJjcmVhdGVNb3JwaFwiLCBbIDAsIFswXSwgMCwgMCwgdHJ1ZSBdIF0sXG4gIFsgXCJwcmVwYXJlT2JqZWN0XCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIDMuMTQgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyB0cnVlIF0gXSxcbiAgWyBcInB1c2hHZXRIb29rXCIsIFsgXCJiYXouYmF0XCIsIGxvYygxNywgMjQpIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJiYXJcIiBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyA0IF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJmb29cIiBdIF0sXG4gIFsgXCJwcmludElubGluZUhvb2tcIiwgWyBsb2MoNSwgMzYpIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuaW5saW5lKCdmb28nLCBbICdiYXInLCBzLmdldCgnYmF6LmJhdCcsIFsxNywgMjRdKSwgdHJ1ZSwgMy4xNCBdLCBbXSwgWzUsIDM2XSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcIm5vZGUgbXVzdGFjaGVcIiwgXCI8ZGl2IHt7Zm9vfX0+PC9kaXY+XCIsIFtcbiAgWyBcImNvbnN1bWVQYXJlbnRcIiwgWyAwIF0gXSxcbiAgWyBcInByZXBhcmVPYmplY3RcIiwgWyAwIF0gXSxcbiAgWyBcInByZXBhcmVBcnJheVwiLCBbIDAgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInNoYXJlRWxlbWVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlRWxlbWVudE1vcnBoXCIsIFsgMCwgMCBdIF0sXG4gIFsgXCJwcmludEVsZW1lbnRIb29rXCIsIFsgbG9jKDUsIDEyKSBdIF0sXG4gIFsgXCJwb3BQYXJlbnRcIiwgW10gXVxuXSwgW1xuICBzLmVsZW1lbnQoJ2ZvbycsIFtdLCBbXSwgWyA1LCAxMiBdKVxuXSk7XG5cbnRlc3RDb21waWxlKFwibm9kZSBoZWxwZXJcIiwgXCI8ZGl2IHt7Zm9vICdiYXInfX0+PC9kaXY+XCIsIFtcbiAgWyBcImNvbnN1bWVQYXJlbnRcIiwgWyAwIF0gXSxcbiAgWyBcInByZXBhcmVPYmplY3RcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJiYXJcIiBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyAxIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJmb29cIiBdIF0sXG4gIFsgXCJzaGFyZUVsZW1lbnRcIiwgWyAwIF0gXSxcbiAgWyBcImNyZWF0ZUVsZW1lbnRNb3JwaFwiLCBbIDAsIDAgXSBdLFxuICBbIFwicHJpbnRFbGVtZW50SG9va1wiLCBbIGxvYyg1LCAxOCkgXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5lbGVtZW50KCdmb28nLCBbJ2JhciddLCBbXSwgWzUsIDE4XSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcImF0dHJpYnV0ZSBtdXN0YWNoZVwiLCBcIjxkaXYgY2xhc3M9J2JlZm9yZSB7e2Zvb319IGFmdGVyJz48L2Rpdj5cIiwgW1xuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDAgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcIiBhZnRlclwiIF0gXSxcbiAgWyBcInB1c2hHZXRIb29rXCIsIFsgXCJmb29cIiwgbG9jKDIxLCAyNCkgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImJlZm9yZSBcIiBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyAzIF0gXSxcbiAgWyBcInB1c2hDb25jYXRIb29rXCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwiY2xhc3NcIiBdIF0sXG4gIFsgXCJzaGFyZUVsZW1lbnRcIiwgWyAwIF0gXSxcbiAgWyBcImNyZWF0ZUF0dHJNb3JwaFwiLCBbIDAsIDAsIFwiY2xhc3NcIiwgdHJ1ZSwgbnVsbCBdIF0sXG4gIFsgXCJwcmludEF0dHJpYnV0ZUhvb2tcIiwgWyBdIF0sXG4gIFsgXCJwb3BQYXJlbnRcIiwgW10gXVxuXSwgW1xuICBzLmF0dHJpYnV0ZSgnY2xhc3MnLCBzLmNvbmNhdCgnYmVmb3JlICcsIHMuZ2V0KCdmb28nLCBbIDIxLCAyNCBdKSwgJyBhZnRlcicpKVxuXSk7XG5cbnRlc3RDb21waWxlKFwicXVvdGVkIGF0dHJpYnV0ZSBtdXN0YWNoZVwiLCBcIjxkaXYgY2xhc3M9J3t7Zm9vfX0nPjwvZGl2PlwiLCBbXG4gIFsgXCJjb25zdW1lUGFyZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoR2V0SG9va1wiLCBbIFwiZm9vXCIsIGxvYygxNCwgMTcpIF0gXSxcbiAgWyBcInByZXBhcmVBcnJheVwiLCBbIDEgXSBdLFxuICBbIFwicHVzaENvbmNhdEhvb2tcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJjbGFzc1wiIF0gXSxcbiAgWyBcInNoYXJlRWxlbWVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlQXR0ck1vcnBoXCIsIFsgMCwgMCwgXCJjbGFzc1wiLCB0cnVlLCBudWxsIF0gXSxcbiAgWyBcInByaW50QXR0cmlidXRlSG9va1wiLCBbIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuYXR0cmlidXRlKCdjbGFzcycsIHMuY29uY2F0KHMuZ2V0KCdmb28nLCBbIDE0LCAxNyBdKSkpXG5dKTtcblxudGVzdENvbXBpbGUoXCJzYWZlIGJhcmUgYXR0cmlidXRlIG11c3RhY2hlXCIsIFwiPGRpdiBjbGFzcz17e2Zvb319PjwvZGl2PlwiLCBbXG4gIFsgXCJjb25zdW1lUGFyZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoR2V0SG9va1wiLCBbIFwiZm9vXCIsIGxvYygxMywgMTYpIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJjbGFzc1wiIF0gXSxcbiAgWyBcInNoYXJlRWxlbWVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlQXR0ck1vcnBoXCIsIFsgMCwgMCwgXCJjbGFzc1wiLCB0cnVlLCBudWxsIF0gXSxcbiAgWyBcInByaW50QXR0cmlidXRlSG9va1wiLCBbIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuYXR0cmlidXRlKCdjbGFzcycsIHMuZ2V0KCdmb28nLCBbIDEzLCAxNiBdKSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcInVuc2FmZSBiYXJlIGF0dHJpYnV0ZSBtdXN0YWNoZVwiLCBcIjxkaXYgY2xhc3M9e3t7Zm9vfX19PjwvZGl2PlwiLCBbXG4gIFsgXCJjb25zdW1lUGFyZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoR2V0SG9va1wiLCBbIFwiZm9vXCIsIGxvYygxNCwgMTcpIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJjbGFzc1wiIF0gXSxcbiAgWyBcInNoYXJlRWxlbWVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlQXR0ck1vcnBoXCIsIFsgMCwgMCwgXCJjbGFzc1wiLCBmYWxzZSwgbnVsbCBdIF0sXG4gIFsgXCJwcmludEF0dHJpYnV0ZUhvb2tcIiwgWyBdIF0sXG4gIFsgXCJwb3BQYXJlbnRcIiwgW10gXVxuXSwgW1xuICBzLmF0dHJpYnV0ZSgnY2xhc3MnLCBzLmdldCgnZm9vJywgWyAxNCwgMTcgXSkpXG5dKTtcblxudGVzdENvbXBpbGUoXCJhdHRyaWJ1dGUgaGVscGVyXCIsIFwiPGRpdiBjbGFzcz0nYmVmb3JlIHt7Zm9vICdiYXInfX0gYWZ0ZXInPjwvZGl2PlwiLCBbXG4gIFsgXCJjb25zdW1lUGFyZW50XCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwiIGFmdGVyXCIgXSBdLFxuICBbIFwicHJlcGFyZU9iamVjdFwiLCBbIDAgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImJhclwiIF0gXSxcbiAgWyBcInByZXBhcmVBcnJheVwiLCBbIDEgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImZvb1wiIF0gXSxcbiAgWyBcInB1c2hTZXhwckhvb2tcIiwgWyBsb2MoMTksIDMyKSBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwiYmVmb3JlIFwiIF0gXSxcbiAgWyBcInByZXBhcmVBcnJheVwiLCBbIDMgXSBdLFxuICBbIFwicHVzaENvbmNhdEhvb2tcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJjbGFzc1wiIF0gXSxcbiAgWyBcInNoYXJlRWxlbWVudFwiLCBbIDAgXSBdLFxuICBbIFwiY3JlYXRlQXR0ck1vcnBoXCIsIFsgMCwgMCwgXCJjbGFzc1wiLCB0cnVlLCBudWxsIF0gXSxcbiAgWyBcInByaW50QXR0cmlidXRlSG9va1wiLCBbIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdXG5dLCBbXG4gIHMuYXR0cmlidXRlKCdjbGFzcycsIHMuY29uY2F0KCdiZWZvcmUgJywgcy5zdWJleHByKCdmb28nLCBbICdiYXInIF0sIFtdLCBbMTksIDMyXSksICcgYWZ0ZXInKSlcbl0pO1xuXG50ZXN0Q29tcGlsZShcImF0dHJpYnV0ZSBoZWxwZXJzXCIsIFwiPGRpdiBjbGFzcz0nYmVmb3JlIHt7Zm9vICdiYXInfX0gYWZ0ZXInIGlkPXt7YmFyZX19PjwvZGl2Pnt7bW9ycGhUaGluZ319PHNwYW4gY2xhc3M9J3t7b2hNeX19Jz48L3NwYW4+XCIsIFtcbiAgWyBcImNvbnN1bWVQYXJlbnRcIiwgWyAwIF0gXSxcbiAgWyBcInNoYXJlRWxlbWVudFwiLCBbIDAgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcIiBhZnRlclwiIF0gXSxcbiAgWyBcInByZXBhcmVPYmplY3RcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJiYXJcIiBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyAxIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJmb29cIiBdIF0sXG4gIFsgXCJwdXNoU2V4cHJIb29rXCIsIFsgbG9jKDE5LCAzMikgXSBdLFxuICBbIFwicHVzaExpdGVyYWxcIiwgWyBcImJlZm9yZSBcIiBdIF0sXG4gIFsgXCJwcmVwYXJlQXJyYXlcIiwgWyAzIF0gXSxcbiAgWyBcInB1c2hDb25jYXRIb29rXCIsIFsgMCBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbIFwiY2xhc3NcIiBdIF0sXG4gIFsgXCJjcmVhdGVBdHRyTW9ycGhcIiwgWyAwLCAwLCBcImNsYXNzXCIsIHRydWUsIG51bGwgXSBdLFxuICBbIFwicHJpbnRBdHRyaWJ1dGVIb29rXCIsIFsgXSBdLFxuICBbIFwicHVzaEdldEhvb2tcIiwgWyAnYmFyZScsIGxvYyg0NSwgNDkpIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgJ2lkJyBdIF0sXG4gIFsgXCJjcmVhdGVBdHRyTW9ycGhcIiwgWyAxLCAwLCAnaWQnLCB0cnVlLCBudWxsIF0gXSxcbiAgWyBcInByaW50QXR0cmlidXRlSG9va1wiLCBbIF0gXSxcbiAgWyBcInBvcFBhcmVudFwiLCBbXSBdLFxuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAyLCBbXSwgMSwgMSwgdHJ1ZSBdIF0sXG4gIFsgXCJwdXNoTGl0ZXJhbFwiLCBbICdtb3JwaFRoaW5nJyBdIF0sXG4gIFsgXCJwcmludENvbnRlbnRIb29rXCIsIFsgbG9jKDU4LCA3MikgXSBdLFxuICBbIFwiY29uc3VtZVBhcmVudFwiLCBbIDIgXSBdLFxuICBbIFwicHVzaEdldEhvb2tcIiwgWyAnb2hNeScsIGxvYyg4NywgOTEpIF0gXSxcbiAgWyBcInByZXBhcmVBcnJheVwiLCBbIDEgXSBdLFxuICBbIFwicHVzaENvbmNhdEhvb2tcIiwgWyAzIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgJ2NsYXNzJyBdIF0sXG4gIFsgXCJzaGFyZUVsZW1lbnRcIiwgWyAxIF0gXSxcbiAgWyBcImNyZWF0ZUF0dHJNb3JwaFwiLCBbIDMsIDEsICdjbGFzcycsIHRydWUsIG51bGwgXSBdLFxuICBbIFwicHJpbnRBdHRyaWJ1dGVIb29rXCIsIFsgXSBdLFxuICBbIFwicG9wUGFyZW50XCIsIFtdIF1cbl0sIFtcbiAgcy5hdHRyaWJ1dGUoJ2NsYXNzJywgcy5jb25jYXQoJ2JlZm9yZSAnLCBzLnN1YmV4cHIoJ2ZvbycsIFsnYmFyJ10sIFtdLCBbIDE5LCAzMiBdKSwgJyBhZnRlcicpKSxcbiAgcy5hdHRyaWJ1dGUoJ2lkJywgcy5nZXQoJ2JhcmUnLCBbIDQ1LCA0OSBdKSksXG4gIHMuY29udGVudCgnbW9ycGhUaGluZycsIFsgNTgsIDcyIF0pLFxuICBzLmF0dHJpYnV0ZSgnY2xhc3MnLCBzLmNvbmNhdChzLmdldCgnb2hNeScsIFsgODcsIDkxIF0pKSlcbl0pO1xuXG50ZXN0Q29tcGlsZSgnY29tcG9uZW50IGhlbHBlcnMnLCBcIjxteS1jb21wb25lbnQ+aGVsbG88L215LWNvbXBvbmVudD5cIiwgW1xuICBbIFwiY3JlYXRlTW9ycGhcIiwgWyAwLCBbIF0sIDAsIDAsIHRydWUgXSBdLFxuICBbIFwib3BlbkJvdW5kYXJ5XCIsIFsgXSBdLFxuICBbIFwiY2xvc2VCb3VuZGFyeVwiLCBbIF0gXSxcbiAgWyBcInByZXBhcmVPYmplY3RcIiwgWyAwIF0gXSxcbiAgWyBcInB1c2hMaXRlcmFsXCIsIFsgXCJteS1jb21wb25lbnRcIiBdIF0sXG4gIFsgXCJwcmludENvbXBvbmVudEhvb2tcIiwgWyAwLCAwLCBsb2MoMCwgMzQpIF0gXVxuXSwgW1xuICBzLmNvbXBvbmVudCgnbXktY29tcG9uZW50JywgW10sIDApXG5dLCBbXSk7XG4iXX0=
define('htmlbars-compiler-tests/hydration-opcode-compiler-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/hydration-opcode-compiler-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/hydration-opcode-compiler-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXItdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUNqRCxPQUFLLENBQUMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzFHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLCtFQUErRSxDQUFDLENBQUM7R0FDbEcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXItdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1jb21waWxlci10ZXN0cy9oeWRyYXRpb24tb3Bjb2RlLWNvbXBpbGVyLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL2h5ZHJhdGlvbi1vcGNvZGUtY29tcGlsZXItdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-compiler-tests/template-compiler-test", ["exports", "../htmlbars-compiler/template-compiler", "../htmlbars-syntax/parser"], function (exports, _htmlbarsCompilerTemplateCompiler, _htmlbarsSyntaxParser) {

  QUnit.module("TemplateCompiler");

  function countNamespaceChanges(template) {
    var ast = _htmlbarsSyntaxParser.preprocess(template);
    var compiler = new _htmlbarsCompilerTemplateCompiler.default();
    var program = compiler.compile(ast);
    var matches = program.match(/dom\.setNamespace/g);
    return matches ? matches.length : 0;
  }

  test("it omits unnecessary namespace changes", function () {
    equal(countNamespaceChanges('<div></div>'), 0); // sanity check
    equal(countNamespaceChanges('<div><svg></svg></div><svg></svg>'), 1);
    equal(countNamespaceChanges('<div><svg></svg></div><div></div>'), 2);
    equal(countNamespaceChanges('<div><svg><title>foobar</title></svg></div><svg></svg>'), 1);
    equal(countNamespaceChanges('<div><svg><title><h1>foobar</h1></title></svg></div><svg></svg>'), 3);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLWNvbXBpbGVyLXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxPQUFLLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7O0FBRWpDLFdBQVMscUJBQXFCLENBQUMsUUFBUSxFQUFFO0FBQ3ZDLFFBQUksR0FBRyxHQUFHLHNCQUxILFVBQVUsQ0FLSSxRQUFRLENBQUMsQ0FBQztBQUMvQixRQUFJLFFBQVEsR0FBRywrQ0FBc0IsQ0FBQztBQUN0QyxRQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNsRCxXQUFPLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztHQUNyQzs7QUFFRCxNQUFJLENBQUMsd0NBQXdDLEVBQUUsWUFBWTtBQUN6RCxTQUFLLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0MsU0FBSyxDQUFDLHFCQUFxQixDQUFDLG1DQUFtQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckUsU0FBSyxDQUFDLHFCQUFxQixDQUFDLG1DQUFtQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckUsU0FBSyxDQUFDLHFCQUFxQixDQUFDLHdEQUF3RCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUYsU0FBSyxDQUFDLHFCQUFxQixDQUFDLGlFQUFpRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDcEcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLWNvbXBpbGVyLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVDb21waWxlciBmcm9tIFwiLi4vaHRtbGJhcnMtY29tcGlsZXIvdGVtcGxhdGUtY29tcGlsZXJcIjtcbmltcG9ydCB7IHByZXByb2Nlc3MgfSBmcm9tIFwiLi4vaHRtbGJhcnMtc3ludGF4L3BhcnNlclwiO1xuXG5RVW5pdC5tb2R1bGUoXCJUZW1wbGF0ZUNvbXBpbGVyXCIpO1xuXG5mdW5jdGlvbiBjb3VudE5hbWVzcGFjZUNoYW5nZXModGVtcGxhdGUpIHtcbiAgdmFyIGFzdCA9IHByZXByb2Nlc3ModGVtcGxhdGUpO1xuICB2YXIgY29tcGlsZXIgPSBuZXcgVGVtcGxhdGVDb21waWxlcigpO1xuICB2YXIgcHJvZ3JhbSA9IGNvbXBpbGVyLmNvbXBpbGUoYXN0KTtcbiAgdmFyIG1hdGNoZXMgPSBwcm9ncmFtLm1hdGNoKC9kb21cXC5zZXROYW1lc3BhY2UvZyk7XG4gIHJldHVybiBtYXRjaGVzID8gbWF0Y2hlcy5sZW5ndGggOiAwO1xufVxuXG50ZXN0KFwiaXQgb21pdHMgdW5uZWNlc3NhcnkgbmFtZXNwYWNlIGNoYW5nZXNcIiwgZnVuY3Rpb24gKCkge1xuICBlcXVhbChjb3VudE5hbWVzcGFjZUNoYW5nZXMoJzxkaXY+PC9kaXY+JyksIDApOyAgLy8gc2FuaXR5IGNoZWNrXG4gIGVxdWFsKGNvdW50TmFtZXNwYWNlQ2hhbmdlcygnPGRpdj48c3ZnPjwvc3ZnPjwvZGl2Pjxzdmc+PC9zdmc+JyksIDEpO1xuICBlcXVhbChjb3VudE5hbWVzcGFjZUNoYW5nZXMoJzxkaXY+PHN2Zz48L3N2Zz48L2Rpdj48ZGl2PjwvZGl2PicpLCAyKTtcbiAgZXF1YWwoY291bnROYW1lc3BhY2VDaGFuZ2VzKCc8ZGl2Pjxzdmc+PHRpdGxlPmZvb2JhcjwvdGl0bGU+PC9zdmc+PC9kaXY+PHN2Zz48L3N2Zz4nKSwgMSk7XG4gIGVxdWFsKGNvdW50TmFtZXNwYWNlQ2hhbmdlcygnPGRpdj48c3ZnPjx0aXRsZT48aDE+Zm9vYmFyPC9oMT48L3RpdGxlPjwvc3ZnPjwvZGl2Pjxzdmc+PC9zdmc+JyksIDMpO1xufSk7XG4iXX0=
define('htmlbars-compiler-tests/template-compiler-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/template-compiler-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/template-compiler-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLWNvbXBpbGVyLXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDakQsT0FBSyxDQUFDLElBQUksQ0FBQyxzRUFBc0UsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUNsRyxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSx1RUFBdUUsQ0FBQyxDQUFDO0dBQzFGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1jb21waWxlci10ZXN0cy90ZW1wbGF0ZS1jb21waWxlci10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtY29tcGlsZXItdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLWNvbXBpbGVyLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLWNvbXBpbGVyLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-compiler-tests/template-visitor-node-test", ["exports", "../htmlbars-syntax/parser", "../htmlbars-compiler/template-visitor"], function (exports, _htmlbarsSyntaxParser, _htmlbarsCompilerTemplateVisitor) {

  function actionsEqual(input, expectedActions) {
    var ast = _htmlbarsSyntaxParser.preprocess(input);

    var templateVisitor = new _htmlbarsCompilerTemplateVisitor.default();
    templateVisitor.visit(ast);
    var actualActions = templateVisitor.actions;

    // Remove the AST node reference from the actions to keep tests leaner
    for (var i = 0; i < actualActions.length; i++) {
      actualActions[i][1].shift();
    }

    deepEqual(actualActions, expectedActions);
  }

  QUnit.module("TemplateVisitor");

  test("empty", function () {
    var input = "";
    actionsEqual(input, [['startProgram', [0, []]], ['endProgram', [0]]]);
  });

  test("basic", function () {
    var input = "foo{{bar}}<div></div>";
    actionsEqual(input, [['startProgram', [0, []]], ['text', [0, 3]], ['mustache', [1, 3]], ['openElement', [2, 3, 0, []]], ['closeElement', [2, 3]], ['endProgram', [0]]]);
  });

  test("nested HTML", function () {
    var input = "<a></a><a><a><a></a></a></a>";
    actionsEqual(input, [['startProgram', [0, []]], ['openElement', [0, 2, 0, []]], ['closeElement', [0, 2]], ['openElement', [1, 2, 0, []]], ['openElement', [0, 1, 0, []]], ['openElement', [0, 1, 0, []]], ['closeElement', [0, 1]], ['closeElement', [0, 1]], ['closeElement', [1, 2]], ['endProgram', [0]]]);
  });

  test("mustaches are counted correctly", function () {
    var input = "<a><a>{{foo}}</a><a {{foo}}><a>{{foo}}</a><a>{{foo}}</a></a></a>";
    actionsEqual(input, [['startProgram', [0, []]], ['openElement', [0, 1, 2, []]], ['openElement', [0, 2, 1, []]], ['mustache', [0, 1]], ['closeElement', [0, 2]], ['openElement', [1, 2, 3, []]], ['openElement', [0, 2, 1, []]], ['mustache', [0, 1]], ['closeElement', [0, 2]], ['openElement', [1, 2, 1, []]], ['mustache', [0, 1]], ['closeElement', [1, 2]], ['closeElement', [1, 2]], ['closeElement', [0, 1]], ['endProgram', [0]]]);
  });

  test("empty block", function () {
    var input = "{{#a}}{{/a}}";
    actionsEqual(input, [['startProgram', [0, []]], ['endProgram', [1]], ['startProgram', [1, []]], ['block', [0, 1]], ['endProgram', [0]]]);
  });

  test("block with inverse", function () {
    var input = "{{#a}}b{{^}}{{/a}}";
    actionsEqual(input, [['startProgram', [0, []]], ['endProgram', [1]], ['startProgram', [0, []]], ['text', [0, 1]], ['endProgram', [1]], ['startProgram', [2, []]], ['block', [0, 1]], ['endProgram', [0]]]);
  });

  test("nested blocks", function () {
    var input = "{{#a}}{{#a}}<b></b>{{/a}}{{#a}}{{b}}{{/a}}{{/a}}{{#a}}b{{/a}}";
    actionsEqual(input, [['startProgram', [0, []]], ['text', [0, 1]], ['endProgram', [1]], ['startProgram', [0, []]], ['mustache', [0, 1]], ['endProgram', [2]], ['startProgram', [0, []]], ['openElement', [0, 1, 0, []]], ['closeElement', [0, 1]], ['endProgram', [2]], ['startProgram', [2, []]], ['block', [0, 2]], ['block', [1, 2]], ['endProgram', [1]], ['startProgram', [2, []]], ['block', [0, 2]], ['block', [1, 2]], ['endProgram', [0]]]);
  });

  test("component", function () {
    var input = "<x-foo>bar</x-foo>";
    actionsEqual(input, [['startProgram', [0, []]], ['text', [0, 1]], ['endProgram', [1]], ['startProgram', [1, []]], ['component', [0, 1]], ['endProgram', [0]]]);
  });

  test("comment", function () {
    var input = "<!-- some comment -->";
    actionsEqual(input, [['startProgram', [0, []]], ['comment', [0, 1]], ['endProgram', [0]]]);
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-compiler-tests/template-visitor-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-compiler-tests');
  QUnit.test('htmlbars-compiler-tests/template-visitor-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-compiler-tests/template-visitor-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLXZpc2l0b3Itbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBQ2pELE9BQUssQ0FBQyxJQUFJLENBQUMsMEVBQTBFLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdEcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsMkVBQTJFLENBQUMsQ0FBQztHQUM5RixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvdGVtcGxhdGUtdmlzaXRvci1ub2RlLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1jb21waWxlci10ZXN0cycpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtY29tcGlsZXItdGVzdHMvdGVtcGxhdGUtdmlzaXRvci1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLWNvbXBpbGVyLXRlc3RzL3RlbXBsYXRlLXZpc2l0b3Itbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-runtime', ['exports', './htmlbars-runtime/hooks', './htmlbars-runtime/render', './htmlbars-util/morph-utils', './htmlbars-util/template-utils'], function (exports, _htmlbarsRuntimeHooks, _htmlbarsRuntimeRender, _htmlbarsUtilMorphUtils, _htmlbarsUtilTemplateUtils) {

  var internal = {
    blockFor: _htmlbarsUtilTemplateUtils.blockFor,
    manualElement: _htmlbarsRuntimeRender.manualElement,
    hostBlock: _htmlbarsRuntimeHooks.hostBlock,
    continueBlock: _htmlbarsRuntimeHooks.continueBlock,
    hostYieldWithShadowTemplate: _htmlbarsRuntimeHooks.hostYieldWithShadowTemplate,
    visitChildren: _htmlbarsUtilMorphUtils.visitChildren,
    validateChildMorphs: _htmlbarsUtilMorphUtils.validateChildMorphs,
    clearMorph: _htmlbarsUtilTemplateUtils.clearMorph
  };

  exports.hooks = _htmlbarsRuntimeHooks.default;
  exports.render = _htmlbarsRuntimeRender.default;
  exports.internal = internal;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFZQSxNQUFJLFFBQVEsR0FBRztBQUNiLFlBQVEsNkJBVEQsUUFBUSxBQVNHO0FBQ2xCLGlCQUFhLHlCQVpOLGFBQWEsQUFZUTtBQUM1QixhQUFTLHdCQVRULFNBQVMsQUFTVztBQUNwQixpQkFBYSx3QkFUYixhQUFhLEFBU2U7QUFDNUIsK0JBQTJCLHdCQVQzQiwyQkFBMkIsQUFTNkI7QUFDeEQsaUJBQWEsMEJBZmUsYUFBYSxBQWViO0FBQzVCLHVCQUFtQiwwQkFoQlosbUJBQW1CLEFBZ0JjO0FBQ3hDLGNBQVUsNkJBaEJPLFVBQVUsQUFnQkw7R0FDdkIsQ0FBQzs7VUFHQSxLQUFLO1VBQ0wsTUFBTTtVQUNOLFFBQVEsR0FBUixRQUFRIiwiZmlsZSI6Imh0bWxiYXJzLXJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaG9va3MgZnJvbSAnLi9odG1sYmFycy1ydW50aW1lL2hvb2tzJztcbmltcG9ydCByZW5kZXIgZnJvbSAnLi9odG1sYmFycy1ydW50aW1lL3JlbmRlcic7XG5pbXBvcnQgeyBtYW51YWxFbGVtZW50IH0gZnJvbSAnLi9odG1sYmFycy1ydW50aW1lL3JlbmRlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZUNoaWxkTW9ycGhzLCB2aXNpdENoaWxkcmVuIH0gZnJvbSBcIi4vaHRtbGJhcnMtdXRpbC9tb3JwaC11dGlsc1wiO1xuaW1wb3J0IHsgYmxvY2tGb3IsIGNsZWFyTW9ycGggfSBmcm9tIFwiLi9odG1sYmFycy11dGlsL3RlbXBsYXRlLXV0aWxzXCI7XG5pbXBvcnQge1xuICBob3N0QmxvY2ssXG4gIGNvbnRpbnVlQmxvY2ssXG4gIGhvc3RZaWVsZFdpdGhTaGFkb3dUZW1wbGF0ZVxufSBmcm9tICcuL2h0bWxiYXJzLXJ1bnRpbWUvaG9va3MnO1xuXG5cbnZhciBpbnRlcm5hbCA9IHtcbiAgYmxvY2tGb3I6IGJsb2NrRm9yLFxuICBtYW51YWxFbGVtZW50OiBtYW51YWxFbGVtZW50LFxuICBob3N0QmxvY2s6IGhvc3RCbG9jayxcbiAgY29udGludWVCbG9jazogY29udGludWVCbG9jayxcbiAgaG9zdFlpZWxkV2l0aFNoYWRvd1RlbXBsYXRlOiBob3N0WWllbGRXaXRoU2hhZG93VGVtcGxhdGUsXG4gIHZpc2l0Q2hpbGRyZW46IHZpc2l0Q2hpbGRyZW4sXG4gIHZhbGlkYXRlQ2hpbGRNb3JwaHM6IHZhbGlkYXRlQ2hpbGRNb3JwaHMsXG4gIGNsZWFyTW9ycGg6IGNsZWFyTW9ycGhcbn07XG5cbmV4cG9ydCB7XG4gIGhvb2tzLFxuICByZW5kZXIsXG4gIGludGVybmFsXG59O1xuIl19
define('htmlbars-runtime.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('htmlbars-runtime.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-runtime.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNCLE9BQUssQ0FBQyxJQUFJLENBQUMsd0NBQXdDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDcEUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUseUNBQXlDLENBQUMsQ0FBQztHQUM1RCxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIC4nKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXJ1bnRpbWUuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXJ1bnRpbWUuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-runtime/expression-visitor', ['exports'], function (exports) {
  exports.acceptParams = acceptParams;
  exports.acceptHash = acceptHash;
  /**
    # Expression Nodes:
  
    These nodes are not directly responsible for any part of the DOM, but are
    eventually passed to a Statement Node.
  
    * get
    * subexpr
    * concat
  */

  function acceptParams(nodes, env, scope) {
    var array = [];

    for (var i = 0, l = nodes.length; i < l; i++) {
      array.push(acceptExpression(nodes[i], env, scope).value);
    }

    return array;
  }

  function acceptHash(pairs, env, scope) {
    var object = {};

    for (var i = 0, l = pairs.length; i < l; i += 2) {
      var key = pairs[i];
      var value = pairs[i + 1];
      object[key] = acceptExpression(value, env, scope).value;
    }

    return object;
  }

  function acceptExpression(node, env, scope) {
    var ret = { value: null };

    // Primitive literals are unambiguously non-array representations of
    // themselves.
    if (Array.isArray(node)) {
      // if (node.length !== 7) { throw new Error('FIXME: Invalid statement length!'); }

      ret.value = evaluateNode(node, env, scope);
    } else {
      ret.value = node;
    }

    return ret;
  }

  function evaluateNode(node, env, scope) {
    switch (node[0]) {
      // can be used by manualElement
      case 'value':
        return node[1];
      case 'get':
        return evaluateGet(node, env, scope);
      case 'subexpr':
        return evaluateSubexpr(node, env, scope);
      case 'concat':
        return evaluateConcat(node, env, scope);
    }
  }

  function evaluateGet(node, env, scope) {
    var path = node[1];

    return env.hooks.get(env, scope, path);
  }

  function evaluateSubexpr(node, env, scope) {
    var path = node[1];
    var rawParams = node[2];
    var rawHash = node[3];

    var params = acceptParams(rawParams, env, scope);
    var hash = acceptHash(rawHash, env, scope);

    return env.hooks.subexpr(env, scope, path, params, hash);
  }

  function evaluateConcat(node, env, scope) {
    var rawParts = node[1];

    var parts = acceptParams(rawParts, env, scope);

    return env.hooks.concat(env, parts);
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvZXhwcmVzc2lvbi12aXNpdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBV08sV0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDOUMsUUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDOztBQUVmLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUMsV0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzFEOztBQUVELFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRU0sV0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDNUMsUUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDL0MsVUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFVBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsWUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0tBQ3pEOztBQUVELFdBQU8sTUFBTSxDQUFDO0dBQ2Y7O0FBRUQsV0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUMxQyxRQUFJLEdBQUcsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQzs7OztBQUkxQixRQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7OztBQUd2QixTQUFHLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzVDLE1BQU07QUFDTCxTQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztLQUNsQjs7QUFFRCxXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVELFdBQVMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLFlBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFYixXQUFLLE9BQU87QUFBSSxlQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFBLEFBQy9CLFdBQUssS0FBSztBQUFNLGVBQU8sV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxBQUNyRCxXQUFLLFNBQVM7QUFBRSxlQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQUEsQUFDekQsV0FBSyxRQUFRO0FBQUcsZUFBTyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLEtBQ3pEO0dBQ0Y7O0FBRUQsV0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7UUFDOUIsSUFBSSxHQUFJLElBQUk7O0FBRW5CLFdBQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztHQUN4Qzs7QUFFRCxXQUFTLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtRQUNsQyxJQUFJLEdBQXdCLElBQUk7UUFBMUIsU0FBUyxHQUFhLElBQUk7UUFBZixPQUFPLEdBQUksSUFBSTs7QUFFdkMsUUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDakQsUUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBRTNDLFdBQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQzFEOztBQUVELFdBQVMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO1FBQ2pDLFFBQVEsR0FBSSxJQUFJOztBQUV2QixRQUFJLEtBQUssR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzs7QUFFL0MsV0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDckMiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS9leHByZXNzaW9uLXZpc2l0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgIyBFeHByZXNzaW9uIE5vZGVzOlxuXG4gIFRoZXNlIG5vZGVzIGFyZSBub3QgZGlyZWN0bHkgcmVzcG9uc2libGUgZm9yIGFueSBwYXJ0IG9mIHRoZSBET00sIGJ1dCBhcmVcbiAgZXZlbnR1YWxseSBwYXNzZWQgdG8gYSBTdGF0ZW1lbnQgTm9kZS5cblxuICAqIGdldFxuICAqIHN1YmV4cHJcbiAgKiBjb25jYXRcbiovXG5cbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHRQYXJhbXMobm9kZXMsIGVudiwgc2NvcGUpIHtcbiAgbGV0IGFycmF5ID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcnJheS5wdXNoKGFjY2VwdEV4cHJlc3Npb24obm9kZXNbaV0sIGVudiwgc2NvcGUpLnZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdEhhc2gocGFpcnMsIGVudiwgc2NvcGUpIHtcbiAgbGV0IG9iamVjdCA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgbGV0IGtleSA9IHBhaXJzW2ldO1xuICAgIGxldCB2YWx1ZSA9IHBhaXJzW2krMV07XG4gICAgb2JqZWN0W2tleV0gPSBhY2NlcHRFeHByZXNzaW9uKHZhbHVlLCBlbnYsIHNjb3BlKS52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGFjY2VwdEV4cHJlc3Npb24obm9kZSwgZW52LCBzY29wZSkge1xuICBsZXQgcmV0ID0geyB2YWx1ZTogbnVsbCB9O1xuXG4gIC8vIFByaW1pdGl2ZSBsaXRlcmFscyBhcmUgdW5hbWJpZ3VvdXNseSBub24tYXJyYXkgcmVwcmVzZW50YXRpb25zIG9mXG4gIC8vIHRoZW1zZWx2ZXMuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgLy8gaWYgKG5vZGUubGVuZ3RoICE9PSA3KSB7IHRocm93IG5ldyBFcnJvcignRklYTUU6IEludmFsaWQgc3RhdGVtZW50IGxlbmd0aCEnKTsgfVxuXG4gICAgcmV0LnZhbHVlID0gZXZhbHVhdGVOb2RlKG5vZGUsIGVudiwgc2NvcGUpO1xuICB9IGVsc2Uge1xuICAgIHJldC52YWx1ZSA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBldmFsdWF0ZU5vZGUobm9kZSwgZW52LCBzY29wZSkge1xuICBzd2l0Y2ggKG5vZGVbMF0pIHtcbiAgICAvLyBjYW4gYmUgdXNlZCBieSBtYW51YWxFbGVtZW50XG4gICAgY2FzZSAndmFsdWUnOiAgIHJldHVybiBub2RlWzFdO1xuICAgIGNhc2UgJ2dldCc6ICAgICByZXR1cm4gZXZhbHVhdGVHZXQobm9kZSwgZW52LCBzY29wZSk7XG4gICAgY2FzZSAnc3ViZXhwcic6IHJldHVybiBldmFsdWF0ZVN1YmV4cHIobm9kZSwgZW52LCBzY29wZSk7XG4gICAgY2FzZSAnY29uY2F0JzogIHJldHVybiBldmFsdWF0ZUNvbmNhdChub2RlLCBlbnYsIHNjb3BlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmFsdWF0ZUdldChub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCBbLCBwYXRoXSA9IG5vZGU7XG5cbiAgcmV0dXJuIGVudi5ob29rcy5nZXQoZW52LCBzY29wZSwgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGV2YWx1YXRlU3ViZXhwcihub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCBbLCBwYXRoLCByYXdQYXJhbXMsIHJhd0hhc2hdID0gbm9kZTtcblxuICBsZXQgcGFyYW1zID0gYWNjZXB0UGFyYW1zKHJhd1BhcmFtcywgZW52LCBzY29wZSk7XG4gIGxldCBoYXNoID0gYWNjZXB0SGFzaChyYXdIYXNoLCBlbnYsIHNjb3BlKTtcblxuICByZXR1cm4gZW52Lmhvb2tzLnN1YmV4cHIoZW52LCBzY29wZSwgcGF0aCwgcGFyYW1zLCBoYXNoKTtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGVDb25jYXQobm9kZSwgZW52LCBzY29wZSkge1xuICBsZXQgWywgcmF3UGFydHNdID0gbm9kZTtcblxuICBsZXQgcGFydHMgPSBhY2NlcHRQYXJhbXMocmF3UGFydHMsIGVudiwgc2NvcGUpO1xuXG4gIHJldHVybiBlbnYuaG9va3MuY29uY2F0KGVudiwgcGFydHMpO1xufVxuIl19
define('htmlbars-runtime/expression-visitor.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-runtime');
  QUnit.test('htmlbars-runtime/expression-visitor.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-runtime/expression-visitor.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvZXhwcmVzc2lvbi12aXNpdG9yLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLE9BQUssQ0FBQyxJQUFJLENBQUMsMkRBQTJELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdkYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsNERBQTRELENBQUMsQ0FBQztHQUMvRSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS9leHByZXNzaW9uLXZpc2l0b3IuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1ydW50aW1lJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1ydW50aW1lL2V4cHJlc3Npb24tdmlzaXRvci5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtcnVudGltZS9leHByZXNzaW9uLXZpc2l0b3IuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-runtime/hooks", ["exports", "./render", "../morph-range/morph-list", "../htmlbars-util/object-utils", "../htmlbars-util/morph-utils", "../htmlbars-util/template-utils"], function (exports, _render, _morphRangeMorphList, _htmlbarsUtilObjectUtils, _htmlbarsUtilMorphUtils, _htmlbarsUtilTemplateUtils) {
  exports.wrap = wrap;
  exports.wrapForHelper = wrapForHelper;
  exports.createScope = createScope;
  exports.createFreshScope = createFreshScope;
  exports.bindShadowScope = bindShadowScope;
  exports.createChildScope = createChildScope;
  exports.bindSelf = bindSelf;
  exports.updateSelf = updateSelf;
  exports.bindLocal = bindLocal;
  exports.updateLocal = updateLocal;
  exports.bindBlock = bindBlock;
  exports.block = block;
  exports.continueBlock = continueBlock;
  exports.hostBlock = hostBlock;
  exports.handleRedirect = handleRedirect;
  exports.handleKeyword = handleKeyword;
  exports.linkRenderNode = linkRenderNode;
  exports.inline = inline;
  exports.keyword = keyword;
  exports.invokeHelper = invokeHelper;
  exports.classify = classify;
  exports.partial = partial;
  exports.range = range;
  exports.element = element;
  exports.attribute = attribute;
  exports.subexpr = subexpr;
  exports.get = get;
  exports.getRoot = getRoot;
  exports.getBlock = getBlock;
  exports.getChild = getChild;
  exports.getValue = getValue;
  exports.getCellOrValue = getCellOrValue;
  exports.component = component;
  exports.concat = concat;
  exports.hasHelper = hasHelper;
  exports.lookupHelper = lookupHelper;
  exports.bindScope = bindScope;
  exports.updateScope = updateScope;

  /**
    HTMLBars delegates the runtime behavior of a template to
    hooks provided by the host environment. These hooks explain
    the lexical environment of a Handlebars template, the internal
    representation of references, and the interaction between an
    HTMLBars template and the DOM it is managing.
  
    While HTMLBars host hooks have access to all of this internal
    machinery, templates and helpers have access to the abstraction
    provided by the host hooks.
  
    ## The Lexical Environment
  
    The default lexical environment of an HTMLBars template includes:
  
    * Any local variables, provided by *block arguments*
    * The current value of `self`
  
    ## Simple Nesting
  
    Let's look at a simple template with a nested block:
  
    ```hbs
    <h1>{{title}}</h1>
  
    {{#if author}}
      <p class="byline">{{author}}</p>
    {{/if}}
    ```
  
    In this case, the lexical environment at the top-level of the
    template does not change inside of the `if` block. This is
    achieved via an implementation of `if` that looks like this:
  
    ```js
    registerHelper('if', function(params) {
      if (!!params[0]) {
        return this.yield();
      }
    });
    ```
  
    A call to `this.yield` invokes the child template using the
    current lexical environment.
  
    ## Block Arguments
  
    It is possible for nested blocks to introduce new local
    variables:
  
    ```hbs
    {{#count-calls as |i|}}
    <h1>{{title}}</h1>
    <p>Called {{i}} times</p>
    {{/count}}
    ```
  
    In this example, the child block inherits its surrounding
    lexical environment, but augments it with a single new
    variable binding.
  
    The implementation of `count-calls` supplies the value of
    `i`, but does not otherwise alter the environment:
  
    ```js
    var count = 0;
    registerHelper('count-calls', function() {
      return this.yield([ ++count ]);
    });
    ```
  */

  function wrap(template) {
    if (template === null) {
      return null;
    }

    return {
      meta: template.meta,
      arity: template.arity,
      raw: template,
      render: function (self, env, options, blockArguments) {
        var scope = env.hooks.createFreshScope();

        var contextualElement = options && options.contextualElement;
        var renderOptions = new _render.RenderOptions(null, self, blockArguments, contextualElement);

        return _render.default(template, env, scope, renderOptions);
      }
    };
  }

  function wrapForHelper(template, env, scope, morph, renderState, visitor) {
    if (!template) {
      return {};
    }

    var yieldArgs = yieldTemplate(template, env, scope, morph, renderState, visitor);

    return {
      meta: template.meta,
      arity: template.arity,
      'yield': yieldArgs, // quoted since it's a reserved word, see issue #420
      yieldItem: yieldItem(template, env, scope, morph, renderState, visitor),
      raw: template,

      render: function (self, blockArguments) {
        yieldArgs(blockArguments, self);
      }
    };
  }

  // Called by a user-land helper to render a template.
  function yieldTemplate(template, env, parentScope, morph, renderState, visitor) {
    return function (blockArguments, self) {
      // Render state is used to track the progress of the helper (since it
      // may call into us multiple times). As the user-land helper calls
      // into library code, we track what needs to be cleaned up after the
      // helper has returned.
      //
      // Here, we remember that a template has been yielded and so we do not
      // need to remove the previous template. (If no template is yielded
      // this render by the helper, we assume nothing should be shown and
      // remove any previous rendered templates.)
      renderState.morphToClear = null;

      // In this conditional is true, it means that on the previous rendering pass
      // the helper yielded multiple items via `yieldItem()`, but this time they
      // are yielding a single template. In that case, we mark the morph list for
      // cleanup so it is removed from the DOM.
      if (morph.morphList) {
        _htmlbarsUtilTemplateUtils.clearMorphList(morph.morphList, morph, env);
        renderState.morphListToClear = null;
      }

      var scope = parentScope;

      if (morph.lastYielded && isStableTemplate(template, morph.lastYielded)) {
        return morph.lastResult.revalidateWith(env, undefined, self, blockArguments, visitor);
      }

      // Check to make sure that we actually **need** a new scope, and can't
      // share the parent scope. Note that we need to move this check into
      // a host hook, because the host's notion of scope may require a new
      // scope in more cases than the ones we can determine statically.
      if (self !== undefined || parentScope === null || template.arity) {
        scope = env.hooks.createChildScope(parentScope);
      }

      morph.lastYielded = { self: self, template: template, shadowTemplate: null };

      // Render the template that was selected by the helper
      var renderOptions = new _render.RenderOptions(morph, self, blockArguments);
      _render.default(template, env, scope, renderOptions);
    };
  }

  function yieldItem(template, env, parentScope, morph, renderState, visitor) {
    // Initialize state that tracks multiple items being
    // yielded in.
    var currentMorph = null;

    // Candidate morphs for deletion.
    var candidates = {};

    // Reuse existing MorphList if this is not a first-time
    // render.
    var morphList = morph.morphList;
    if (morphList) {
      currentMorph = morphList.firstChildMorph;
    }

    // Advances the currentMorph pointer to the morph in the previously-rendered
    // list that matches the yielded key. While doing so, it marks any morphs
    // that it advances past as candidates for deletion. Assuming those morphs
    // are not yielded in later, they will be removed in the prune step during
    // cleanup.
    // Note that this helper function assumes that the morph being seeked to is
    // guaranteed to exist in the previous MorphList; if this is called and the
    // morph does not exist, it will result in an infinite loop
    function advanceToKey(key) {
      var seek = currentMorph;

      while (seek.key !== key) {
        candidates[seek.key] = seek;
        seek = seek.nextMorph;
      }

      currentMorph = seek.nextMorph;
      return seek;
    }

    return function (_key, blockArguments, self) {
      if (typeof _key !== 'string') {
        throw new Error("You must provide a string key when calling `yieldItem`; you provided " + _key);
      }

      // At least one item has been yielded, so we do not wholesale
      // clear the last MorphList but instead apply a prune operation.
      renderState.morphListToClear = null;
      morph.lastYielded = null;

      var morphList, morphMap;

      if (!morph.morphList) {
        morph.morphList = new _morphRangeMorphList.default();
        morph.morphMap = {};
        morph.setMorphList(morph.morphList);
      }

      morphList = morph.morphList;
      morphMap = morph.morphMap;

      // A map of morphs that have been yielded in on this
      // rendering pass. Any morphs that do not make it into
      // this list will be pruned from the MorphList during the cleanup
      // process.
      var handledMorphs = renderState.handledMorphs;
      var key = undefined;

      if (_key in handledMorphs) {
        // In this branch we are dealing with a duplicate key. The strategy
        // is to take the original key and append a counter to it that is
        // incremented every time the key is reused. In order to greatly
        // reduce the chance of colliding with another valid key we also add
        // an extra string "--z8mS2hvDW0A--" to the new key.
        var collisions = renderState.collisions;
        if (collisions === undefined) {
          collisions = renderState.collisions = {};
        }
        var count = collisions[_key] | 0;
        collisions[_key] = ++count;

        key = _key + '--z8mS2hvDW0A--' + count;
      } else {
        key = _key;
      }

      if (currentMorph && currentMorph.key === key) {
        yieldTemplate(template, env, parentScope, currentMorph, renderState, visitor)(blockArguments, self);
        currentMorph = currentMorph.nextMorph;
        handledMorphs[key] = currentMorph;
      } else if (morphMap[key] !== undefined) {
        var foundMorph = morphMap[key];

        if (key in candidates) {
          // If we already saw this morph, move it forward to this position
          morphList.insertBeforeMorph(foundMorph, currentMorph);
        } else {
          // Otherwise, move the pointer forward to the existing morph for this key
          advanceToKey(key);
        }

        handledMorphs[foundMorph.key] = foundMorph;
        yieldTemplate(template, env, parentScope, foundMorph, renderState, visitor)(blockArguments, self);
      } else {
        var childMorph = _render.createChildMorph(env.dom, morph);
        childMorph.key = key;
        morphMap[key] = handledMorphs[key] = childMorph;
        morphList.insertBeforeMorph(childMorph, currentMorph);
        yieldTemplate(template, env, parentScope, childMorph, renderState, visitor)(blockArguments, self);
      }

      renderState.morphListToPrune = morphList;
      morph.childNodes = null;
    };
  }

  function isStableTemplate(template, lastYielded) {
    return !lastYielded.shadowTemplate && template === lastYielded.template;
  }
  function optionsFor(template, inverse, env, scope, morph, visitor) {
    // If there was a template yielded last time, set morphToClear so it will be cleared
    // if no template is yielded on this render.
    var morphToClear = morph.lastResult ? morph : null;
    var renderState = new _htmlbarsUtilTemplateUtils.RenderState(morphToClear, morph.morphList || null);

    return {
      templates: {
        template: wrapForHelper(template, env, scope, morph, renderState, visitor),
        inverse: wrapForHelper(inverse, env, scope, morph, renderState, visitor)
      },
      renderState: renderState
    };
  }

  function thisFor(options) {
    return {
      arity: options.template.arity,
      'yield': options.template.yield, // quoted since it's a reserved word, see issue #420
      yieldItem: options.template.yieldItem,
      yieldIn: options.template.yieldIn
    };
  }

  /**
    Host Hook: createScope
  
    @param {Scope?} parentScope
    @return Scope
  
    Corresponds to entering a new HTMLBars block.
  
    This hook is invoked when a block is entered with
    a new `self` or additional local variables.
  
    When invoked for a top-level template, the
    `parentScope` is `null`, and this hook should return
    a fresh Scope.
  
    When invoked for a child template, the `parentScope`
    is the scope for the parent environment.
  
    Note that the `Scope` is an opaque value that is
    passed to other host hooks. For example, the `get`
    hook uses the scope to retrieve a value for a given
    scope and variable name.
  */

  function createScope(env, parentScope) {
    if (parentScope) {
      return env.hooks.createChildScope(parentScope);
    } else {
      return env.hooks.createFreshScope();
    }
  }

  function createFreshScope() {
    // because `in` checks have unpredictable performance, keep a
    // separate dictionary to track whether a local was bound.
    // See `bindLocal` for more information.
    return { self: null, blocks: {}, locals: {}, localPresent: {} };
  }

  /**
    Host Hook: bindShadowScope
  
    @param {Scope?} parentScope
    @return Scope
  
    Corresponds to rendering a new template into an existing
    render tree, but with a new top-level lexical scope. This
    template is called the "shadow root".
  
    If a shadow template invokes `{{yield}}`, it will render
    the block provided to the shadow root in the original
    lexical scope.
  
    ```hbs
    {{!-- post template --}}
    <p>{{props.title}}</p>
    {{yield}}
  
    {{!-- blog template --}}
    {{#post title="Hello world"}}
      <p>by {{byline}}</p>
      <article>This is my first post</article>
    {{/post}}
  
    {{#post title="Goodbye world"}}
      <p>by {{byline}}</p>
      <article>This is my last post</article>
    {{/post}}
    ```
  
    ```js
    helpers.post = function(params, hash, options) {
      options.template.yieldIn(postTemplate, { props: hash });
    };
  
    blog.render({ byline: "Yehuda Katz" });
    ```
  
    Produces:
  
    ```html
    <p>Hello world</p>
    <p>by Yehuda Katz</p>
    <article>This is my first post</article>
  
    <p>Goodbye world</p>
    <p>by Yehuda Katz</p>
    <article>This is my last post</article>
    ```
  
    In short, `yieldIn` creates a new top-level scope for the
    provided template and renders it, making the original block
    available to `{{yield}}` in that template.
  */

  function bindShadowScope(env /*, parentScope, shadowScope */) {
    return env.hooks.createFreshScope();
  }

  function createChildScope(parent) {
    var scope = Object.create(parent);
    scope.locals = Object.create(parent.locals);
    scope.localPresent = Object.create(parent.localPresent);
    scope.blocks = Object.create(parent.blocks);
    return scope;
  }

  /**
    Host Hook: bindSelf
  
    @param {Scope} scope
    @param {any} self
  
    Corresponds to entering a template.
  
    This hook is invoked when the `self` value for a scope is ready to be bound.
  
    The host must ensure that child scopes reflect the change to the `self` in
    future calls to the `get` hook.
  */

  function bindSelf(env, scope, self) {
    scope.self = self;
  }

  function updateSelf(env, scope, self) {
    env.hooks.bindSelf(env, scope, self);
  }

  /**
    Host Hook: bindLocal
  
    @param {Environment} env
    @param {Scope} scope
    @param {String} name
    @param {any} value
  
    Corresponds to entering a template with block arguments.
  
    This hook is invoked when a local variable for a scope has been provided.
  
    The host must ensure that child scopes reflect the change in future calls
    to the `get` hook.
  */

  function bindLocal(env, scope, name, value) {
    scope.localPresent[name] = true;
    scope.locals[name] = value;
  }

  function updateLocal(env, scope, name, value) {
    env.hooks.bindLocal(env, scope, name, value);
  }

  /**
    Host Hook: bindBlock
  
    @param {Environment} env
    @param {Scope} scope
    @param {Function} block
  
    Corresponds to entering a shadow template that was invoked by a block helper with
    `yieldIn`.
  
    This hook is invoked with an opaque block that will be passed along
    to the shadow template, and inserted into the shadow template when
    `{{yield}}` is used. Optionally provide a non-default block name
    that can be targeted by `{{yield to=blockName}}`.
  */

  function bindBlock(env, scope, block) {
    var name = arguments.length <= 3 || arguments[3] === undefined ? 'default' : arguments[3];

    scope.blocks[name] = block;
  }

  /**
    Host Hook: block
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
    @param {Array} params
    @param {Object} hash
    @param {Block} block
    @param {Block} elseBlock
  
    Corresponds to:
  
    ```hbs
    {{#helper param1 param2 key1=val1 key2=val2}}
      {{!-- child template --}}
    {{/helper}}
    ```
  
    This host hook is a workhorse of the system. It is invoked
    whenever a block is encountered, and is responsible for
    resolving the helper to call, and then invoke it.
  
    The helper should be invoked with:
  
    - `{Array} params`: the parameters passed to the helper
      in the template.
    - `{Object} hash`: an object containing the keys and values passed
      in the hash position in the template.
  
    The values in `params` and `hash` will already be resolved
    through a previous call to the `get` host hook.
  
    The helper should be invoked with a `this` value that is
    an object with one field:
  
    `{Function} yield`: when invoked, this function executes the
    block with the current scope. It takes an optional array of
    block parameters. If block parameters are supplied, HTMLBars
    will invoke the `bindLocal` host hook to bind the supplied
    values to the block arguments provided by the template.
  
    In general, the default implementation of `block` should work
    for most host environments. It delegates to other host hooks
    where appropriate, and properly invokes the helper with the
    appropriate arguments.
  */

  function block(morph, env, scope, path, params, hash, template, inverse, visitor) {
    if (handleRedirect(morph, env, scope, path, params, hash, template, inverse, visitor)) {
      return;
    }

    continueBlock(morph, env, scope, path, params, hash, template, inverse, visitor);
  }

  function continueBlock(morph, env, scope, path, params, hash, template, inverse, visitor) {
    hostBlock(morph, env, scope, template, inverse, null, visitor, function (options) {
      var helper = env.hooks.lookupHelper(env, scope, path);
      return env.hooks.invokeHelper(morph, env, scope, visitor, params, hash, helper, options.templates, thisFor(options.templates));
    });
  }

  function hostBlock(morph, env, scope, template, inverse, shadowOptions, visitor, callback) {
    var options = optionsFor(template, inverse, env, scope, morph, visitor);
    _htmlbarsUtilTemplateUtils.renderAndCleanup(morph, env, options, shadowOptions, callback);
  }

  function handleRedirect(morph, env, scope, path, params, hash, template, inverse, visitor) {
    if (!path) {
      return false;
    }

    var redirect = env.hooks.classify(env, scope, path);
    if (redirect) {
      switch (redirect) {
        case 'component':
          env.hooks.component(morph, env, scope, path, params, hash, { default: template, inverse: inverse }, visitor);break;
        case 'inline':
          env.hooks.inline(morph, env, scope, path, params, hash, visitor);break;
        case 'block':
          env.hooks.block(morph, env, scope, path, params, hash, template, inverse, visitor);break;
        default:
          throw new Error("Internal HTMLBars redirection to " + redirect + " not supported");
      }
      return true;
    }

    if (handleKeyword(path, morph, env, scope, params, hash, template, inverse, visitor)) {
      return true;
    }

    return false;
  }

  function handleKeyword(path, morph, env, scope, params, hash, template, inverse, visitor) {
    var keyword = env.hooks.keywords[path];
    if (!keyword) {
      return false;
    }

    if (typeof keyword === 'function') {
      return keyword(morph, env, scope, params, hash, template, inverse, visitor);
    }

    if (keyword.willRender) {
      keyword.willRender(morph, env);
    }

    var lastState, newState;
    if (keyword.setupState) {
      lastState = _htmlbarsUtilObjectUtils.shallowCopy(morph.getState());
      newState = morph.setState(keyword.setupState(lastState, env, scope, params, hash));
    }

    if (keyword.childEnv) {
      // Build the child environment...
      env = keyword.childEnv(morph.getState(), env);

      // ..then save off the child env builder on the render node. If the render
      // node tree is re-rendered and this node is not dirty, the child env
      // builder will still be invoked so that child dirty render nodes still get
      // the correct child env.
      morph.buildChildEnv = keyword.childEnv;
    }

    var firstTime = !morph.rendered;

    if (keyword.isEmpty) {
      var isEmpty = keyword.isEmpty(morph.getState(), env, scope, params, hash);

      if (isEmpty) {
        if (!firstTime) {
          _htmlbarsUtilTemplateUtils.clearMorph(morph, env, false);
        }
        return true;
      }
    }

    if (firstTime) {
      if (keyword.render) {
        keyword.render(morph, env, scope, params, hash, template, inverse, visitor);
      }
      morph.rendered = true;
      return true;
    }

    var isStable;
    if (keyword.isStable) {
      isStable = keyword.isStable(lastState, newState);
    } else {
      isStable = stableState(lastState, newState);
    }

    if (isStable) {
      if (keyword.rerender) {
        var newEnv = keyword.rerender(morph, env, scope, params, hash, template, inverse, visitor);
        env = newEnv || env;
      }
      _htmlbarsUtilMorphUtils.validateChildMorphs(env, morph, visitor);
      return true;
    } else {
      _htmlbarsUtilTemplateUtils.clearMorph(morph, env, false);
    }

    // If the node is unstable, re-render from scratch
    if (keyword.render) {
      keyword.render(morph, env, scope, params, hash, template, inverse, visitor);
      morph.rendered = true;
      return true;
    }
  }

  function stableState(oldState, newState) {
    if (_htmlbarsUtilObjectUtils.keyLength(oldState) !== _htmlbarsUtilObjectUtils.keyLength(newState)) {
      return false;
    }

    for (var prop in oldState) {
      if (oldState[prop] !== newState[prop]) {
        return false;
      }
    }

    return true;
  }

  function linkRenderNode() /* morph, env, scope, params, hash */{
    return;
  }

  /**
    Host Hook: inline
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
    @param {Array} params
    @param {Hash} hash
  
    Corresponds to:
  
    ```hbs
    {{helper param1 param2 key1=val1 key2=val2}}
    ```
  
    This host hook is similar to the `block` host hook, but it
    invokes helpers that do not supply an attached block.
  
    Like the `block` hook, the helper should be invoked with:
  
    - `{Array} params`: the parameters passed to the helper
      in the template.
    - `{Object} hash`: an object containing the keys and values passed
      in the hash position in the template.
  
    The values in `params` and `hash` will already be resolved
    through a previous call to the `get` host hook.
  
    In general, the default implementation of `inline` should work
    for most host environments. It delegates to other host hooks
    where appropriate, and properly invokes the helper with the
    appropriate arguments.
  
    The default implementation of `inline` also makes `partial`
    a keyword. Instead of invoking a helper named `partial`,
    it invokes the `partial` host hook.
  */

  function inline(morph, env, scope, path, params, hash, visitor) {
    if (handleRedirect(morph, env, scope, path, params, hash, null, null, visitor)) {
      return;
    }

    var value = undefined,
        hasValue = undefined;
    if (morph.linkedResult) {
      value = env.hooks.getValue(morph.linkedResult);
      hasValue = true;
    } else {
      var options = optionsFor(null, null, env, scope, morph);

      var helper = env.hooks.lookupHelper(env, scope, path);
      var result = env.hooks.invokeHelper(morph, env, scope, visitor, params, hash, helper, options.templates, thisFor(options.templates));

      if (result && result.link) {
        morph.linkedResult = result.value;
        _htmlbarsUtilMorphUtils.linkParams(env, scope, morph, '@content-helper', [morph.linkedResult], null);
      }

      if (result && 'value' in result) {
        value = env.hooks.getValue(result.value);
        hasValue = true;
      }
    }

    if (hasValue) {
      if (morph.lastValue !== value) {
        morph.setContent(value);
      }
      morph.lastValue = value;
    }
  }

  function keyword(path, morph, env, scope, params, hash, template, inverse, visitor) {
    handleKeyword(path, morph, env, scope, params, hash, template, inverse, visitor);
  }

  function invokeHelper(morph, env, scope, visitor, _params, _hash, helper, templates, context) {
    var params = normalizeArray(env, _params);
    var hash = normalizeObject(env, _hash);
    return { value: helper.call(context, params, hash, templates) };
  }

  function normalizeArray(env, array) {
    var out = new Array(array.length);

    for (var i = 0, l = array.length; i < l; i++) {
      out[i] = env.hooks.getCellOrValue(array[i]);
    }

    return out;
  }

  function normalizeObject(env, object) {
    var out = {};

    for (var prop in object) {
      out[prop] = env.hooks.getCellOrValue(object[prop]);
    }

    return out;
  }

  function classify() /* env, scope, path */{
    return null;
  }

  var keywords = {
    partial: function (morph, env, scope, params) {
      var value = env.hooks.partial(morph, env, scope, params[0]);
      morph.setContent(value);
      return true;
    },

    // quoted since it's a reserved word, see issue #420
    'yield': function (morph, env, scope, params, hash, template, inverse, visitor) {
      // the current scope is provided purely for the creation of shadow
      // scopes; it should not be provided to user code.

      var to = env.hooks.getValue(hash.to) || 'default';
      var block = env.hooks.getBlock(scope, to);

      if (block) {
        block.invoke(env, params, hash.self, morph, scope, visitor);
      }
      return true;
    },

    hasBlock: function (morph, env, scope, params) {
      var name = env.hooks.getValue(params[0]) || 'default';
      return !!env.hooks.getBlock(scope, name);
    },

    hasBlockParams: function (morph, env, scope, params) {
      var name = env.hooks.getValue(params[0]) || 'default';
      var block = env.hooks.getBlock(scope, name);
      return !!(block && block.arity);
    }

  };

  exports.keywords = keywords;
  /**
    Host Hook: partial
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
  
    Corresponds to:
  
    ```hbs
    {{partial "location"}}
    ```
  
    This host hook is invoked by the default implementation of
    the `inline` hook. This makes `partial` a keyword in an
    HTMLBars environment using the default `inline` host hook.
  
    It is implemented as a host hook so that it can retrieve
    the named partial out of the `Environment`. Helpers, in
    contrast, only have access to the values passed in to them,
    and not to the ambient lexical environment.
  
    The host hook should invoke the referenced partial with
    the ambient `self`.
  */

  function partial(renderNode, env, scope, path) {
    var template = env.partials[path];
    return template.render(scope.self, env, {}).fragment;
  }

  /**
    Host hook: range
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {any} value
  
    Corresponds to:
  
    ```hbs
    {{content}}
    {{{unescaped}}}
    ```
  
    This hook is responsible for updating a render node
    that represents a range of content with a value.
  */

  function range(morph, env, scope, path, value, visitor) {
    if (handleRedirect(morph, env, scope, path, [], {}, null, null, visitor)) {
      return;
    }

    value = env.hooks.getValue(value);

    if (morph.lastValue !== value) {
      morph.setContent(value);
    }

    morph.lastValue = value;
  }

  /**
    Host hook: element
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
    @param {Array} params
    @param {Hash} hash
  
    Corresponds to:
  
    ```hbs
    <div {{bind-attr foo=bar}}></div>
    ```
  
    This hook is responsible for invoking a helper that
    modifies an element.
  
    Its purpose is largely legacy support for awkward
    idioms that became common when using the string-based
    Handlebars engine.
  
    Most of the uses of the `element` hook are expected
    to be superseded by component syntax and the
    `attribute` hook.
  */

  function element(morph, env, scope, path, params, hash, visitor) {
    if (handleRedirect(morph, env, scope, path, params, hash, null, null, visitor)) {
      return;
    }

    var helper = env.hooks.lookupHelper(env, scope, path);
    if (helper) {
      env.hooks.invokeHelper(null, env, scope, null, params, hash, helper, { element: morph.element });
    }
  }

  /**
    Host hook: attribute
  
    @param {RenderNode} renderNode
    @param {Environment} env
    @param {String} name
    @param {any} value
  
    Corresponds to:
  
    ```hbs
    <div foo={{bar}}></div>
    ```
  
    This hook is responsible for updating a render node
    that represents an element's attribute with a value.
  
    It receives the name of the attribute as well as an
    already-resolved value, and should update the render
    node with the value if appropriate.
  */

  function attribute(morph, env, scope, name, value) {
    value = env.hooks.getValue(value);

    if (morph.lastValue !== value) {
      morph.setContent(value);
    }

    morph.lastValue = value;
  }

  function subexpr(env, scope, helperName, params, hash) {
    var helper = env.hooks.lookupHelper(env, scope, helperName);
    var result = env.hooks.invokeHelper(null, env, scope, null, params, hash, helper, {});
    if (result && 'value' in result) {
      return env.hooks.getValue(result.value);
    }
  }

  /**
    Host Hook: get
  
    @param {Environment} env
    @param {Scope} scope
    @param {String} path
  
    Corresponds to:
  
    ```hbs
    {{foo.bar}}
      ^
  
    {{helper foo.bar key=value}}
             ^           ^
    ```
  
    This hook is the "leaf" hook of the system. It is used to
    resolve a path relative to the current scope.
  */

  function get(env, scope, path) {
    if (path === '') {
      return scope.self;
    }

    var keys = path.split('.');
    var value = env.hooks.getRoot(scope, keys[0])[0];

    for (var i = 1; i < keys.length; i++) {
      if (value) {
        value = env.hooks.getChild(value, keys[i]);
      } else {
        break;
      }
    }

    return value;
  }

  function getRoot(scope, key) {
    if (scope.localPresent[key]) {
      return [scope.locals[key]];
    } else if (scope.self) {
      return [scope.self[key]];
    } else {
      return [undefined];
    }
  }

  function getBlock(scope, key) {
    return scope.blocks[key];
  }

  function getChild(value, key) {
    return value[key];
  }

  function getValue(reference) {
    return reference;
  }

  function getCellOrValue(reference) {
    return reference;
  }

  function component(morph, env, scope, tagName, params, attrs, templates, visitor) {
    if (env.hooks.hasHelper(env, scope, tagName)) {
      return env.hooks.block(morph, env, scope, tagName, params, attrs, templates.default, templates.inverse, visitor);
    }

    componentFallback(morph, env, scope, tagName, attrs, templates.default);
  }

  function concat(env, params) {
    var value = "";
    for (var i = 0, l = params.length; i < l; i++) {
      value += env.hooks.getValue(params[i]);
    }
    return value;
  }

  function componentFallback(morph, env, scope, tagName, attrs, template) {
    var element = env.dom.createElement(tagName);
    for (var name in attrs) {
      element.setAttribute(name, env.hooks.getValue(attrs[name]));
    }
    var fragment = _render.default(template, env, scope, {}).fragment;
    element.appendChild(fragment);
    morph.setNode(element);
  }

  function hasHelper(env, scope, helperName) {
    return env.helpers[helperName] !== undefined;
  }

  function lookupHelper(env, scope, helperName) {
    return env.helpers[helperName];
  }

  function bindScope() /* env, scope */{
    // this function is used to handle host-specified extensions to scope
    // other than `self`, `locals` and `block`.
  }

  function updateScope(env, scope) {
    env.hooks.bindScope(env, scope);
  }

  exports.default = {
    // fundamental hooks that you will likely want to override
    bindLocal: bindLocal,
    bindSelf: bindSelf,
    bindScope: bindScope,
    classify: classify,
    component: component,
    concat: concat,
    createFreshScope: createFreshScope,
    getChild: getChild,
    getRoot: getRoot,
    getBlock: getBlock,
    getValue: getValue,
    getCellOrValue: getCellOrValue,
    keywords: keywords,
    linkRenderNode: linkRenderNode,
    partial: partial,
    subexpr: subexpr,

    // fundamental hooks with good default behavior
    bindBlock: bindBlock,
    bindShadowScope: bindShadowScope,
    updateLocal: updateLocal,
    updateSelf: updateSelf,
    updateScope: updateScope,
    createChildScope: createChildScope,
    hasHelper: hasHelper,
    lookupHelper: lookupHelper,
    invokeHelper: invokeHelper,
    cleanupRenderNode: null,
    destroyRenderNode: null,
    willCleanupTree: null,
    didCleanupTree: null,
    willRenderNode: null,
    didRenderNode: null,

    // derived hooks
    attribute: attribute,
    block: block,
    createScope: createScope,
    element: element,
    get: get,
    inline: inline,
    range: range,
    keyword: keyword
  };
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-runtime/hooks.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-runtime');
  QUnit.test('htmlbars-runtime/hooks.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-runtime/hooks.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvaG9va3MuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDMUMsT0FBSyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMxRSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSwrQ0FBK0MsQ0FBQyxDQUFDO0dBQ2xFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1ydW50aW1lL2hvb2tzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtcnVudGltZScpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtcnVudGltZS9ob29rcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtcnVudGltZS9ob29rcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-runtime/morph", ["exports", "../morph-range"], function (exports, _morphRange) {

  var guid = 1;

  function HTMLBarsMorph(domHelper, contextualElement) {
    this.super$constructor(domHelper, contextualElement);

    this._state = undefined;
    this.ownerNode = null;
    this.isDirty = false;
    this.isSubtreeDirty = false;
    this.lastYielded = null;
    this.lastResult = null;
    this.lastValue = null;
    this.buildChildEnv = null;
    this.morphList = null;
    this.morphMap = null;
    this.key = null;
    this.linkedParams = null;
    this.linkedResult = null;
    this.childNodes = null;
    this.rendered = false;
    this.guid = "range" + guid++;
    this.seen = false;
  }

  HTMLBarsMorph.empty = function (domHelper, contextualElement) {
    var morph = new HTMLBarsMorph(domHelper, contextualElement);
    morph.clear();
    return morph;
  };

  HTMLBarsMorph.create = function (domHelper, contextualElement, node) {
    var morph = new HTMLBarsMorph(domHelper, contextualElement);
    morph.setNode(node);
    return morph;
  };

  HTMLBarsMorph.attach = function (domHelper, contextualElement, firstNode, lastNode) {
    var morph = new HTMLBarsMorph(domHelper, contextualElement);
    morph.setRange(firstNode, lastNode);
    return morph;
  };

  var prototype = HTMLBarsMorph.prototype = Object.create(_morphRange.default.prototype);
  prototype.constructor = HTMLBarsMorph;
  prototype.super$constructor = _morphRange.default;

  prototype.getState = function () {
    if (!this._state) {
      this._state = {};
    }

    return this._state;
  };

  prototype.setState = function (newState) {
    /*jshint -W093 */

    return this._state = newState;
  };

  exports.default = HTMLBarsMorph;
});
//# sourceMappingURL=data:application/json;base64,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LE1BQU0sR0FBRyxRQUFRLENBQUM7R0FDL0IsQ0FBQzs7b0JBR2EsYUFBYSIsImZpbGUiOiJodG1sYmFycy1ydW50aW1lL21vcnBoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vcnBoQmFzZSBmcm9tIFwiLi4vbW9ycGgtcmFuZ2VcIjtcblxudmFyIGd1aWQgPSAxO1xuXG5mdW5jdGlvbiBIVE1MQmFyc01vcnBoKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQpIHtcbiAgdGhpcy5zdXBlciRjb25zdHJ1Y3Rvcihkb21IZWxwZXIsIGNvbnRleHR1YWxFbGVtZW50KTtcblxuICB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5vd25lck5vZGUgPSBudWxsO1xuICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgdGhpcy5pc1N1YnRyZWVEaXJ0eSA9IGZhbHNlO1xuICB0aGlzLmxhc3RZaWVsZGVkID0gbnVsbDtcbiAgdGhpcy5sYXN0UmVzdWx0ID0gbnVsbDtcbiAgdGhpcy5sYXN0VmFsdWUgPSBudWxsO1xuICB0aGlzLmJ1aWxkQ2hpbGRFbnYgPSBudWxsO1xuICB0aGlzLm1vcnBoTGlzdCA9IG51bGw7XG4gIHRoaXMubW9ycGhNYXAgPSBudWxsO1xuICB0aGlzLmtleSA9IG51bGw7XG4gIHRoaXMubGlua2VkUGFyYW1zID0gbnVsbDtcbiAgdGhpcy5saW5rZWRSZXN1bHQgPSBudWxsO1xuICB0aGlzLmNoaWxkTm9kZXMgPSBudWxsO1xuICB0aGlzLnJlbmRlcmVkID0gZmFsc2U7XG4gIHRoaXMuZ3VpZCA9IFwicmFuZ2VcIiArIGd1aWQrKztcbiAgdGhpcy5zZWVuID0gZmFsc2U7XG59XG5cbkhUTUxCYXJzTW9ycGguZW1wdHkgPSBmdW5jdGlvbihkb21IZWxwZXIsIGNvbnRleHR1YWxFbGVtZW50KSB7XG4gIHZhciBtb3JwaCA9IG5ldyBIVE1MQmFyc01vcnBoKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQpO1xuICBtb3JwaC5jbGVhcigpO1xuICByZXR1cm4gbW9ycGg7XG59O1xuXG5IVE1MQmFyc01vcnBoLmNyZWF0ZSA9IGZ1bmN0aW9uIChkb21IZWxwZXIsIGNvbnRleHR1YWxFbGVtZW50LCBub2RlKSB7XG4gIHZhciBtb3JwaCA9IG5ldyBIVE1MQmFyc01vcnBoKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQpO1xuICBtb3JwaC5zZXROb2RlKG5vZGUpO1xuICByZXR1cm4gbW9ycGg7XG59O1xuXG5IVE1MQmFyc01vcnBoLmF0dGFjaCA9IGZ1bmN0aW9uIChkb21IZWxwZXIsIGNvbnRleHR1YWxFbGVtZW50LCBmaXJzdE5vZGUsIGxhc3ROb2RlKSB7XG4gIHZhciBtb3JwaCA9IG5ldyBIVE1MQmFyc01vcnBoKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQpO1xuICBtb3JwaC5zZXRSYW5nZShmaXJzdE5vZGUsIGxhc3ROb2RlKTtcbiAgcmV0dXJuIG1vcnBoO1xufTtcblxudmFyIHByb3RvdHlwZSA9IEhUTUxCYXJzTW9ycGgucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb3JwaEJhc2UucHJvdG90eXBlKTtcbnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhUTUxCYXJzTW9ycGg7XG5wcm90b3R5cGUuc3VwZXIkY29uc3RydWN0b3IgPSBNb3JwaEJhc2U7XG5cbnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3N0YXRlKSB7XG4gICAgdGhpcy5fc3RhdGUgPSB7fTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9zdGF0ZTtcbn07XG5cbnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uKG5ld1N0YXRlKSB7XG4gIC8qanNoaW50IC1XMDkzICovXG5cbiAgcmV0dXJuIHRoaXMuX3N0YXRlID0gbmV3U3RhdGU7XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhUTUxCYXJzTW9ycGg7XG4iXX0=
define('htmlbars-runtime/morph.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-runtime');
  QUnit.test('htmlbars-runtime/morph.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-runtime/morph.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvbW9ycGguanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDMUMsT0FBSyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMxRSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSwrQ0FBK0MsQ0FBQyxDQUFDO0dBQ2xFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1ydW50aW1lL21vcnBoLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtcnVudGltZScpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtcnVudGltZS9tb3JwaC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtcnVudGltZS9tb3JwaC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-runtime/node-visitor", ["exports", "../htmlbars-util/morph-utils", "./expression-visitor"], function (exports, _htmlbarsUtilMorphUtils, _expressionVisitor) {

  /**
    Node classification:
  
    # Primary Statement Nodes:
  
    These nodes are responsible for a render node that represents a morph-range.
  
    * block
    * inline
    * content
    * element
    * component
  
    # Leaf Statement Nodes:
  
    This node is responsible for a render node that represents a morph-attr.
  
    * attribute
  */

  function linkParamsAndHash(env, scope, morph, path, params, hash) {
    if (morph.linkedParams) {
      params = morph.linkedParams.params;
      hash = morph.linkedParams.hash;
    } else {
      params = params && _expressionVisitor.acceptParams(params, env, scope);
      hash = hash && _expressionVisitor.acceptHash(hash, env, scope);
    }

    _htmlbarsUtilMorphUtils.linkParams(env, scope, morph, path, params, hash);
    return [params, hash];
  }

  var AlwaysDirtyVisitor = {

    block: function (node, morph, env, scope, template, visitor) {
      var path = node[1];
      var params = node[2];
      var hash = node[3];
      var templateId = node[4];
      var inverseId = node[5];

      var paramsAndHash = linkParamsAndHash(env, scope, morph, path, params, hash);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.block(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], templateId === null ? null : template.templates[templateId], inverseId === null ? null : template.templates[inverseId], visitor);
    },

    inline: function (node, morph, env, scope, visitor) {
      var path = node[1];
      var params = node[2];
      var hash = node[3];

      var paramsAndHash = linkParamsAndHash(env, scope, morph, path, params, hash);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.inline(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], visitor);
    },

    content: function (node, morph, env, scope, visitor) {
      var path = node[1];

      morph.isDirty = morph.isSubtreeDirty = false;

      if (isHelper(env, scope, path)) {
        env.hooks.inline(morph, env, scope, path, [], {}, visitor);
        if (morph.linkedResult) {
          _htmlbarsUtilMorphUtils.linkParams(env, scope, morph, '@content-helper', [morph.linkedResult], null);
        }
        return;
      }

      var params = undefined;
      if (morph.linkedParams) {
        params = morph.linkedParams.params;
      } else {
        params = [env.hooks.get(env, scope, path)];
      }

      _htmlbarsUtilMorphUtils.linkParams(env, scope, morph, '@range', params, null);
      env.hooks.range(morph, env, scope, path, params[0], visitor);
    },

    element: function (node, morph, env, scope, visitor) {
      var path = node[1];
      var params = node[2];
      var hash = node[3];

      var paramsAndHash = linkParamsAndHash(env, scope, morph, path, params, hash);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.element(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], visitor);
    },

    attribute: function (node, morph, env, scope) {
      var name = node[1];
      var value = node[2];

      var paramsAndHash = linkParamsAndHash(env, scope, morph, '@attribute', [value], null);

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.attribute(morph, env, scope, name, paramsAndHash[0][0]);
    },

    component: function (node, morph, env, scope, template, visitor) {
      var path = node[1];
      var attrs = node[2];
      var templateId = node[3];
      var inverseId = node[4];

      var paramsAndHash = linkParamsAndHash(env, scope, morph, path, [], attrs);
      var templates = {
        default: template.templates[templateId],
        inverse: template.templates[inverseId]
      };

      morph.isDirty = morph.isSubtreeDirty = false;
      env.hooks.component(morph, env, scope, path, paramsAndHash[0], paramsAndHash[1], templates, visitor);
    },

    attributes: function (node, morph, env, scope, parentMorph, visitor) {
      var template = node[1];

      env.hooks.attributes(morph, env, scope, template, parentMorph, visitor);
    }

  };

  exports.AlwaysDirtyVisitor = AlwaysDirtyVisitor;
  exports.default = {
    block: function (node, morph, env, scope, template, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.block(node, morph, env, scope, template, visitor);
      });
    },

    inline: function (node, morph, env, scope, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.inline(node, morph, env, scope, visitor);
      });
    },

    content: function (node, morph, env, scope, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.content(node, morph, env, scope, visitor);
      });
    },

    element: function (node, morph, env, scope, template, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.element(node, morph, env, scope, template, visitor);
      });
    },

    attribute: function (node, morph, env, scope, template) {
      dirtyCheck(env, morph, null, function () {
        AlwaysDirtyVisitor.attribute(node, morph, env, scope, template);
      });
    },

    component: function (node, morph, env, scope, template, visitor) {
      dirtyCheck(env, morph, visitor, function (visitor) {
        AlwaysDirtyVisitor.component(node, morph, env, scope, template, visitor);
      });
    },

    attributes: function (node, morph, env, scope, parentMorph, visitor) {
      AlwaysDirtyVisitor.attributes(node, morph, env, scope, parentMorph, visitor);
    }
  };

  function dirtyCheck(_env, morph, visitor, callback) {
    var isDirty = morph.isDirty;
    var isSubtreeDirty = morph.isSubtreeDirty;
    var env = _env;

    if (isSubtreeDirty) {
      visitor = AlwaysDirtyVisitor;
    }

    if (isDirty || isSubtreeDirty) {
      callback(visitor);
    } else {
      if (morph.buildChildEnv) {
        env = morph.buildChildEnv(morph.getState(), env);
      }
      _htmlbarsUtilMorphUtils.validateChildMorphs(env, morph, visitor);
    }
  }

  function isHelper(env, scope, path) {
    return env.hooks.keywords[path] !== undefined || env.hooks.hasHelper(env, scope, path);
  }
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-runtime/node-visitor.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-runtime');
  QUnit.test('htmlbars-runtime/node-visitor.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-runtime/node-visitor.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvbm9kZS12aXNpdG9yLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLE9BQUssQ0FBQyxJQUFJLENBQUMscURBQXFELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDakYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsc0RBQXNELENBQUMsQ0FBQztHQUN6RSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS9ub2RlLXZpc2l0b3IuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1ydW50aW1lJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1ydW50aW1lL25vZGUtdmlzaXRvci5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtcnVudGltZS9ub2RlLXZpc2l0b3IuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-runtime/render", ["exports", "../htmlbars-util/morph-utils", "./node-visitor", "./morph", "../htmlbars-util/template-utils", "../htmlbars-util/void-tag-names"], function (exports, _htmlbarsUtilMorphUtils, _nodeVisitor, _morph, _htmlbarsUtilTemplateUtils, _htmlbarsUtilVoidTagNames) {
  exports.default = render;
  exports.RenderOptions = RenderOptions;
  exports.manualElement = manualElement;
  exports.attachAttributes = attachAttributes;
  exports.createChildMorph = createChildMorph;
  exports.getCachedFragment = getCachedFragment;

  var svgNamespace = "http://www.w3.org/2000/svg";

  function render(template, env, scope, options) {
    var dom = env.dom;
    var contextualElement;

    if (options) {
      if (options.renderNode) {
        contextualElement = options.renderNode.contextualElement;
      } else if (options.contextualElement) {
        contextualElement = options.contextualElement;
      }
    }

    dom.detectNamespace(contextualElement);

    var renderResult = RenderResult.build(env, scope, template, options, contextualElement);
    renderResult.render();

    return renderResult;
  }

  function RenderOptions(renderNode, self, blockArguments, contextualElement) {
    this.renderNode = renderNode || null;
    this.self = self;
    this.blockArguments = blockArguments || null;
    this.contextualElement = contextualElement || null;
  }

  function RenderResult(env, scope, options, rootNode, ownerNode, nodes, fragment, template, shouldSetContent) {
    this.root = rootNode;
    this.fragment = fragment;

    this.nodes = nodes;
    this.template = template;
    this.statements = template.statements.slice();
    this.env = env;
    this.scope = scope;
    this.shouldSetContent = shouldSetContent;

    if (options.self !== undefined) {
      this.bindSelf(options.self);
    }
    if (options.blockArguments !== undefined) {
      this.bindLocals(options.blockArguments);
    }

    this.initializeNodes(ownerNode);
  }

  RenderResult.build = function (env, scope, template, options, contextualElement) {
    var dom = env.dom;
    var fragment = getCachedFragment(template, env);
    var nodes = template.buildRenderNodes(dom, fragment, contextualElement);

    var rootNode, ownerNode, shouldSetContent;

    if (options && options.renderNode) {
      rootNode = options.renderNode;
      ownerNode = rootNode.ownerNode;
      shouldSetContent = true;
    } else {
      rootNode = dom.createMorph(null, fragment.firstChild, fragment.lastChild, contextualElement);
      ownerNode = rootNode;
      rootNode.ownerNode = ownerNode;
      shouldSetContent = false;
    }

    if (rootNode.childNodes) {
      _htmlbarsUtilMorphUtils.visitChildren(rootNode.childNodes, function (node) {
        _htmlbarsUtilTemplateUtils.clearMorph(node, env, true);
      });
    }

    rootNode.childNodes = nodes;
    return new RenderResult(env, scope, options, rootNode, ownerNode, nodes, fragment, template, shouldSetContent);
  };

  function manualElement(tagName, attributes, _isEmpty) {
    var statements = [];

    for (var key in attributes) {
      if (typeof attributes[key] === 'string') {
        continue;
      }

      statements.push(_htmlbarsUtilTemplateUtils.buildStatement("attribute", key, attributes[key]));
    }

    var isEmpty = _isEmpty || _htmlbarsUtilVoidTagNames.default[tagName];

    if (!isEmpty) {
      statements.push(_htmlbarsUtilTemplateUtils.buildStatement('content', 'yield'));
    }

    var template = {
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        if (tagName === 'svg') {
          dom.setNamespace(svgNamespace);
        }
        var el1 = dom.createElement(tagName);

        for (var key in attributes) {
          if (typeof attributes[key] !== 'string') {
            continue;
          }
          dom.setAttribute(el1, key, attributes[key]);
        }

        if (!isEmpty) {
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
        }

        dom.appendChild(el0, el1);

        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment) {
        var element = dom.childAt(fragment, [0]);
        var morphs = [];

        for (var key in attributes) {
          if (typeof attributes[key] === 'string') {
            continue;
          }
          morphs.push(dom.createAttrMorph(element, key));
        }

        if (!isEmpty) {
          morphs.push(dom.createMorphAt(element, 0, 0));
        }

        return morphs;
      },
      statements: statements,
      locals: [],
      templates: []
    };

    return template;
  }

  function attachAttributes(attributes) {
    var statements = [];

    for (var key in attributes) {
      if (typeof attributes[key] === 'string') {
        continue;
      }
      statements.push(_htmlbarsUtilTemplateUtils.buildStatement("attribute", key, attributes[key]));
    }

    var template = {
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = this.element;
        if (el0.namespaceURI === "http://www.w3.org/2000/svg") {
          dom.setNamespace(svgNamespace);
        }
        for (var key in attributes) {
          if (typeof attributes[key] !== 'string') {
            continue;
          }
          dom.setAttribute(el0, key, attributes[key]);
        }

        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom) {
        var element = this.element;
        var morphs = [];

        for (var key in attributes) {
          if (typeof attributes[key] === 'string') {
            continue;
          }
          morphs.push(dom.createAttrMorph(element, key));
        }

        return morphs;
      },
      statements: statements,
      locals: [],
      templates: [],
      element: null
    };

    return template;
  }

  RenderResult.prototype.initializeNodes = function (ownerNode) {
    var childNodes = this.root.childNodes;

    for (var i = 0, l = childNodes.length; i < l; i++) {
      childNodes[i].ownerNode = ownerNode;
    }
  };

  RenderResult.prototype.render = function () {
    this.root.lastResult = this;
    this.root.rendered = true;
    this.populateNodes(_nodeVisitor.AlwaysDirtyVisitor);

    if (this.shouldSetContent && this.root.setContent) {
      this.root.setContent(this.fragment);
    }
  };

  RenderResult.prototype.dirty = function () {
    _htmlbarsUtilMorphUtils.visitChildren([this.root], function (node) {
      node.isDirty = true;
    });
  };

  RenderResult.prototype.revalidate = function (env, self, blockArguments, scope) {
    this.revalidateWith(env, scope, self, blockArguments, _nodeVisitor.default);
  };

  RenderResult.prototype.rerender = function (env, self, blockArguments, scope) {
    this.revalidateWith(env, scope, self, blockArguments, _nodeVisitor.AlwaysDirtyVisitor);
  };

  RenderResult.prototype.revalidateWith = function (env, scope, self, blockArguments, visitor) {
    if (env !== undefined) {
      this.env = env;
    }
    if (scope !== undefined) {
      this.scope = scope;
    }
    this.updateScope();

    if (self !== undefined) {
      this.updateSelf(self);
    }
    if (blockArguments !== undefined) {
      this.updateLocals(blockArguments);
    }

    this.populateNodes(visitor);
  };

  RenderResult.prototype.destroy = function () {
    var rootNode = this.root;
    _htmlbarsUtilTemplateUtils.clearMorph(rootNode, this.env, true);
  };

  RenderResult.prototype.populateNodes = function (visitor) {
    var env = this.env;
    var scope = this.scope;
    var template = this.template;
    var nodes = this.nodes;
    var statements = this.statements;
    var i, l;

    for (i = 0, l = statements.length; i < l; i++) {
      var statement = statements[i];
      var morph = nodes[i];

      if (env.hooks.willRenderNode) {
        env.hooks.willRenderNode(morph, env, scope);
      }

      switch (statement[0]) {
        case 'block':
          visitor.block(statement, morph, env, scope, template, visitor);break;
        case 'inline':
          visitor.inline(statement, morph, env, scope, visitor);break;
        case 'content':
          visitor.content(statement, morph, env, scope, visitor);break;
        case 'element':
          visitor.element(statement, morph, env, scope, template, visitor);break;
        case 'attribute':
          visitor.attribute(statement, morph, env, scope);break;
        case 'component':
          visitor.component(statement, morph, env, scope, template, visitor);break;
      }

      if (env.hooks.didRenderNode) {
        env.hooks.didRenderNode(morph, env, scope);
      }
    }
  };

  RenderResult.prototype.bindScope = function () {
    this.env.hooks.bindScope(this.env, this.scope);
  };

  RenderResult.prototype.updateScope = function () {
    this.env.hooks.updateScope(this.env, this.scope);
  };

  RenderResult.prototype.bindSelf = function (self) {
    this.env.hooks.bindSelf(this.env, this.scope, self);
  };

  RenderResult.prototype.updateSelf = function (self) {
    this.env.hooks.updateSelf(this.env, this.scope, self);
  };

  RenderResult.prototype.bindLocals = function (blockArguments) {
    var localNames = this.template.locals;

    for (var i = 0, l = localNames.length; i < l; i++) {
      this.env.hooks.bindLocal(this.env, this.scope, localNames[i], blockArguments[i]);
    }
  };

  RenderResult.prototype.updateLocals = function (blockArguments) {
    var localNames = this.template.locals;

    for (var i = 0, l = localNames.length; i < l; i++) {
      this.env.hooks.updateLocal(this.env, this.scope, localNames[i], blockArguments[i]);
    }
  };

  function initializeNode(node, owner) {
    node.ownerNode = owner;
  }

  function createChildMorph(dom, parentMorph, contextualElement) {
    var morph = _morph.default.empty(dom, contextualElement || parentMorph.contextualElement);
    initializeNode(morph, parentMorph.ownerNode);
    return morph;
  }

  function getCachedFragment(template, env) {
    var dom = env.dom,
        fragment;
    if (env.useFragmentCache && dom.canClone) {
      if (template.cachedFragment === null) {
        fragment = template.buildFragment(dom);
        if (template.hasRendered) {
          template.cachedFragment = fragment;
        } else {
          template.hasRendered = true;
        }
      }
      if (template.cachedFragment) {
        fragment = dom.cloneNode(template.cachedFragment, true);
      }
    } else if (!fragment) {
      fragment = template.buildFragment(dom);
    }

    return fragment;
  }
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-runtime/render.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-runtime');
  QUnit.test('htmlbars-runtime/render.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-runtime/render.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvcmVuZGVyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLE9BQUssQ0FBQyxJQUFJLENBQUMsK0NBQStDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDM0UsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsZ0RBQWdELENBQUMsQ0FBQztHQUNuRSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS9yZW5kZXIuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1ydW50aW1lJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1ydW50aW1lL3JlbmRlci5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtcnVudGltZS9yZW5kZXIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-test-helpers", ["exports", "../simple-html-tokenizer/index", "../htmlbars-util/array-utils"], function (exports, _simpleHtmlTokenizerIndex, _htmlbarsUtilArrayUtils) {
  exports.equalInnerHTML = equalInnerHTML;
  exports.equalHTML = equalHTML;
  exports.equalTokens = equalTokens;
  exports.normalizeInnerHTML = normalizeInnerHTML;
  exports.isCheckedInputHTML = isCheckedInputHTML;
  exports.getTextContent = getTextContent;

  function equalInnerHTML(fragment, html) {
    var actualHTML = normalizeInnerHTML(fragment.innerHTML);
    QUnit.push(actualHTML === html, actualHTML, html);
  }

  function equalHTML(node, html) {
    var fragment;
    if (!node.nodeType && node.length) {
      fragment = document.createDocumentFragment();
      while (node[0]) {
        fragment.appendChild(node[0]);
      }
    } else {
      fragment = node;
    }

    var div = document.createElement("div");
    div.appendChild(fragment.cloneNode(true));

    equalInnerHTML(div, html);
  }

  function generateTokens(fragmentOrHtml) {
    var div = document.createElement("div");
    if (typeof fragmentOrHtml === 'string') {
      div.innerHTML = fragmentOrHtml;
    } else {
      div.appendChild(fragmentOrHtml.cloneNode(true));
    }

    return { tokens: _simpleHtmlTokenizerIndex.tokenize(div.innerHTML), html: div.innerHTML };
  }

  function equalTokens(fragment, html, message) {
    if (fragment.fragment) {
      fragment = fragment.fragment;
    }
    if (html.fragment) {
      html = html.fragment;
    }

    var fragTokens = generateTokens(fragment);
    var htmlTokens = generateTokens(html);

    function normalizeTokens(token) {
      if (token.type === 'StartTag') {
        token.attributes = token.attributes.sort(function (a, b) {
          if (a[0] > b[0]) {
            return 1;
          }
          if (a[0] < b[0]) {
            return -1;
          }
          return 0;
        });
      }
    }

    _htmlbarsUtilArrayUtils.forEach(fragTokens.tokens, normalizeTokens);
    _htmlbarsUtilArrayUtils.forEach(htmlTokens.tokens, normalizeTokens);

    var msg = "Expected: " + html + "; Actual: " + fragTokens.html;

    if (message) {
      msg += " (" + message + ")";
    }

    deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
  }

  // detect side-effects of cloning svg elements in IE9-11
  var ieSVGInnerHTML = (function () {
    if (!document.createElementNS) {
      return false;
    }
    var div = document.createElement('div');
    var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    div.appendChild(node);
    var clone = div.cloneNode(true);
    return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
  })();

  function normalizeInnerHTML(actualHTML) {
    if (ieSVGInnerHTML) {
      // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
      // drop namespace attribute
      actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
      // replace self-closing elements
      actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
        return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
      });
    }

    return actualHTML;
  }

  // detect weird IE8 checked element string
  var checkedInput = document.createElement('input');
  checkedInput.setAttribute('checked', 'checked');
  var checkedInputString = checkedInput.outerHTML;

  function isCheckedInputHTML(element) {
    equal(element.outerHTML, checkedInputString);
  }

  // check which property has the node's text content
  var textProperty = document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';

  function getTextContent(el) {
    // textNode
    if (el.nodeType === 3) {
      return el.nodeValue;
    } else {
      return el[textProperty];
    }
  }
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-test-helpers.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('htmlbars-test-helpers.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-test-helpers.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXRlc3QtaGVscGVycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0IsT0FBSyxDQUFDLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4Q0FBOEMsQ0FBQyxDQUFDO0dBQ2pFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy10ZXN0LWhlbHBlcnMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSAuJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy10ZXN0LWhlbHBlcnMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXRlc3QtaGVscGVycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("morph-attr", ["exports", "./morph-attr/sanitize-attribute-value", "./dom-helper/prop", "./dom-helper/build-html-dom", "./htmlbars-util"], function (exports, _morphAttrSanitizeAttributeValue, _domHelperProp, _domHelperBuildHtmlDom, _htmlbarsUtil) {

  function getProperty() {
    return this.domHelper.getPropertyStrict(this.element, this.attrName);
  }

  function updateProperty(value) {
    if (this._renderedInitially === true || !_domHelperProp.isAttrRemovalValue(value)) {
      var element = this.element;
      var attrName = this.attrName;

      if (attrName === 'value' && element.tagName === 'INPUT' && element.value === value) {
        // Do nothing. Attempts to avoid accidently changing the input cursor location.
        // See https://github.com/tildeio/htmlbars/pull/447 for more details.
      } else {
          // do not render if initial value is undefined or null
          this.domHelper.setPropertyStrict(element, attrName, value);
        }
    }

    this._renderedInitially = true;
  }

  function getAttribute() {
    return this.domHelper.getAttribute(this.element, this.attrName);
  }

  // normalize to be more inline with updateProperty behavior
  function normalizeAttributeValue(value) {
    if (value === false || value === undefined || value === null) {
      return null;
    }
    if (value === true) {
      return '';
    }
    // onclick function etc in SSR
    if (typeof value === 'function') {
      return null;
    }
    return String(value);
  }

  function updateAttribute(_value) {
    var value = normalizeAttributeValue(_value);
    if (_domHelperProp.isAttrRemovalValue(value)) {
      this.domHelper.removeAttribute(this.element, this.attrName);
    } else {
      this.domHelper.setAttribute(this.element, this.attrName, value);
    }
  }

  function getAttributeNS() {
    return this.domHelper.getAttributeNS(this.element, this.namespace, this.attrName);
  }

  function updateAttributeNS(_value) {
    var value = normalizeAttributeValue(_value);
    if (_domHelperProp.isAttrRemovalValue(value)) {
      this.domHelper.removeAttribute(this.element, this.attrName);
    } else {
      this.domHelper.setAttributeNS(this.element, this.namespace, this.attrName, value);
    }
  }

  var UNSET = { unset: true };

  var guid = 1;

  AttrMorph.create = function (element, attrName, domHelper, namespace) {
    var ns = _htmlbarsUtil.getAttrNamespace(attrName, namespace);

    if (ns) {
      return new AttributeNSAttrMorph(element, attrName, domHelper, ns);
    } else {
      return createNonNamespacedAttrMorph(element, attrName, domHelper);
    }
  };

  function createNonNamespacedAttrMorph(element, attrName, domHelper) {
    var _normalizeProperty = _domHelperProp.normalizeProperty(element, attrName);

    var normalized = _normalizeProperty.normalized;
    var type = _normalizeProperty.type;

    if (element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace || attrName === 'style' || type === 'attr') {
      return new AttributeAttrMorph(element, normalized, domHelper);
    } else {
      return new PropertyAttrMorph(element, normalized, domHelper);
    }
  }

  function AttrMorph(element, attrName, domHelper) {
    this.element = element;
    this.domHelper = domHelper;
    this.attrName = attrName;
    this._state = undefined;
    this.isDirty = false;
    this.isSubtreeDirty = false;
    this.escaped = true;
    this.lastValue = UNSET;
    this.lastResult = null;
    this.lastYielded = null;
    this.childNodes = null;
    this.linkedParams = null;
    this.linkedResult = null;
    this.guid = "attr" + guid++;
    this.seen = false;
    this.ownerNode = null;
    this.rendered = false;
    this._renderedInitially = false;
    this.namespace = undefined;
    this.didInit();
  }

  AttrMorph.prototype.getState = function () {
    if (!this._state) {
      this._state = {};
    }

    return this._state;
  };

  AttrMorph.prototype.setState = function (newState) {
    /*jshint -W093 */

    return this._state = newState;
  };

  AttrMorph.prototype.didInit = function () {};
  AttrMorph.prototype.willSetContent = function () {};

  AttrMorph.prototype.setContent = function (value) {
    this.willSetContent(value);

    if (this.lastValue === value) {
      return;
    }
    this.lastValue = value;

    if (this.escaped) {
      var sanitized = _morphAttrSanitizeAttributeValue.sanitizeAttributeValue(this.domHelper, this.element, this.attrName, value);
      this._update(sanitized, this.namespace);
    } else {
      this._update(value, this.namespace);
    }
  };

  AttrMorph.prototype.getContent = function () {
    var value = this.lastValue = this._get();
    return value;
  };

  // renderAndCleanup calls `clear` on all items in the morph map
  // just before calling `destroy` on the morph.
  //
  // As a future refactor this could be changed to set the property
  // back to its original/default value.
  AttrMorph.prototype.clear = function () {};

  AttrMorph.prototype.destroy = function () {
    this.element = null;
    this.domHelper = null;
  };

  AttrMorph.prototype._$superAttrMorph = AttrMorph;

  function PropertyAttrMorph(element, attrName, domHelper) {
    this._$superAttrMorph(element, attrName, domHelper);
  }

  PropertyAttrMorph.prototype = Object.create(AttrMorph.prototype);
  PropertyAttrMorph.prototype._update = updateProperty;
  PropertyAttrMorph.prototype._get = getProperty;

  function AttributeNSAttrMorph(element, attrName, domHelper, namespace) {
    this._$superAttrMorph(element, attrName, domHelper);
    this.namespace = namespace;
  }

  AttributeNSAttrMorph.prototype = Object.create(AttrMorph.prototype);
  AttributeNSAttrMorph.prototype._update = updateAttributeNS;
  AttributeNSAttrMorph.prototype._get = getAttributeNS;

  function AttributeAttrMorph(element, attrName, domHelper) {
    this._$superAttrMorph(element, attrName, domHelper);
  }

  AttributeAttrMorph.prototype = Object.create(AttrMorph.prototype);
  AttributeAttrMorph.prototype._update = updateAttribute;
  AttributeAttrMorph.prototype._get = getAttribute;

  exports.default = AttrMorph;
  exports.sanitizeAttributeValue = _morphAttrSanitizeAttributeValue.sanitizeAttributeValue;
});
//# sourceMappingURL=data:application/json;base64,
define('morph-attr.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('morph-attr.js should pass jshint', function (assert) {
    assert.ok(true, 'morph-attr.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLWF0dHIuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNCLE9BQUssQ0FBQyxJQUFJLENBQUMsa0NBQWtDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDOUQsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztHQUN0RCxDQUFDLENBQUMiLCJmaWxlIjoibW9ycGgtYXR0ci5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIC4nKTtcblFVbml0LnRlc3QoJ21vcnBoLWF0dHIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ21vcnBoLWF0dHIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('morph-attr/sanitize-attribute-value', ['exports'], function (exports) {
  exports.sanitizeAttributeValue = sanitizeAttributeValue;
  /* jshint scripturl:true */

  var badProtocols = {
    'javascript:': true,
    'vbscript:': true
  };

  var badTags = {
    'A': true,
    'BODY': true,
    'LINK': true,
    'IMG': true,
    'IFRAME': true,
    'BASE': true,
    'FORM': true
  };

  var badTagsForDataURI = {
    'EMBED': true
  };

  var badAttributes = {
    'href': true,
    'src': true,
    'background': true,
    'action': true
  };

  exports.badAttributes = badAttributes;
  var badAttributesForDataURI = {
    'src': true
  };

  function sanitizeAttributeValue(dom, element, attribute, value) {
    var tagName;

    if (!element) {
      tagName = null;
    } else {
      tagName = element.tagName.toUpperCase();
    }

    if (value && value.toHTML) {
      return value.toHTML();
    }

    if ((tagName === null || badTags[tagName]) && badAttributes[attribute]) {
      var protocol = dom.protocolForURL(value);
      if (badProtocols[protocol] === true) {
        return 'unsafe:' + value;
      }
    }

    if (badTagsForDataURI[tagName] && badAttributesForDataURI[attribute]) {
      return 'unsafe:' + value;
    }

    return value;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLWF0dHIvc2FuaXRpemUtYXR0cmlidXRlLXZhbHVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxNQUFJLFlBQVksR0FBRztBQUNqQixpQkFBYSxFQUFFLElBQUk7QUFDbkIsZUFBVyxFQUFFLElBQUk7R0FDbEIsQ0FBQzs7QUFFRixNQUFJLE9BQU8sR0FBRztBQUNaLE9BQUcsRUFBRSxJQUFJO0FBQ1QsVUFBTSxFQUFFLElBQUk7QUFDWixVQUFNLEVBQUUsSUFBSTtBQUNaLFNBQUssRUFBRSxJQUFJO0FBQ1gsWUFBUSxFQUFFLElBQUk7QUFDZCxVQUFNLEVBQUUsSUFBSTtBQUNaLFVBQU0sRUFBRSxJQUFJO0dBQ2IsQ0FBQzs7QUFFRixNQUFJLGlCQUFpQixHQUFHO0FBQ3RCLFdBQU8sRUFBRSxJQUFJO0dBQ2QsQ0FBQzs7QUFFSyxNQUFJLGFBQWEsR0FBRztBQUN6QixVQUFNLEVBQUUsSUFBSTtBQUNaLFNBQUssRUFBRSxJQUFJO0FBQ1gsZ0JBQVksRUFBRSxJQUFJO0FBQ2xCLFlBQVEsRUFBRSxJQUFJO0dBQ2YsQ0FBQzs7O0FBRUYsTUFBSSx1QkFBdUIsR0FBRztBQUM1QixTQUFLLEVBQUUsSUFBSTtHQUNaLENBQUM7O0FBRUssV0FBUyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7QUFDckUsUUFBSSxPQUFPLENBQUM7O0FBRVosUUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNaLGFBQU8sR0FBRyxJQUFJLENBQUM7S0FDaEIsTUFBTTtBQUNMLGFBQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3pDOztBQUVELFFBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDekIsYUFBTyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDdkI7O0FBRUQsUUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBLElBQUssYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ3RFLFVBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsVUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0FBQ25DLGVBQU8sU0FBUyxHQUFHLEtBQUssQ0FBQztPQUMxQjtLQUNGOztBQUVELFFBQUksaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksdUJBQXVCLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDcEUsYUFBTyxTQUFTLEdBQUcsS0FBSyxDQUFDO0tBQzFCOztBQUVELFdBQU8sS0FBSyxDQUFDO0dBQ2QiLCJmaWxlIjoibW9ycGgtYXR0ci9zYW5pdGl6ZS1hdHRyaWJ1dGUtdmFsdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgc2NyaXB0dXJsOnRydWUgKi9cblxudmFyIGJhZFByb3RvY29scyA9IHtcbiAgJ2phdmFzY3JpcHQ6JzogdHJ1ZSxcbiAgJ3Zic2NyaXB0Oic6IHRydWVcbn07XG5cbnZhciBiYWRUYWdzID0ge1xuICAnQSc6IHRydWUsXG4gICdCT0RZJzogdHJ1ZSxcbiAgJ0xJTksnOiB0cnVlLFxuICAnSU1HJzogdHJ1ZSxcbiAgJ0lGUkFNRSc6IHRydWUsXG4gICdCQVNFJzogdHJ1ZSxcbiAgJ0ZPUk0nOiB0cnVlXG59O1xuXG52YXIgYmFkVGFnc0ZvckRhdGFVUkkgPSB7XG4gICdFTUJFRCc6IHRydWVcbn07XG5cbmV4cG9ydCB2YXIgYmFkQXR0cmlidXRlcyA9IHtcbiAgJ2hyZWYnOiB0cnVlLFxuICAnc3JjJzogdHJ1ZSxcbiAgJ2JhY2tncm91bmQnOiB0cnVlLFxuICAnYWN0aW9uJzogdHJ1ZVxufTtcblxudmFyIGJhZEF0dHJpYnV0ZXNGb3JEYXRhVVJJID0ge1xuICAnc3JjJzogdHJ1ZVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplQXR0cmlidXRlVmFsdWUoZG9tLCBlbGVtZW50LCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciB0YWdOYW1lO1xuXG4gIGlmICghZWxlbWVudCkge1xuICAgIHRhZ05hbWUgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRhZ05hbWUgPSBlbGVtZW50LnRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS50b0hUTUwpIHtcbiAgICByZXR1cm4gdmFsdWUudG9IVE1MKCk7XG4gIH1cblxuICBpZiAoKHRhZ05hbWUgPT09IG51bGwgfHwgYmFkVGFnc1t0YWdOYW1lXSkgJiYgYmFkQXR0cmlidXRlc1thdHRyaWJ1dGVdKSB7XG4gICAgdmFyIHByb3RvY29sID0gZG9tLnByb3RvY29sRm9yVVJMKHZhbHVlKTtcbiAgICBpZiAoYmFkUHJvdG9jb2xzW3Byb3RvY29sXSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuICd1bnNhZmU6JyArIHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChiYWRUYWdzRm9yRGF0YVVSSVt0YWdOYW1lXSAmJiBiYWRBdHRyaWJ1dGVzRm9yRGF0YVVSSVthdHRyaWJ1dGVdKSB7XG4gICAgcmV0dXJuICd1bnNhZmU6JyArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuIl19
define('morph-attr/sanitize-attribute-value.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - morph-attr');
  QUnit.test('morph-attr/sanitize-attribute-value.js should pass jshint', function (assert) {
    assert.ok(true, 'morph-attr/sanitize-attribute-value.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLWF0dHIvc2FuaXRpemUtYXR0cmlidXRlLXZhbHVlLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3BDLE9BQUssQ0FBQyxJQUFJLENBQUMsMkRBQTJELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdkYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsNERBQTRELENBQUMsQ0FBQztHQUMvRSxDQUFDLENBQUMiLCJmaWxlIjoibW9ycGgtYXR0ci9zYW5pdGl6ZS1hdHRyaWJ1dGUtdmFsdWUuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBtb3JwaC1hdHRyJyk7XG5RVW5pdC50ZXN0KCdtb3JwaC1hdHRyL3Nhbml0aXplLWF0dHJpYnV0ZS12YWx1ZS5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnbW9ycGgtYXR0ci9zYW5pdGl6ZS1hdHRyaWJ1dGUtdmFsdWUuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('morph-range', ['exports', './morph-range/utils'], function (exports, _morphRangeUtils) {

  // constructor just initializes the fields
  // use one of the static initializers to create a valid morph.
  function Morph(domHelper, contextualElement) {
    this.domHelper = domHelper;
    // context if content if current content is detached
    this.contextualElement = contextualElement;
    // inclusive range of morph
    // these should be nodeType 1, 3, or 8
    this.firstNode = null;
    this.lastNode = null;

    // flag to force text to setContent to be treated as html
    this.parseTextAsHTML = false;

    // morph list graph
    this.parentMorphList = null;
    this.previousMorph = null;
    this.nextMorph = null;
  }

  Morph.empty = function (domHelper, contextualElement) {
    var morph = new Morph(domHelper, contextualElement);
    morph.clear();
    return morph;
  };

  Morph.create = function (domHelper, contextualElement, node) {
    var morph = new Morph(domHelper, contextualElement);
    morph.setNode(node);
    return morph;
  };

  Morph.attach = function (domHelper, contextualElement, firstNode, lastNode) {
    var morph = new Morph(domHelper, contextualElement);
    morph.setRange(firstNode, lastNode);
    return morph;
  };

  Morph.prototype.setContent = function Morph$setContent(content) {
    if (content === null || content === undefined) {
      return this.clear();
    }

    var type = typeof content;
    switch (type) {
      case 'string':
        if (this.parseTextAsHTML) {
          return this.domHelper.setMorphHTML(this, content);
        }
        return this.setText(content);
      case 'object':
        if (typeof content.nodeType === 'number') {
          return this.setNode(content);
        }
        /* Handlebars.SafeString */
        if (typeof content.toHTML === 'function') {
          return this.setHTML(content.toHTML());
        }
        if (this.parseTextAsHTML) {
          return this.setHTML(content.toString());
        }
      /* falls through */
      case 'boolean':
      case 'number':
        return this.setText(content.toString());
      case 'function':
        raiseCannotBindToFunction(content);
      default:
        throw new TypeError('unsupported content');
    }
  };

  function raiseCannotBindToFunction(content) {
    var functionName = content.name;
    var message;

    if (functionName) {
      message = 'Unsupported Content: Cannot bind to function `' + functionName + '`';
    } else {
      message = 'Unsupported Content: Cannot bind to function';
    }

    throw new TypeError(message);
  }

  Morph.prototype.clear = function Morph$clear() {
    var node = this.setNode(this.domHelper.createComment(''));
    return node;
  };

  Morph.prototype.setText = function Morph$setText(text) {
    var firstNode = this.firstNode;
    var lastNode = this.lastNode;

    if (firstNode && lastNode === firstNode && firstNode.nodeType === 3) {
      firstNode.nodeValue = text;
      return firstNode;
    }

    return this.setNode(text ? this.domHelper.createTextNode(text) : this.domHelper.createComment(''));
  };

  Morph.prototype.setNode = function Morph$setNode(newNode) {
    var firstNode, lastNode;
    switch (newNode.nodeType) {
      case 3:
        firstNode = newNode;
        lastNode = newNode;
        break;
      case 11:
        firstNode = newNode.firstChild;
        lastNode = newNode.lastChild;
        if (firstNode === null) {
          firstNode = this.domHelper.createComment('');
          newNode.appendChild(firstNode);
          lastNode = firstNode;
        }
        break;
      default:
        firstNode = newNode;
        lastNode = newNode;
        break;
    }

    this.setRange(firstNode, lastNode);

    return newNode;
  };

  Morph.prototype.setRange = function (firstNode, lastNode) {
    var previousFirstNode = this.firstNode;
    if (previousFirstNode !== null) {

      var parentNode = previousFirstNode.parentNode;
      if (parentNode !== null) {
        _morphRangeUtils.insertBefore(parentNode, firstNode, lastNode, previousFirstNode);
        _morphRangeUtils.clear(parentNode, previousFirstNode, this.lastNode);
      }
    }

    this.firstNode = firstNode;
    this.lastNode = lastNode;

    if (this.parentMorphList) {
      this._syncFirstNode();
      this._syncLastNode();
    }
  };

  Morph.prototype.destroy = function Morph$destroy() {
    this.unlink();

    var firstNode = this.firstNode;
    var lastNode = this.lastNode;
    var parentNode = firstNode && firstNode.parentNode;

    this.firstNode = null;
    this.lastNode = null;

    _morphRangeUtils.clear(parentNode, firstNode, lastNode);
  };

  Morph.prototype.unlink = function Morph$unlink() {
    var parentMorphList = this.parentMorphList;
    var previousMorph = this.previousMorph;
    var nextMorph = this.nextMorph;

    if (previousMorph) {
      if (nextMorph) {
        previousMorph.nextMorph = nextMorph;
        nextMorph.previousMorph = previousMorph;
      } else {
        previousMorph.nextMorph = null;
        parentMorphList.lastChildMorph = previousMorph;
      }
    } else {
      if (nextMorph) {
        nextMorph.previousMorph = null;
        parentMorphList.firstChildMorph = nextMorph;
      } else if (parentMorphList) {
        parentMorphList.lastChildMorph = parentMorphList.firstChildMorph = null;
      }
    }

    this.parentMorphList = null;
    this.nextMorph = null;
    this.previousMorph = null;

    if (parentMorphList && parentMorphList.mountedMorph) {
      if (!parentMorphList.firstChildMorph) {
        // list is empty
        parentMorphList.mountedMorph.clear();
        return;
      } else {
        parentMorphList.firstChildMorph._syncFirstNode();
        parentMorphList.lastChildMorph._syncLastNode();
      }
    }
  };

  Morph.prototype.setHTML = function (text) {
    var fragment = this.domHelper.parseHTML(text, this.contextualElement);
    return this.setNode(fragment);
  };

  Morph.prototype.setMorphList = function Morph$appendMorphList(morphList) {
    morphList.mountedMorph = this;
    this.clear();

    var originalFirstNode = this.firstNode;

    if (morphList.firstChildMorph) {
      this.firstNode = morphList.firstChildMorph.firstNode;
      this.lastNode = morphList.lastChildMorph.lastNode;

      var current = morphList.firstChildMorph;

      while (current) {
        var next = current.nextMorph;
        current.insertBeforeNode(originalFirstNode, null);
        current = next;
      }
      originalFirstNode.parentNode.removeChild(originalFirstNode);
    }
  };

  Morph.prototype._syncFirstNode = function Morph$syncFirstNode() {
    var morph = this;
    var parentMorphList;
    while (parentMorphList = morph.parentMorphList) {
      if (parentMorphList.mountedMorph === null) {
        break;
      }
      if (morph !== parentMorphList.firstChildMorph) {
        break;
      }
      if (morph.firstNode === parentMorphList.mountedMorph.firstNode) {
        break;
      }

      parentMorphList.mountedMorph.firstNode = morph.firstNode;

      morph = parentMorphList.mountedMorph;
    }
  };

  Morph.prototype._syncLastNode = function Morph$syncLastNode() {
    var morph = this;
    var parentMorphList;
    while (parentMorphList = morph.parentMorphList) {
      if (parentMorphList.mountedMorph === null) {
        break;
      }
      if (morph !== parentMorphList.lastChildMorph) {
        break;
      }
      if (morph.lastNode === parentMorphList.mountedMorph.lastNode) {
        break;
      }

      parentMorphList.mountedMorph.lastNode = morph.lastNode;

      morph = parentMorphList.mountedMorph;
    }
  };

  Morph.prototype.insertBeforeNode = function Morph$insertBeforeNode(parentNode, refNode) {
    _morphRangeUtils.insertBefore(parentNode, this.firstNode, this.lastNode, refNode);
  };

  Morph.prototype.appendToNode = function Morph$appendToNode(parentNode) {
    _morphRangeUtils.insertBefore(parentNode, this.firstNode, this.lastNode, null);
  };

  exports.default = Morph;
});
//# sourceMappingURL=data:application/json;base64,
define('morph-range.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('morph-range.js should pass jshint', function (assert) {
    assert.ok(false, 'morph-range.js should pass jshint.\nmorph-range.js: line 69, col 41, Expected a \'break\' statement before \'default\'.\nmorph-range.js: line 236, col 49, Expected a conditional expression and instead saw an assignment.\nmorph-range.js: line 256, col 49, Expected a conditional expression and instead saw an assignment.\n\n3 errors');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMzQixPQUFLLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQy9ELFVBQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLDZVQUE2VSxDQUFDLENBQUM7R0FDalcsQ0FBQyxDQUFDIiwiZmlsZSI6Im1vcnBoLXJhbmdlLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gLicpO1xuUVVuaXQudGVzdCgnbW9ycGgtcmFuZ2UuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2soZmFsc2UsICdtb3JwaC1yYW5nZS5qcyBzaG91bGQgcGFzcyBqc2hpbnQuXFxubW9ycGgtcmFuZ2UuanM6IGxpbmUgNjksIGNvbCA0MSwgRXhwZWN0ZWQgYSBcXCdicmVha1xcJyBzdGF0ZW1lbnQgYmVmb3JlIFxcJ2RlZmF1bHRcXCcuXFxubW9ycGgtcmFuZ2UuanM6IGxpbmUgMjM2LCBjb2wgNDksIEV4cGVjdGVkIGEgY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBhbmQgaW5zdGVhZCBzYXcgYW4gYXNzaWdubWVudC5cXG5tb3JwaC1yYW5nZS5qczogbGluZSAyNTYsIGNvbCA0OSwgRXhwZWN0ZWQgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIGFuZCBpbnN0ZWFkIHNhdyBhbiBhc3NpZ25tZW50LlxcblxcbjMgZXJyb3JzJyk7IFxufSk7XG4iXX0=
define('morph-range.umd', ['exports', './morph-range'], function (exports, _morphRange) {

  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      define([], factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.Morph = factory();
    }
  })(this, function () {
    return _morphRange.default;
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlLnVtZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLEFBQUMsR0FBQSxVQUFVLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDeEIsUUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtBQUM5QyxZQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3JCLE1BQU0sSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7QUFDdEMsWUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsQ0FBQztLQUM1QixNQUFNO0FBQ0wsVUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLEVBQUUsQ0FBQztLQUN4QjtHQUNGLENBQUEsQ0FBQyxJQUFJLEVBQUUsWUFBWTtBQUNsQiwrQkFBYTtHQUNkLENBQUMsQ0FBRSIsImZpbGUiOiJtb3JwaC1yYW5nZS51bWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9ycGggZnJvbSAnLi9tb3JwaC1yYW5nZSc7XG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICByb290Lk1vcnBoID0gZmFjdG9yeSgpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE1vcnBoO1xufSkpO1xuIl19
define('morph-range.umd.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('morph-range.umd.js should pass jshint', function (assert) {
    assert.ok(false, 'morph-range.umd.js should pass jshint.\nmorph-range.umd.js: line 4, col 39, \'define\' is not defined.\nmorph-range.umd.js: line 5, col 5, \'define\' is not defined.\nmorph-range.umd.js: line 7, col 5, \'module\' is not defined.\n\n3 errors');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlLnVtZC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0IsT0FBSyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUNuRSxVQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxrUEFBa1AsQ0FBQyxDQUFDO0dBQ3RRLENBQUMsQ0FBQyIsImZpbGUiOiJtb3JwaC1yYW5nZS51bWQuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSAuJyk7XG5RVW5pdC50ZXN0KCdtb3JwaC1yYW5nZS51bWQuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2soZmFsc2UsICdtb3JwaC1yYW5nZS51bWQuanMgc2hvdWxkIHBhc3MganNoaW50Llxcbm1vcnBoLXJhbmdlLnVtZC5qczogbGluZSA0LCBjb2wgMzksIFxcJ2RlZmluZVxcJyBpcyBub3QgZGVmaW5lZC5cXG5tb3JwaC1yYW5nZS51bWQuanM6IGxpbmUgNSwgY29sIDUsIFxcJ2RlZmluZVxcJyBpcyBub3QgZGVmaW5lZC5cXG5tb3JwaC1yYW5nZS51bWQuanM6IGxpbmUgNywgY29sIDUsIFxcJ21vZHVsZVxcJyBpcyBub3QgZGVmaW5lZC5cXG5cXG4zIGVycm9ycycpOyBcbn0pO1xuIl19
define('morph-range/morph-list', ['exports', './utils'], function (exports, _utils) {

  function MorphList() {
    // morph graph
    this.firstChildMorph = null;
    this.lastChildMorph = null;

    this.mountedMorph = null;
  }

  var prototype = MorphList.prototype;

  prototype.clear = function MorphList$clear() {
    var current = this.firstChildMorph;

    while (current) {
      var next = current.nextMorph;
      current.previousMorph = null;
      current.nextMorph = null;
      current.parentMorphList = null;
      current = next;
    }

    this.firstChildMorph = this.lastChildMorph = null;
  };

  prototype.destroy = function MorphList$destroy() {};

  prototype.appendMorph = function MorphList$appendMorph(morph) {
    this.insertBeforeMorph(morph, null);
  };

  prototype.insertBeforeMorph = function MorphList$insertBeforeMorph(morph, referenceMorph) {
    if (morph.parentMorphList !== null) {
      morph.unlink();
    }
    if (referenceMorph && referenceMorph.parentMorphList !== this) {
      throw new Error('The morph before which the new morph is to be inserted is not a child of this morph.');
    }

    var mountedMorph = this.mountedMorph;

    if (mountedMorph) {

      var parentNode = mountedMorph.firstNode.parentNode;
      var referenceNode = referenceMorph ? referenceMorph.firstNode : mountedMorph.lastNode.nextSibling;

      _utils.insertBefore(parentNode, morph.firstNode, morph.lastNode, referenceNode);

      // was not in list mode replace current content
      if (!this.firstChildMorph) {
        _utils.clear(this.mountedMorph.firstNode.parentNode, this.mountedMorph.firstNode, this.mountedMorph.lastNode);
      }
    }

    morph.parentMorphList = this;

    var previousMorph = referenceMorph ? referenceMorph.previousMorph : this.lastChildMorph;
    if (previousMorph) {
      previousMorph.nextMorph = morph;
      morph.previousMorph = previousMorph;
    } else {
      this.firstChildMorph = morph;
    }

    if (referenceMorph) {
      referenceMorph.previousMorph = morph;
      morph.nextMorph = referenceMorph;
    } else {
      this.lastChildMorph = morph;
    }

    this.firstChildMorph._syncFirstNode();
    this.lastChildMorph._syncLastNode();
  };

  prototype.removeChildMorph = function MorphList$removeChildMorph(morph) {
    if (morph.parentMorphList !== this) {
      throw new Error("Cannot remove a morph from a parent it is not inside of");
    }

    morph.destroy();
  };

  exports.default = MorphList;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlL21vcnBoLWxpc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxXQUFTLFNBQVMsR0FBRzs7QUFFbkIsUUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDNUIsUUFBSSxDQUFDLGNBQWMsR0FBSSxJQUFJLENBQUM7O0FBRTVCLFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0dBQzFCOztBQUVELE1BQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUM7O0FBRXBDLFdBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxlQUFlLEdBQUc7QUFDM0MsUUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQzs7QUFFbkMsV0FBTyxPQUFPLEVBQUU7QUFDZCxVQUFJLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzdCLGFBQU8sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzdCLGFBQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLGFBQU8sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0FBQy9CLGFBQU8sR0FBRyxJQUFJLENBQUM7S0FDaEI7O0FBRUQsUUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztHQUNuRCxDQUFDOztBQUVGLFdBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxpQkFBaUIsR0FBRyxFQUNoRCxDQUFDOztBQUVGLFdBQVMsQ0FBQyxXQUFXLEdBQUcsU0FBUyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUU7QUFDNUQsUUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztHQUNyQyxDQUFDOztBQUVGLFdBQVMsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLDJCQUEyQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7QUFDeEYsUUFBSSxLQUFLLENBQUMsZUFBZSxLQUFLLElBQUksRUFBRTtBQUNsQyxXQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDaEI7QUFDRCxRQUFJLGNBQWMsSUFBSSxjQUFjLENBQUMsZUFBZSxLQUFLLElBQUksRUFBRTtBQUM3RCxZQUFNLElBQUksS0FBSyxDQUFDLHNGQUFzRixDQUFDLENBQUM7S0FDekc7O0FBRUQsUUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQzs7QUFFckMsUUFBSSxZQUFZLEVBQUU7O0FBRWhCLFVBQUksVUFBVSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQ25ELFVBQUksYUFBYSxHQUFHLGNBQWMsR0FBRyxjQUFjLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDOztBQUVsRyxhQWhEWSxZQUFZLENBaUR0QixVQUFVLEVBQ1YsS0FBSyxDQUFDLFNBQVMsRUFDZixLQUFLLENBQUMsUUFBUSxFQUNkLGFBQWEsQ0FDZCxDQUFDOzs7QUFHRixVQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUN6QixlQXpERyxLQUFLLENBeURGLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDbkM7S0FDRjs7QUFFRCxTQUFLLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQzs7QUFFN0IsUUFBSSxhQUFhLEdBQUcsY0FBYyxHQUFHLGNBQWMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztBQUN4RixRQUFJLGFBQWEsRUFBRTtBQUNqQixtQkFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDaEMsV0FBSyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7S0FDckMsTUFBTTtBQUNMLFVBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0tBQzlCOztBQUVELFFBQUksY0FBYyxFQUFFO0FBQ2xCLG9CQUFjLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUNyQyxXQUFLLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQztLQUNsQyxNQUFNO0FBQ0wsVUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7S0FDN0I7O0FBRUQsUUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN0QyxRQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3JDLENBQUM7O0FBRUYsV0FBUyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsMEJBQTBCLENBQUMsS0FBSyxFQUFFO0FBQ3RFLFFBQUksS0FBSyxDQUFDLGVBQWUsS0FBSyxJQUFJLEVBQUU7QUFDbEMsWUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO0tBQzVFOztBQUVELFNBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUNqQixDQUFDOztvQkFFYSxTQUFTIiwiZmlsZSI6Im1vcnBoLXJhbmdlL21vcnBoLWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbGVhciwgaW5zZXJ0QmVmb3JlIH0gZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIE1vcnBoTGlzdCgpIHtcbiAgLy8gbW9ycGggZ3JhcGhcbiAgdGhpcy5maXJzdENoaWxkTW9ycGggPSBudWxsO1xuICB0aGlzLmxhc3RDaGlsZE1vcnBoICA9IG51bGw7XG5cbiAgdGhpcy5tb3VudGVkTW9ycGggPSBudWxsO1xufVxuXG52YXIgcHJvdG90eXBlID0gTW9ycGhMaXN0LnByb3RvdHlwZTtcblxucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gTW9ycGhMaXN0JGNsZWFyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuZmlyc3RDaGlsZE1vcnBoO1xuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgdmFyIG5leHQgPSBjdXJyZW50Lm5leHRNb3JwaDtcbiAgICBjdXJyZW50LnByZXZpb3VzTW9ycGggPSBudWxsO1xuICAgIGN1cnJlbnQubmV4dE1vcnBoID0gbnVsbDtcbiAgICBjdXJyZW50LnBhcmVudE1vcnBoTGlzdCA9IG51bGw7XG4gICAgY3VycmVudCA9IG5leHQ7XG4gIH1cblxuICB0aGlzLmZpcnN0Q2hpbGRNb3JwaCA9IHRoaXMubGFzdENoaWxkTW9ycGggPSBudWxsO1xufTtcblxucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBNb3JwaExpc3QkZGVzdHJveSgpIHtcbn07XG5cbnByb3RvdHlwZS5hcHBlbmRNb3JwaCA9IGZ1bmN0aW9uIE1vcnBoTGlzdCRhcHBlbmRNb3JwaChtb3JwaCkge1xuICB0aGlzLmluc2VydEJlZm9yZU1vcnBoKG1vcnBoLCBudWxsKTtcbn07XG5cbnByb3RvdHlwZS5pbnNlcnRCZWZvcmVNb3JwaCA9IGZ1bmN0aW9uIE1vcnBoTGlzdCRpbnNlcnRCZWZvcmVNb3JwaChtb3JwaCwgcmVmZXJlbmNlTW9ycGgpIHtcbiAgaWYgKG1vcnBoLnBhcmVudE1vcnBoTGlzdCAhPT0gbnVsbCkge1xuICAgIG1vcnBoLnVubGluaygpO1xuICB9XG4gIGlmIChyZWZlcmVuY2VNb3JwaCAmJiByZWZlcmVuY2VNb3JwaC5wYXJlbnRNb3JwaExpc3QgIT09IHRoaXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtb3JwaCBiZWZvcmUgd2hpY2ggdGhlIG5ldyBtb3JwaCBpcyB0byBiZSBpbnNlcnRlZCBpcyBub3QgYSBjaGlsZCBvZiB0aGlzIG1vcnBoLicpO1xuICB9XG5cbiAgdmFyIG1vdW50ZWRNb3JwaCA9IHRoaXMubW91bnRlZE1vcnBoO1xuXG4gIGlmIChtb3VudGVkTW9ycGgpIHtcblxuICAgIHZhciBwYXJlbnROb2RlID0gbW91bnRlZE1vcnBoLmZpcnN0Tm9kZS5wYXJlbnROb2RlO1xuICAgIHZhciByZWZlcmVuY2VOb2RlID0gcmVmZXJlbmNlTW9ycGggPyByZWZlcmVuY2VNb3JwaC5maXJzdE5vZGUgOiBtb3VudGVkTW9ycGgubGFzdE5vZGUubmV4dFNpYmxpbmc7XG5cbiAgICBpbnNlcnRCZWZvcmUoXG4gICAgICBwYXJlbnROb2RlLFxuICAgICAgbW9ycGguZmlyc3ROb2RlLFxuICAgICAgbW9ycGgubGFzdE5vZGUsXG4gICAgICByZWZlcmVuY2VOb2RlXG4gICAgKTtcblxuICAgIC8vIHdhcyBub3QgaW4gbGlzdCBtb2RlIHJlcGxhY2UgY3VycmVudCBjb250ZW50XG4gICAgaWYgKCF0aGlzLmZpcnN0Q2hpbGRNb3JwaCkge1xuICAgICAgY2xlYXIodGhpcy5tb3VudGVkTW9ycGguZmlyc3ROb2RlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICB0aGlzLm1vdW50ZWRNb3JwaC5maXJzdE5vZGUsXG4gICAgICAgICAgICB0aGlzLm1vdW50ZWRNb3JwaC5sYXN0Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgbW9ycGgucGFyZW50TW9ycGhMaXN0ID0gdGhpcztcblxuICB2YXIgcHJldmlvdXNNb3JwaCA9IHJlZmVyZW5jZU1vcnBoID8gcmVmZXJlbmNlTW9ycGgucHJldmlvdXNNb3JwaCA6IHRoaXMubGFzdENoaWxkTW9ycGg7XG4gIGlmIChwcmV2aW91c01vcnBoKSB7XG4gICAgcHJldmlvdXNNb3JwaC5uZXh0TW9ycGggPSBtb3JwaDtcbiAgICBtb3JwaC5wcmV2aW91c01vcnBoID0gcHJldmlvdXNNb3JwaDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpcnN0Q2hpbGRNb3JwaCA9IG1vcnBoO1xuICB9XG5cbiAgaWYgKHJlZmVyZW5jZU1vcnBoKSB7XG4gICAgcmVmZXJlbmNlTW9ycGgucHJldmlvdXNNb3JwaCA9IG1vcnBoO1xuICAgIG1vcnBoLm5leHRNb3JwaCA9IHJlZmVyZW5jZU1vcnBoO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoaWxkTW9ycGggPSBtb3JwaDtcbiAgfVxuXG4gIHRoaXMuZmlyc3RDaGlsZE1vcnBoLl9zeW5jRmlyc3ROb2RlKCk7XG4gIHRoaXMubGFzdENoaWxkTW9ycGguX3N5bmNMYXN0Tm9kZSgpO1xufTtcblxucHJvdG90eXBlLnJlbW92ZUNoaWxkTW9ycGggPSBmdW5jdGlvbiBNb3JwaExpc3QkcmVtb3ZlQ2hpbGRNb3JwaChtb3JwaCkge1xuICBpZiAobW9ycGgucGFyZW50TW9ycGhMaXN0ICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlbW92ZSBhIG1vcnBoIGZyb20gYSBwYXJlbnQgaXQgaXMgbm90IGluc2lkZSBvZlwiKTtcbiAgfVxuXG4gIG1vcnBoLmRlc3Ryb3koKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vcnBoTGlzdDtcbiJdfQ==
define('morph-range/morph-list.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - morph-range');
  QUnit.test('morph-range/morph-list.js should pass jshint', function (assert) {
    assert.ok(true, 'morph-range/morph-list.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlL21vcnBoLWxpc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDckMsT0FBSyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMxRSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSwrQ0FBK0MsQ0FBQyxDQUFDO0dBQ2xFLENBQUMsQ0FBQyIsImZpbGUiOiJtb3JwaC1yYW5nZS9tb3JwaC1saXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gbW9ycGgtcmFuZ2UnKTtcblFVbml0LnRlc3QoJ21vcnBoLXJhbmdlL21vcnBoLWxpc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ21vcnBoLXJhbmdlL21vcnBoLWxpc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('morph-range/morph-list.umd', ['exports', './morph-list'], function (exports, _morphList) {

  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      define([], factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.MorphList = factory();
    }
  })(this, function () {
    return _morphList.default;
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlL21vcnBoLWxpc3QudW1kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsQUFBQyxHQUFBLFVBQVUsSUFBSSxFQUFFLE9BQU8sRUFBRTtBQUN4QixRQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO0FBQzlDLFlBQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDckIsTUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtBQUN0QyxZQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sRUFBRSxDQUFDO0tBQzVCLE1BQU07QUFDTCxVQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sRUFBRSxDQUFDO0tBQzVCO0dBQ0YsQ0FBQSxDQUFDLElBQUksRUFBRSxZQUFZO0FBQ2xCLDhCQUFpQjtHQUNsQixDQUFDLENBQUUiLCJmaWxlIjoibW9ycGgtcmFuZ2UvbW9ycGgtbGlzdC51bWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9ycGhMaXN0IGZyb20gJy4vbW9ycGgtbGlzdCc7XG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICByb290Lk1vcnBoTGlzdCA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBNb3JwaExpc3Q7XG59KSk7XG4iXX0=
define('morph-range/morph-list.umd.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - morph-range');
  QUnit.test('morph-range/morph-list.umd.js should pass jshint', function (assert) {
    assert.ok(false, 'morph-range/morph-list.umd.js should pass jshint.\nmorph-range/morph-list.umd.js: line 4, col 39, \'define\' is not defined.\nmorph-range/morph-list.umd.js: line 5, col 5, \'define\' is not defined.\nmorph-range/morph-list.umd.js: line 7, col 5, \'module\' is not defined.\n\n3 errors');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlL21vcnBoLWxpc3QudW1kLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3JDLE9BQUssQ0FBQyxJQUFJLENBQUMsa0RBQWtELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDOUUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsOFJBQThSLENBQUMsQ0FBQztHQUNsVCxDQUFDLENBQUMiLCJmaWxlIjoibW9ycGgtcmFuZ2UvbW9ycGgtbGlzdC51bWQuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBtb3JwaC1yYW5nZScpO1xuUVVuaXQudGVzdCgnbW9ycGgtcmFuZ2UvbW9ycGgtbGlzdC51bWQuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2soZmFsc2UsICdtb3JwaC1yYW5nZS9tb3JwaC1saXN0LnVtZC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuXFxubW9ycGgtcmFuZ2UvbW9ycGgtbGlzdC51bWQuanM6IGxpbmUgNCwgY29sIDM5LCBcXCdkZWZpbmVcXCcgaXMgbm90IGRlZmluZWQuXFxubW9ycGgtcmFuZ2UvbW9ycGgtbGlzdC51bWQuanM6IGxpbmUgNSwgY29sIDUsIFxcJ2RlZmluZVxcJyBpcyBub3QgZGVmaW5lZC5cXG5tb3JwaC1yYW5nZS9tb3JwaC1saXN0LnVtZC5qczogbGluZSA3LCBjb2wgNSwgXFwnbW9kdWxlXFwnIGlzIG5vdCBkZWZpbmVkLlxcblxcbjMgZXJyb3JzJyk7IFxufSk7XG4iXX0=
define("morph-range/utils", ["exports"], function (exports) {
  exports.clear = clear;
  exports.insertBefore = insertBefore;
  // inclusive of both nodes

  function clear(parentNode, firstNode, lastNode) {
    if (!parentNode) {
      return;
    }

    var node = firstNode;
    var nextNode;
    do {
      nextNode = node.nextSibling;
      parentNode.removeChild(node);
      if (node === lastNode) {
        break;
      }
      node = nextNode;
    } while (node);
  }

  function insertBefore(parentNode, firstNode, lastNode, refNode) {
    var node = firstNode;
    var nextNode;
    do {
      nextNode = node.nextSibling;
      parentNode.insertBefore(node, refNode);
      if (node === lastNode) {
        break;
      }
      node = nextNode;
    } while (node);
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ08sV0FBUyxLQUFLLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUU7QUFDckQsUUFBSSxDQUFDLFVBQVUsRUFBRTtBQUFFLGFBQU87S0FBRTs7QUFFNUIsUUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQ3JCLFFBQUksUUFBUSxDQUFDO0FBQ2IsT0FBRztBQUNELGNBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLGdCQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLFVBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtBQUNyQixjQUFNO09BQ1A7QUFDRCxVQUFJLEdBQUcsUUFBUSxDQUFDO0tBQ2pCLFFBQVEsSUFBSSxFQUFFO0dBQ2hCOztBQUVNLFdBQVMsWUFBWSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtBQUNyRSxRQUFJLElBQUksR0FBRyxTQUFTLENBQUM7QUFDckIsUUFBSSxRQUFRLENBQUM7QUFDYixPQUFHO0FBQ0QsY0FBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDNUIsZ0JBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLFVBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtBQUNyQixjQUFNO09BQ1A7QUFDRCxVQUFJLEdBQUcsUUFBUSxDQUFDO0tBQ2pCLFFBQVEsSUFBSSxFQUFFO0dBQ2hCIiwiZmlsZSI6Im1vcnBoLXJhbmdlL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW5jbHVzaXZlIG9mIGJvdGggbm9kZXNcbmV4cG9ydCBmdW5jdGlvbiBjbGVhcihwYXJlbnROb2RlLCBmaXJzdE5vZGUsIGxhc3ROb2RlKSB7XG4gIGlmICghcGFyZW50Tm9kZSkgeyByZXR1cm47IH1cblxuICB2YXIgbm9kZSA9IGZpcnN0Tm9kZTtcbiAgdmFyIG5leHROb2RlO1xuICBkbyB7XG4gICAgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5vZGUgPT09IGxhc3ROb2RlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbm9kZSA9IG5leHROb2RlO1xuICB9IHdoaWxlIChub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnROb2RlLCBmaXJzdE5vZGUsIGxhc3ROb2RlLCByZWZOb2RlKSB7XG4gIHZhciBub2RlID0gZmlyc3ROb2RlO1xuICB2YXIgbmV4dE5vZGU7XG4gIGRvIHtcbiAgICBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSk7XG4gICAgaWYgKG5vZGUgPT09IGxhc3ROb2RlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbm9kZSA9IG5leHROb2RlO1xuICB9IHdoaWxlIChub2RlKTtcbn1cbiJdfQ==
define('morph-range/utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - morph-range');
  QUnit.test('morph-range/utils.js should pass jshint', function (assert) {
    assert.ok(true, 'morph-range/utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnBoLXJhbmdlL3V0aWxzLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3JDLE9BQUssQ0FBQyxJQUFJLENBQUMseUNBQXlDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDckUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsMENBQTBDLENBQUMsQ0FBQztHQUM3RCxDQUFDLENBQUMiLCJmaWxlIjoibW9ycGgtcmFuZ2UvdXRpbHMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBtb3JwaC1yYW5nZScpO1xuUVVuaXQudGVzdCgnbW9ycGgtcmFuZ2UvdXRpbHMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ21vcnBoLXJhbmdlL3V0aWxzLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==