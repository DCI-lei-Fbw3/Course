exports.__esModule = true;
exports.acceptParams = acceptParams;
exports.acceptHash = acceptHash;
/**
  # Expression Nodes:

  These nodes are not directly responsible for any part of the DOM, but are
  eventually passed to a Statement Node.

  * get
  * subexpr
  * concat
*/

function acceptParams(nodes, env, scope) {
  var array = [];

  for (var i = 0, l = nodes.length; i < l; i++) {
    array.push(acceptExpression(nodes[i], env, scope).value);
  }

  return array;
}

function acceptHash(pairs, env, scope) {
  var object = {};

  for (var i = 0, l = pairs.length; i < l; i += 2) {
    var key = pairs[i];
    var value = pairs[i + 1];
    object[key] = acceptExpression(value, env, scope).value;
  }

  return object;
}

function acceptExpression(node, env, scope) {
  var ret = { value: null };

  // Primitive literals are unambiguously non-array representations of
  // themselves.
  if (Array.isArray(node)) {
    // if (node.length !== 7) { throw new Error('FIXME: Invalid statement length!'); }

    ret.value = evaluateNode(node, env, scope);
  } else {
    ret.value = node;
  }

  return ret;
}

function evaluateNode(node, env, scope) {
  switch (node[0]) {
    // can be used by manualElement
    case 'value':
      return node[1];
    case 'get':
      return evaluateGet(node, env, scope);
    case 'subexpr':
      return evaluateSubexpr(node, env, scope);
    case 'concat':
      return evaluateConcat(node, env, scope);
  }
}

function evaluateGet(node, env, scope) {
  var path = node[1];

  return env.hooks.get(env, scope, path);
}

function evaluateSubexpr(node, env, scope) {
  var path = node[1];
  var rawParams = node[2];
  var rawHash = node[3];

  var params = acceptParams(rawParams, env, scope);
  var hash = acceptHash(rawHash, env, scope);

  return env.hooks.subexpr(env, scope, path, params, hash);
}

function evaluateConcat(node, env, scope) {
  var rawParts = node[1];

  var parts = acceptParams(rawParts, env, scope);

  return env.hooks.concat(env, parts);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvZXhwcmVzc2lvbi12aXNpdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBV08sU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDOUMsTUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDOztBQUVmLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUMsU0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFEOztBQUVELFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRU0sU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDNUMsTUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDL0MsUUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFFBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsVUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0dBQ3pEOztBQUVELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUMxQyxNQUFJLEdBQUcsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQzs7OztBQUkxQixNQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7OztBQUd2QixPQUFHLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzVDLE1BQU07QUFDTCxPQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztHQUNsQjs7QUFFRCxTQUFPLEdBQUcsQ0FBQztDQUNaOztBQUVELFNBQVMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLFVBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFYixTQUFLLE9BQU87QUFBSSxhQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFBLEFBQy9CLFNBQUssS0FBSztBQUFNLGFBQU8sV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxBQUNyRCxTQUFLLFNBQVM7QUFBRSxhQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQUEsQUFDekQsU0FBSyxRQUFRO0FBQUcsYUFBTyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLEdBQ3pEO0NBQ0Y7O0FBRUQsU0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7TUFDOUIsSUFBSSxHQUFJLElBQUk7O0FBRW5CLFNBQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN4Qzs7QUFFRCxTQUFTLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtNQUNsQyxJQUFJLEdBQXdCLElBQUk7TUFBMUIsU0FBUyxHQUFhLElBQUk7TUFBZixPQUFPLEdBQUksSUFBSTs7QUFFdkMsTUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDakQsTUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBRTNDLFNBQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQzFEOztBQUVELFNBQVMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO01BQ2pDLFFBQVEsR0FBSSxJQUFJOztBQUV2QixNQUFJLEtBQUssR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzs7QUFFL0MsU0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckMiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS9leHByZXNzaW9uLXZpc2l0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgIyBFeHByZXNzaW9uIE5vZGVzOlxuXG4gIFRoZXNlIG5vZGVzIGFyZSBub3QgZGlyZWN0bHkgcmVzcG9uc2libGUgZm9yIGFueSBwYXJ0IG9mIHRoZSBET00sIGJ1dCBhcmVcbiAgZXZlbnR1YWxseSBwYXNzZWQgdG8gYSBTdGF0ZW1lbnQgTm9kZS5cblxuICAqIGdldFxuICAqIHN1YmV4cHJcbiAgKiBjb25jYXRcbiovXG5cbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHRQYXJhbXMobm9kZXMsIGVudiwgc2NvcGUpIHtcbiAgbGV0IGFycmF5ID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcnJheS5wdXNoKGFjY2VwdEV4cHJlc3Npb24obm9kZXNbaV0sIGVudiwgc2NvcGUpLnZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdEhhc2gocGFpcnMsIGVudiwgc2NvcGUpIHtcbiAgbGV0IG9iamVjdCA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgbGV0IGtleSA9IHBhaXJzW2ldO1xuICAgIGxldCB2YWx1ZSA9IHBhaXJzW2krMV07XG4gICAgb2JqZWN0W2tleV0gPSBhY2NlcHRFeHByZXNzaW9uKHZhbHVlLCBlbnYsIHNjb3BlKS52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGFjY2VwdEV4cHJlc3Npb24obm9kZSwgZW52LCBzY29wZSkge1xuICBsZXQgcmV0ID0geyB2YWx1ZTogbnVsbCB9O1xuXG4gIC8vIFByaW1pdGl2ZSBsaXRlcmFscyBhcmUgdW5hbWJpZ3VvdXNseSBub24tYXJyYXkgcmVwcmVzZW50YXRpb25zIG9mXG4gIC8vIHRoZW1zZWx2ZXMuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgLy8gaWYgKG5vZGUubGVuZ3RoICE9PSA3KSB7IHRocm93IG5ldyBFcnJvcignRklYTUU6IEludmFsaWQgc3RhdGVtZW50IGxlbmd0aCEnKTsgfVxuXG4gICAgcmV0LnZhbHVlID0gZXZhbHVhdGVOb2RlKG5vZGUsIGVudiwgc2NvcGUpO1xuICB9IGVsc2Uge1xuICAgIHJldC52YWx1ZSA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBldmFsdWF0ZU5vZGUobm9kZSwgZW52LCBzY29wZSkge1xuICBzd2l0Y2ggKG5vZGVbMF0pIHtcbiAgICAvLyBjYW4gYmUgdXNlZCBieSBtYW51YWxFbGVtZW50XG4gICAgY2FzZSAndmFsdWUnOiAgIHJldHVybiBub2RlWzFdO1xuICAgIGNhc2UgJ2dldCc6ICAgICByZXR1cm4gZXZhbHVhdGVHZXQobm9kZSwgZW52LCBzY29wZSk7XG4gICAgY2FzZSAnc3ViZXhwcic6IHJldHVybiBldmFsdWF0ZVN1YmV4cHIobm9kZSwgZW52LCBzY29wZSk7XG4gICAgY2FzZSAnY29uY2F0JzogIHJldHVybiBldmFsdWF0ZUNvbmNhdChub2RlLCBlbnYsIHNjb3BlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmFsdWF0ZUdldChub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCBbLCBwYXRoXSA9IG5vZGU7XG5cbiAgcmV0dXJuIGVudi5ob29rcy5nZXQoZW52LCBzY29wZSwgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGV2YWx1YXRlU3ViZXhwcihub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCBbLCBwYXRoLCByYXdQYXJhbXMsIHJhd0hhc2hdID0gbm9kZTtcblxuICBsZXQgcGFyYW1zID0gYWNjZXB0UGFyYW1zKHJhd1BhcmFtcywgZW52LCBzY29wZSk7XG4gIGxldCBoYXNoID0gYWNjZXB0SGFzaChyYXdIYXNoLCBlbnYsIHNjb3BlKTtcblxuICByZXR1cm4gZW52Lmhvb2tzLnN1YmV4cHIoZW52LCBzY29wZSwgcGF0aCwgcGFyYW1zLCBoYXNoKTtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGVDb25jYXQobm9kZSwgZW52LCBzY29wZSkge1xuICBsZXQgWywgcmF3UGFydHNdID0gbm9kZTtcblxuICBsZXQgcGFydHMgPSBhY2NlcHRQYXJhbXMocmF3UGFydHMsIGVudiwgc2NvcGUpO1xuXG4gIHJldHVybiBlbnYuaG9va3MuY29uY2F0KGVudiwgcGFydHMpO1xufVxuIl19